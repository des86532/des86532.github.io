<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【API】Ajax &amp; Fetch 取得資料</title>
    <url>/2019/06/11/API/ajax-and-fetch/</url>
    <content><![CDATA[<p><img src="1_5u_6uR4Y26Y6y8bd4YKw8A.png" alt="ajax and fetch"></p>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p>全名：「Application Programming Interface」，中文翻作應用程式介面。又稱為應用編程介面，就是軟體系統不同組成部分銜接的約定。</p>
<p>可以讓外部藉由串接我方的 API ，取得我方的資料。</p>
<p>舉例來說：</p>
<p>電腦上有一項標準叫做 USB 介面，所有廠商只要按照這一套標準來開發，就可以保證能夠連接電腦跟 USB 隨身碟</p>
<p>因為有一項標準叫做 USB 介面，當這套標準訂出來以後，所有廠商只要按照這一套標準來開發，就可以保證能夠連接電腦跟 USB 隨身碟。</p>
<p>API 也是這樣，只是變成程式跟程式之間的串接。例如說今天我寫程式需要讀取檔案好了，我要怎麼讀取檔案？讀取檔案是作業系統提供的功能，因此我可以去串接「讀取檔案的 API」，就可以在我的程式裡面也使用這個功能了。</p>
<p>例如說今天我想要讓我的網頁能夠用 Facebook 登入，那要怎麼辦？我就要去串接「Facebook 提供的 API」，就等於說是 Facebook 向外提供給大家的一套介面、一套標準，任何想要接入 Facebook 服務的開發者們，都可以遵循著那套規範拿到自己想要的資料，這個東西就叫做 API。</p>
<p>講到這邊，大家應該對 API 已經有一些 sense 了，我再多舉幾個例子：</p>
<ol>
<li>我想要抓到 flickr 上面的照片，所以我要去串接 flickr 的 API</li>
<li>Google 要開放讓其他 App 也能用 Google 登入驗證，所以 Google 要提供「Google 登入 API」</li>
<li>我要抓 Twitch 上面現在有哪些頻道，所以要串 Twitch AP</li>
</ol>
<blockquote>
<p><a class="link"   href="https://blog.techbridge.cc/2017/05/20/api-ajax-cors-and-jsonp/" >輕鬆理解 Ajax 與跨來源請求<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="取得資料"><a href="#取得資料" class="headerlink" title="取得資料"></a>取得資料</h2><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><p>全名：「Asynchronous Javascript And XML」，即非同步 JavaScript 及 XML。</p>
<p>Ajax 通過原生的 XMLHttpRequest 對象發出 Http 請求，得到服務器返回的數據後，在進行處理。</p>
<h4 id="Ajax-Works"><a href="#Ajax-Works" class="headerlink" title="Ajax Works"></a>Ajax Works</h4><p><img src="0_jfPHIXjQqo4Ox0NO.gif" alt="Ajax Works"></p>
<ol>
<li>網頁觸發事件(點擊按鈕)</li>
<li>創建 XMLHttpRequest 物件</li>
<li>XMLHttpRequest 物件發出請求給 server</li>
<li>server 處理請求</li>
<li>server 送回一個 response 給網頁</li>
<li>讀取 response</li>
<li>取得的資料，進行處理(渲染網頁)</li>
</ol>
<h4 id="Get-Request"><a href="#Get-Request" class="headerlink" title="Get Request"></a>Get Request</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data = null;</span><br><span class="line">    var xhr = new XMLHttpRequest();</span><br><span class="line">    xhr.addEventListener(&quot;readystatechange&quot;, function () &#123;</span><br><span class="line">        if (this.readyState === 4 &amp;&amp; this.state == 200) &#123;</span><br><span class="line">            console.log(this.responseText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    xhr.open(&quot;GET&quot;, &quot;http://opendata2.epa.gov.tw/AQI.json&quot;);</span><br><span class="line">    xhr.setRequestHeader(&quot;cache-control&quot;, &quot;no-cache&quot;);</span><br><span class="line">    xhr.send(data); //GET方法的時候，send傳送null</span><br></pre></td></tr></table></figure>
<h4 id="Post-Request"><a href="#Post-Request" class="headerlink" title="Post Request"></a>Post Request</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data = null;</span><br><span class="line">    var xhr = new XMLHttpRequest();</span><br><span class="line">    xhr.addEventListener(&quot;readystatechange&quot;, function () &#123;</span><br><span class="line">        if (this.readyState === 4 &amp;&amp; this.state == 200) &#123;</span><br><span class="line">            console.log(this.responseText);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    xhr.open(&quot;POST&quot;, &quot;http://opendata2.epa.gov.tw/AQI.json&quot;);</span><br><span class="line">    xhr.setRequestHeader(&quot;cache-control&quot;, &quot;no-cache&quot;);</span><br><span class="line">    xhr.setRequestHeader(&#x27;Content-Type&#x27;, &#x27;application/x-www-form-        urlencoded&#x27;);</span><br><span class="line">  xhr.send(&#x27;username=admin&amp;password=root&#x27;);</span><br></pre></td></tr></table></figure>

<p>open(method ,url ,boolean)，第三個參數為確認是否異步通知，默認為 true</p>
<p>如果第一個參數是 POST ，則需要將參數寫在 send() 方法裡面。send() 方法的參數可以是任何想送給服務器的數據。這時數據要以字符串的形式送給服務器，如：name=admin&amp;password=root。</p>
<p>如果不設置請求頭，原生 AJAX 會默認使用 Content-Type 是 text/plain;charset=UTF-8 的方式發送數據。</p>
<h2 id="onreadystatechange-property"><a href="#onreadystatechange-property" class="headerlink" title="onreadystatechange property"></a>onreadystatechange property</h2><p>readyStateHolds the status of the XMLHttpRequest.</p>
<ul>
<li>0: request not initialized (還沒開始)</li>
<li>1: server connection established (讀取中)</li>
<li>2: request received (已讀取)</li>
<li>3: processing request (資訊交換中)</li>
<li>4: request finished and response is ready (資訊交換完成)status200: “OK”</li>
<li>403: “Forbidden”</li>
<li>404: “Page not found”</li>
</ul>
<p>For a complete list go to the <a class="link"   href="https://www.w3schools.com/tags/ref_httpmessages.asp" >Http Messages ReferencestatusTextReturns<i class="fas fa-external-link-alt"></i></a> the status-text (e.g. “OK” or “Not Found”)</p>
<p>Jquery 中的 Ajax 函數，就是對 xhr 的封裝</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const corsUrl = &#x27;https://cors-anywhere.herokuapp.com/&#x27;;</span><br><span class="line">    var settings = &#123;</span><br><span class="line">        &quot;async&quot;: true,</span><br><span class="line">        &quot;crossDomain&quot;: true,</span><br><span class="line">        &quot;url&quot;: corsUrl + &quot;http://opendata2.epa.gov.tw/AQI.json&quot;,</span><br><span class="line">        &quot;method&quot;: &quot;GET&quot;,</span><br><span class="line">        &quot;headers&quot;: &#123;</span><br><span class="line">            &quot;cache-control&quot;: &quot;no-cache&quot;,</span><br><span class="line">            &quot;Postman-Token&quot;: &quot;28b6edfb-cf02-4662-afc6-09d9fd2d7a68&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(settings.url)</span><br><span class="line">    $.ajax(settings).done(function (response) &#123;</span><br><span class="line">        console.log(response);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a class="link"   href="https://www.w3schools.com/xml/ajax_intro.asp" >w3school — Ajax<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://www.cnblogs.com/xiaohuochai/p/6036475.html" >深入理解ajax系列第一篇 — — XHR对象<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://oscarotero.com/jquery/" >Jquery<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h3><p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" >Fetch API<i class="fas fa-external-link-alt"></i></a> 提供了工具使操作 http pipeline 更加容易, 像是日常會用到的發送和接送資料都可以使用。並且有 global 的 <a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch" >fetch()<i class="fas fa-external-link-alt"></i></a> 可以直接呼叫, 使開發能夠用更簡潔的語法取得非同步資料。</p>
<h4 id="Get-Request-1"><a href="#Get-Request-1" class="headerlink" title="Get Request"></a>Get Request</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fetch(&#x27;http://opendata2.epa.gov.tw/AQI.json&#x27;)</span><br><span class="line">        .then(</span><br><span class="line">            function (response) &#123;</span><br><span class="line">                if (response.status !== 200) &#123;</span><br><span class="line">                    console.log(&#x27;Looks like there was a problem.                  </span><br><span class="line">                              Status Code: &#x27; +  response.status);</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                // Examine the text in the response</span><br><span class="line">                response.json().then(function (data) &#123;</span><br><span class="line">                    console.log(data);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">        .catch(function (err) &#123;</span><br><span class="line">            console.log(&#x27;Fetch Error :-S&#x27;, err);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<h4 id="Post-Request-1"><a href="#Post-Request-1" class="headerlink" title="Post Request"></a>Post Request</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fetch(url, &#123;</span><br><span class="line">    method: &#x27;post&#x27;,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      &quot;Content-type&quot;: &quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    body: &#x27;foo=bar&amp;lorem=ipsum&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(json)</span><br><span class="line">  .then(function (data) &#123;</span><br><span class="line">    console.log(&#x27;Request succeeded with JSON response&#x27;, data);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(function (error) &#123;</span><br><span class="line">    console.log(&#x27;Request failed&#x27;, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="fetch-和-jQuery-ajax-有兩個主要的差異"><a href="#fetch-和-jQuery-ajax-有兩個主要的差異" class="headerlink" title="fetch 和 jQuery.ajax() 有兩個主要的差異:"></a>fetch 和 jQuery.ajax() 有兩個主要的差異:</h2><p>fetch() 回傳的 promise 物件, resolve 和 reject 的使用方式有差異, 當遇到 HTTP Status 404, 500 時會使用 resolve 但會將 status 的值從 ok 變為 false， 也就是說，它只會在網路出現問題或是被阻止進行Request(要求)時，才會變成已拒絕(rejected)狀態，其他都是已實現(fulfilled)。</p>
<p>fetch方法預設是不會傳送任何的認証証書(credentials)例如cookie到伺服器上的，如果網站依賴 session 會導致請求回傳未經認證，要加上傳送cookie可以用fetch(url, {credentials: ‘include’})的語法來設置。</p>
<blockquote>
<p><a class="link"   href="https://developers.google.com/web/updates/2015/03/introduction-to-fetch" >developers-google<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://developer.mozilla.org/zh-TW/docs/Web/API/Fetch_API/Using_Fetch#%E4%BD%BF%E7%94%A8_Fetch_%E7%99%BC%E9%80%81%E8%AB%8B%E6%B1%82_(_request_)" >MDN — Fetch<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/promise.html" >Gitbooks — ES6<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://developer.mozilla.org/zh-TW/docs/Web/API/XMLHttpRequest" >MDN — XMLHttpRequest<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://segmentfault.com/a/1190000008950789" >《你不知道的 XMLHttpRequest》<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://www.jianshu.com/p/373c348737f6" >fetch API 和 Ajax（XMLHttpRequest）的差异<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>API</category>
      </categories>
      <tags>
        <tag>api</tag>
        <tag>ajax</tag>
        <tag>fetch</tag>
      </tags>
  </entry>
  <entry>
    <title>【API】請求頭 Content-type</title>
    <url>/2019/06/12/API/content-type/</url>
    <content><![CDATA[<p><img src="1_1pfTiCLCG9QstzfCbTwwKw.png" alt="content type"></p>
<p>Content-type 一般只存在於 Post 方法中，因為 Get 方法是不含 “body” 的，它的請求參數都會被編碼到 url 後面，所以在 Get 方法中加 Content-type 是無用的。</p>
<p>我們知道，HTTP 協議是以 ASCII 碼 傳輸，創建在 TCP/IP 協議之上的應用層規範。規範把 HTTP 請求分為三個部分：狀態行、請求頭、消息主體。</p>
<p>協議規定 POST 提交的數據必須放在消息主體（entity-body）中，但協議並沒有規定數據必須使用什麼編碼方式。實際上，開發者完全可以自己決定消息主體的格式，只要最後發送的 HTTP 請求滿足上面的格式就可以。</p>
<p>但是，數據發送出去，還要服務端解析成功才有意義。一般服務端語言如 php、python 等，以及它們的 framework，都內置了自動解析常見數據格式的功能。服務端通常是根據請求頭（headers）中的 Content-Type 字段來獲知請求中的消息主體是用何種方式編碼，再對主體進行解析。所以説到 POST 提交數據方案，包含了 Content-Type 和消息主體編碼方式兩部分。</p>
<h2 id="application-x-www-form-urlencoded"><a href="#application-x-www-form-urlencoded" class="headerlink" title="application/x-www-form-urlencoded"></a>application/x-www-form-urlencoded</h2><p>最常見 POST 提交數據的方式，瀏覽器的原生 <code>&lt;form&gt;</code> 表單，如果沒有設置 <code>enctype</code> 屬性，就會以默認以此方式提交數據。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST http://www.example.com HTTP/1.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded;charset=utf-8</span><br><span class="line">title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3</span><br></pre></td></tr></table></figure>
<p>首先，Content-Type 被指定為 application/x-www-form-urlencoded；其次，提交的數據按照 key1=val1&amp;key2=val2 的方式進行編碼，key 和 val 都進行了 URL 轉碼。大部分服務端語言都對這種方式有很好的支持。例如 PHP 中，<code>$_POST[‘title’]</code> 可以獲取到 title 的值，<code>$_POST[‘sub’]</code> 可以得到 sub 數組。</p>
<p>很多時候，我們用 Ajax 提交數據時，也是使用這種方式。例如 JQuery 和 QWrap 的 Ajax，Content-Type 默認值都是<code>application/x-www-form-urlencoded;charset=utf-8</code>。</p>
<h2 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h2><p>我們使用表單上傳文檔時，必須讓 form 的 enctyped 等於這個值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST http://www.example.com HTTP/1.1</span><br><span class="line">Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line">Content-Disposition: form-data; name=&quot;text&quot;</span><br><span class="line">title</span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;chrome.png&quot;</span><br><span class="line">Content-Type: image/png</span><br><span class="line">PNG ... content of chrome.png ...</span><br><span class="line">------WebKitFormBoundaryrGKCBY7qhFd3TrwA--</span><br></pre></td></tr></table></figure>

<p>首先生成了一個 boundary 用於分割不同的字段，為了避免與正文內容重複，boundary 很長很複雜。然後 Content-Type 裏指明瞭數據是以 <code>mutipart/form-data</code> 來編碼，本次請求的 boundary 是什麼內容。</p>
<p>消息主體裏按照字段個數又分為多個結構類似的部分，每部分都是以 –boundary 開始，緊接着內容描述信息，然後是回車，最後是字段具體內容（文本或二進制）。如果傳輸的是文檔，還要包含文檔名和文檔類型信息。消息主體最後以 –boundary– 標示結束。一般用来上傳文件。</p>
<h2 id="application-json"><a href="#application-json" class="headerlink" title="application/json"></a>application/json</h2><p>由於 JSON 規範的流行，越來越多人把它當作 header</p>
<p>提交 JSON 字符串：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data = &#123;&#x27;title&#x27;:&#x27;test&#x27;, &#x27;sub&#x27; : [1,2,3]&#125;;</span><br><span class="line">$http.post(url, data).success(function(result) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>最終發送的請求；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST http://www.example.com HTTP/1.1 </span><br><span class="line">Content-Type: application/json;charset=utf-8</span><br><span class="line">&#123;&quot;title&quot;:&quot;test&quot;,&quot;sub&quot;:[1,2,3]&#125;</span><br></pre></td></tr></table></figure>

<p>這種方案，可以方便的提交複雜的結構化數據，特別適合 RESTful 的接口。各大抓包工具如 Chrome 自帶的開發者工具、Firebug、Fiddler，都會以樹形結構展示 JSON 數據。但也有些服務端還沒有支持這種方式，例如 php 就無法通過 $_POST 對象從上面的請求中獲得內容。需要自己手動處理下：在請求頭中 Content-Type 為 application/json 時，從 php:// input 裡獲得原始輸入流，再 json-decode 成對象。</p>
<h2 id="text-xml"><a href="#text-xml" class="headerlink" title="text/xml"></a>text/xml</h2><p>XML-RPC （XML Remote Procedure Call）協議簡單、功能夠用，各種語言的實現都有。它的使用也很廣泛，但已經逐漸被上面幾種方法取代。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST http://www.example.com HTTP/1.1</span><br><span class="line">Content-Type: text/xml</span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;methodCall&gt;</span><br><span class="line">    &lt;methodName&gt;examples.getStateName&lt;/methodName&gt;</span><br><span class="line">    &lt;params&gt;</span><br><span class="line">        &lt;param&gt;</span><br><span class="line">            &lt;value&gt;&lt;i4&gt;41&lt;/i4&gt;&lt;/value&gt;</span><br><span class="line">        &lt;/param&gt;</span><br><span class="line">    &lt;/params&gt;</span><br><span class="line">&lt;/methodCall&gt;</span><br></pre></td></tr></table></figure>

<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Post 請求數據的時候有兩種，<strong>傳json</strong> 的話就是 <code>application/json</code>，<strong>不傳 json</strong> 的話就是 <code>application/x-www-form-urlencoded</code>，傳<strong>文件</strong>的話用 <code>multipart/form-data</code></p>
<blockquote>
<p><a class="link"   href="https://imququ.com/post/four-ways-to-post-data-in-http.html" >四種常見的 POST 提交數據方式<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="http://victorblog.com/2012/12/20/make-angularjs-http-service-behave-like-jquery-ajax/" >AngularJS — ajax<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>API</category>
      </categories>
      <tags>
        <tag>api</tag>
        <tag>ajax</tag>
        <tag>post</tag>
      </tags>
  </entry>
  <entry>
    <title>【Books】Clean Code 無瑕的程式碼(一)(二)</title>
    <url>/2019/12/14/Books/clean-code1/</url>
    <content><![CDATA[<h2 id="為什麼要要求-clean-code"><a href="#為什麼要要求-clean-code" class="headerlink" title="為什麼要要求 clean code"></a>為什麼要要求 clean code</h2><ol>
<li>確保開發的順暢</li>
<li>確保開發者的心情</li>
</ol>
<blockquote>
<p>以上兩點就是我認為 clean code 能帶給所有開發者最大的優點</p>
</blockquote>
<h3 id="簡單程式碼的特質"><a href="#簡單程式碼的特質" class="headerlink" title="簡單程式碼的特質"></a>簡單程式碼的特質</h3><ul>
<li>能通過所有的測試</li>
<li>沒有重複的程式碼</li>
<li>充分表達設計系統設計的構思</li>
<li>具有最少數量的實體，實體包含類別 方法 函式或其他類似的實體等等</li>
</ul>
<h3 id="有意義的命名"><a href="#有意義的命名" class="headerlink" title="有意義的命名"></a>有意義的命名</h3><ul>
<li><p>讓命名名稱代表意圖</p>
<ul>
<li>看到命名就能直接想到該 method 的用法</li>
</ul>
</li>
<li><p>避免誤導</p>
<ul>
<li>過於相似</li>
<li>與命名不符的程式碼</li>
</ul>
</li>
<li><p>產生有意義的區別 (避免使用兩個無法區分的命名)</p>
<ul>
<li>productInfo &amp; productData (這兩個就是無法區分的無意義字詞)<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 錯誤範例 (無法區分用途)</span></span><br><span class="line">getActiveAccount()</span><br><span class="line">getActiveAccounts()</span><br><span class="line">getActiveAccountInfo()</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>使用能唸出來的名字</p>
</li>
<li><p>使用可被搜尋的名字</p>
</li>
<li><p>避免思維的轉換</p>
</li>
<li><p>類別的命名 (應該使用<strong>名詞</strong>)</p>
</li>
<li><p>方法的命名 (應該使用<strong>動詞</strong>)</p>
<ul>
<li>取出器 ( get 當字首 )</li>
<li>修改器 ( set 當字首 )</li>
<li>判定  ( is 當字首 )</li>
</ul>
</li>
<li><p>不要裝可愛 ( 表示不要使用只有自己看得懂的語言當作命名 )</p>
</li>
<li><p>每個概念使用一個字詞</p>
</li>
<li><p>別說雙關語</p>
</li>
<li><p>使用解決方案領域的命名</p>
<ul>
<li>儘量使用電腦科學領域的術語，因為大家都是程式設計師，這樣能使開發者更快瞭解函式的功能</li>
</ul>
</li>
<li><p>使用問題領域的命名</p>
<ul>
<li>當電腦科學沒有合適的術語可以進行命名，才考慮使用問題領域的命名，至少不清楚時可以向客戶詢問該字詞所代表的意思</li>
</ul>
</li>
<li><p>添加有意義的上下文資訊<br>假設有一些變數，<code>firstName</code>、<code>lastName</code>、<code>street</code>…，並沒有辦法判斷是什麼 <code>firstName</code>、<code>lastName</code><br>可以加上字首來增加上下文資訊，<code>addressFirstName</code>、<code>addressLastName</code>，可以清楚知道，這是在<br>描述<strong>地址</strong>，當然更好的方法是新增一個<strong>地址的類別</strong>，再把 <code>firstName</code>、<code>lastName</code>…寫在裡面</p>
</li>
<li><p>別添加無理由的上下文資訊<br>在 <code>asd</code> 模組裡，創造一個 <code>MailAddress</code> 類別，裡面添加 <code>asdFirstName</code>、<code>asdLastName</code>，<br>這就是無意義的上下文，已經在 <code>asd</code> 模組裡了，方法上就不用添加多餘的字首</p>
</li>
</ul>
<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>好的命名很困難，不同開發者擁有不同的文化背景，對字詞的解讀也不盡相同，我們只能盡量已多數人能夠理解的命名去努力。</p>
<p>大多數的時候其實開發者們並不會真的記住自己做了什麼命名，所以將命名變的更好，就跟重構程式碼一樣，會使大多數的開發者感到愉悅，好的命名跟好的程式碼一樣，會大幅節省開發時間以及有助於保持開發者的心情愉快</p>
<h3 id="有句話說明如何判斷程式碼的好壞"><a href="#有句話說明如何判斷程式碼的好壞" class="headerlink" title="有句話說明如何判斷程式碼的好壞"></a>有句話說明如何判斷程式碼的好壞</h3><blockquote>
<p>當別的開發者在使用你的程式碼進行再開發的時候，罵髒話的次數，跟程式碼的骯髒程度成正比</p>
</blockquote>
]]></content>
      <categories>
        <category>Books</category>
      </categories>
      <tags>
        <tag>books</tag>
        <tag>clean code</tag>
      </tags>
  </entry>
  <entry>
    <title>【Books】Clean Code 無瑕的程式碼(三)</title>
    <url>/2020/01/01/Books/clean-code2/</url>
    <content><![CDATA[<h2 id="函式的要點"><a href="#函式的要點" class="headerlink" title="函式的要點"></a>函式的要點</h2><ul>
<li>簡短</li>
<li>只做一件事情</li>
<li>每個函式最好只有一層抽象概念</li>
</ul>
<h3 id="簡短"><a href="#簡短" class="headerlink" title="簡短"></a>簡短</h3><p>越短越好，讓開發者可以一眼就明白，通常三到四行的長度就差不多</p>
<h4 id="區塊-Blocks-和縮排-Indenting"><a href="#區塊-Blocks-和縮排-Indenting" class="headerlink" title="區塊 (Blocks) 和縮排  (Indenting)"></a>區塊 (Blocks) 和縮排  (Indenting)</h4><p>函式不應該大到包含巢狀結構，縮排程度不應該大過一或兩層</p>
<h3 id="只做一件事情"><a href="#只做一件事情" class="headerlink" title="只做一件事情"></a>只做一件事情</h3><p>判斷函式是否做超過一件事情以上的方法就是，是否能從現有函式中抽出另一個函式</p>
<h3 id="每個函式最好只有一層抽象概念"><a href="#每個函式最好只有一層抽象概念" class="headerlink" title="每個函式最好只有一層抽象概念"></a>每個函式最好只有一層抽象概念</h3><p>例如說：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getHtml();</span><br><span class="line">pagePath();</span><br><span class="line">.append(‘\n’)</span><br></pre></td></tr></table></figure>

<p>這三種分別代表不同層次，如果將這三個功能寫在一起，會令人困惑</p>
<blockquote>
<p>一個函式擁有混合層次的抽象概念會令人困惑</p>
</blockquote>
<h4 id="降層準則"><a href="#降層準則" class="headerlink" title="降層準則"></a>降層準則</h4><p>由上而下閱讀程式碼，每個段落描述著目前所處的抽象層次，並提及了接續的下個層次的 <code>TO</code> 段落</p>
<p>最大的目的放在最上面，然後層層拆解，越往下越小</p>
<blockquote>
<p>為了 (TO) 要包含設定及拆解，我們先納入設定，再納入測試頁的內容，最後納入拆解。<br>為了要納入這些設定值，如果是套件的話，我們會納入套件設定步驟，然後再引入一般的設定步驟。<br>為了要納入套件設定，我們先搜尋『SuiteSetup』頁面的上層，然後加入納入該頁面路徑的敘述。<br>為了要搜尋上一層…</p>
</blockquote>
<h3 id="使用具描述能力的名稱"><a href="#使用具描述能力的名稱" class="headerlink" title="使用具描述能力的名稱"></a>使用具描述能力的名稱</h3><p>看到名稱後與所想的功能差不多</p>
<h3 id="函式的參數"><a href="#函式的參數" class="headerlink" title="函式的參數"></a>函式的參數</h3><p>最理想的參數數量是零個，再來是一個，然後是兩個</p>
<p>參數越多代表選擇越多，會使測試的難度上升許多</p>
<h4 id="旗標參數-flag"><a href="#旗標參數-flag" class="headerlink" title="旗標參數 (flag)"></a>旗標參數 (flag)</h4><p>以傳入布林值當作參數的 function，不推薦使用此作法，表明著這個 function 就不是單一作用，當 true 時一個作用，當 false 時另一個作用</p>
<h4 id="物件型態的參數"><a href="#物件型態的參數" class="headerlink" title="物件型態的參數"></a>物件型態的參數</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Function (object) &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="動詞和關鍵字"><a href="#動詞和關鍵字" class="headerlink" title="動詞和關鍵字"></a>動詞和關鍵字</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">write (name)</span><br></pre></td></tr></table></figure>

<p>這樣的命名可以清楚表達意思，也可以變成 writeField 寫入欄位的意思，更能清楚表達</p>
<h3 id="要無副作用"><a href="#要無副作用" class="headerlink" title="要無副作用"></a>要無副作用</h3><p>其實就是函式只做一件事</p>
<h3 id="指令和查詢的分離"><a href="#指令和查詢的分離" class="headerlink" title="指令和查詢的分離"></a>指令和查詢的分離</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set(username)</span><br><span class="line"></span><br><span class="line">If (set(username))</span><br></pre></td></tr></table></figure>

<p>這樣會讓人混淆 set 不知道是名詞還是動詞</p>
<h2 id="錯誤處理"><a href="#錯誤處理" class="headerlink" title="錯誤處理"></a>錯誤處理</h2><p>使用例外處理取代回傳錯誤碼</p>
<h3 id="例外處理"><a href="#例外處理" class="headerlink" title="例外處理"></a>例外處理</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	deletePage(page)</span><br><span class="line">	Registry.deleteReference(page.name)</span><br><span class="line">&#125; <span class="keyword">catch</span> (exception e) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="回傳錯誤碼"><a href="#回傳錯誤碼" class="headerlink" title="回傳錯誤碼"></a>回傳錯誤碼</h3><p>這就是回傳錯誤碼，如果都使用這樣的方式來進行錯誤處理，會使得錯誤處理的函示，變得很深層的巢狀結構</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deletePage(page) === ‘error’</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Books</category>
      </categories>
      <tags>
        <tag>books</tag>
        <tag>clean code</tag>
      </tags>
  </entry>
  <entry>
    <title>【Books】Clean Code 無瑕的程式碼(四)</title>
    <url>/2020/01/01/Books/clean-code3/</url>
    <content><![CDATA[<h2 id="註解"><a href="#註解" class="headerlink" title="註解"></a>註解</h2><blockquote>
<p>不要替糟糕的程式碼寫註解 — 重寫它，最好的註解就是沒有註解</p>
</blockquote>
<p>沒有什麼可以比一段放對位置的註解，更能提供助益，沒有什麼比一段無聊教條式的註解更能弄亂模組，也沒有什麼可以比一段陳舊而混沌不清的註解，更能傳播傷害性的謊言及提供錯誤的資訊</p>
<p>程式碼會一直被更新，重構，但很多人會忘記也將註解進行更新，導致許多迭代後，註解反而變成混淆的存在</p>
<h3 id="註解無法彌補糟糕的程式碼"><a href="#註解無法彌補糟糕的程式碼" class="headerlink" title="註解無法彌補糟糕的程式碼"></a>註解無法彌補糟糕的程式碼</h3><h3 id="用程式碼表達你的本意"><a href="#用程式碼表達你的本意" class="headerlink" title="用程式碼表達你的本意"></a>用程式碼表達你的本意</h3><h3 id="有益的註解"><a href="#有益的註解" class="headerlink" title="有益的註解"></a>有益的註解</h3><p>::真正有益的註解就是不寫註解::</p>
<ul>
<li><p>法律型的註解<br>例如：提供法律條文的編號</p>
</li>
<li><p>資訊型的註解<br>例如：說明該方法的用途</p>
</li>
<li><p>對意圖的解釋<br>例如：解釋為何要這樣寫，說明自己的邏輯</p>
</li>
<li><p>闡明<br>例如：說明該方法的意義，解釋成可讀性的文字</p>
</li>
<li><p>對於後果的告誡<br>例如：想要修改該段程式碼，所需要承擔的後果</p>
</li>
</ul>
<h3 id="TODO-代辦事項-註解"><a href="#TODO-代辦事項-註解" class="headerlink" title="TODO (代辦事項) 註解"></a>TODO (代辦事項) 註解</h3><p>是程式設計師認為應該要完成的事情，但因為某些原因無法在此刻修改，所留下的提醒</p>
<h3 id="不夠清楚的註解倒不如不要寫"><a href="#不夠清楚的註解倒不如不要寫" class="headerlink" title="不夠清楚的註解倒不如不要寫"></a>不夠清楚的註解倒不如不要寫</h3><h3 id="少用下列這些註解"><a href="#少用下列這些註解" class="headerlink" title="少用下列這些註解"></a>少用下列這些註解</h3><ul>
<li>區分區塊</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">///// Actions /////////</span><br></pre></td></tr></table></figure>

<ul>
<li><p>表達用處<br>在右括號 <code>&#125;</code> 後，下註解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#125; // while</span><br><span class="line">&#123;&#125; // try</span><br></pre></td></tr></table></figure></li>
<li><p>出處及署名</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* Added by Rick */</span><br></pre></td></tr></table></figure>

<ul>
<li>被註解起來的程式碼</li>
</ul>
]]></content>
      <categories>
        <category>Books</category>
      </categories>
      <tags>
        <tag>books</tag>
        <tag>clean code</tag>
      </tags>
  </entry>
  <entry>
    <title>【Books】Clean Code 無瑕的程式碼(五)(六)(七)</title>
    <url>/2020/01/01/Books/clean-code4/</url>
    <content><![CDATA[<h2 id="編排"><a href="#編排" class="headerlink" title="編排"></a>編排</h2><h3 id="概念間的垂直空白間隔"><a href="#概念間的垂直空白間隔" class="headerlink" title="概念間的垂直空白間隔"></a>概念間的垂直空白間隔</h3><p>概念與概念間，適當的以空白行隔開</p>
<h3 id="垂直密度"><a href="#垂直密度" class="headerlink" title="垂直密度"></a>垂直密度</h3><p>將整段程式碼，保持在一眼可以看見全部的狀態，勿使用過多空白行，避免眼球一直上下尋找</p>
<h3 id="垂直距離"><a href="#垂直距離" class="headerlink" title="垂直距離"></a>垂直距離</h3><p>類似的概念應該放在附近，<strong>宣告的變數</strong>，也應該盡可能靠近變數被使用的地方，最好是上方</p>
<h4 id="實體變數"><a href="#實體變數" class="headerlink" title="實體變數"></a>實體變數</h4><p>實體變數應該放在整個類別的上方，因為實體變數會一直被使用，放在最上方可以更好的被查看</p>
<h4 id="相依的函式"><a href="#相依的函式" class="headerlink" title="相依的函式"></a>相依的函式</h4><p>在編排上也應該盡量靠近 </p>
<blockquote>
<p>如果有團隊共同規範的規定，應依照共同制定的規則進行編排</p>
</blockquote>
<h2 id="物件及資料結構"><a href="#物件及資料結構" class="headerlink" title="物件及資料結構"></a>物件及資料結構</h2><h3 id="德摩特爾法則"><a href="#德摩特爾法則" class="headerlink" title="德摩特爾法則"></a>德摩特爾法則</h3><p>模組不應該知道 <strong>關於他所操縱物件的內部運作</strong></p>
<p>物件導向的設計，能更加有增加新資料型態的彈性，其他時候，我們會希望有增加新行為的彈性，<br>所以在系統這部分，我們較偏好資料型態和結構化的設計</p>
<h2 id="錯誤處理"><a href="#錯誤處理" class="headerlink" title="錯誤處理"></a>錯誤處理</h2><blockquote>
<p>如果他模糊了原本程式碼的邏輯，那就不對了</p>
</blockquote>
<p>使用例外事件而非回傳錯誤碼</p>
<p>儘量不要回傳 null ，這會導致如果有一天忘記檢查 null 就會使程式碼錯誤，<br>如果使用會回傳 null 的 api， 進行統一處理將會收到 null 的這個情況，回傳一個錯誤，這樣就不用每隻程式都在檢查有沒有 null</p>
]]></content>
      <categories>
        <category>Books</category>
      </categories>
      <tags>
        <tag>books</tag>
        <tag>clean code</tag>
      </tags>
  </entry>
  <entry>
    <title>【CORS】跨來源資源共用CORS</title>
    <url>/2019/06/10/CORS/cors/</url>
    <content><![CDATA[<p><img src="1_EQTmOFjRW-uxiE9HHdAXgQ.png" alt="CORS"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這裡使用 Postman 並使用 六角學院 提供的API進行測試</p>
<p><img src="0_37y2PnevkwaZHaQL.png" alt="CORS"></p>
<p>Postman 可以提供不同語言的code</p>
<p><img src="0_43TBTugJVG7pyRxW.png" alt="CORS"></p>
<p>將 crossDomain 設定為true ， 會在後端表頭自動帶入<br><code>access-control-allow-origin: * (星號代表全部都可以的意思)</code></p>
<blockquote>
<p><a class="link"   href="https://api.jquery.com/jquery.ajax/" >jQuery_ajax<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p><img src="0_0RX7cnC9MIgkz54Z.png" alt="CORS"></p>
<p>照理來說都可以成功 GET 到資料才對，不過使用 XHR 的方式時卻得到以下回應</p>
<p><img src="0_EgKsOeCyydjNot_9.png" alt="CORS"></p>
<p>Access-Control-Allow-Origin不能設定為 * ，那要設定成甚麼？</p>
<h2 id="XMLHttpRequest-withCredentials"><a href="#XMLHttpRequest-withCredentials" class="headerlink" title="XMLHttpRequest.withCredentials"></a>XMLHttpRequest.withCredentials</h2><p>XMLHttpRequest.withCredentials = true時，發現你與呼叫的API的網站 不同源時，瀏覽器一樣會幫你發 Request，但是會把 Response 給擋下來，不讓你的 JavaScript 拿到並且傳回錯誤。</p>
<p><img src="https://developer.mozilla.org/zh-TW/docs/Web/Security/Same-origin_policy#%E8%AE%8A%E6%9B%B4%E4%BE%86%E6%BA%90" alt="同源政策(Same-origin policy)"></p>
<h2 id="有甚麼用？"><a href="#有甚麼用？" class="headerlink" title="有甚麼用？"></a>有甚麼用？</h2><p>跨域請求是否提供憑據信息( cookie、HTTP 認證及客戶端 SSL 證明等)也可以簡單的理解為，當前請求為跨域類型時是否在請求中協帶 cookie</p>
<h2 id="怎麼用"><a href="#怎麼用" class="headerlink" title="怎麼用?"></a>怎麼用?</h2><p>withCredentials 屬於 XMLHttpRequest 對象下的屬性，可以對其進行查看或配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var xhr = new XMLHttpRequest();</span><br><span class="line">xhr.open(&#x27;GET&#x27;, &#x27;http://172.19.0.215:1314/learnLinkManager/getLearnLinkList&#x27;, true);</span><br><span class="line">xhr.withCredentials = true;</span><br><span class="line">xhr.onreadystatechange = function () &#123;</span><br><span class="line">console.log(&#x27;withCredentials=&gt;&#x27;, xhr.withCredentials);</span><br><span class="line">&#125;;</span><br><span class="line">xhr.send(null);</span><br></pre></td></tr></table></figure>

<p>需要注意是，當配置了xhr.withCredentials = true時，必須在 後端 增加 response頭信息 Access-Control-Allow-Origin，且必須指定域名，不能指定為 *</p>
<h2 id="後端設定方法："><a href="#後端設定方法：" class="headerlink" title="後端設定方法："></a>後端設定方法：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">res.setHeader(‘Access-Control-Allow-Origin’, &#x27;http://172.19.0.215:3333&#x27;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a class="link"   href="https://www.jianshu.com/p/af1fc0fab4c5" >ajax中的withCredentials使用效果<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="結語："><a href="#結語：" class="headerlink" title="結語："></a>結語：</h2><p>所以當 XMLHttpRequest.withCredentials = true時，除非是在同一個域名下，不然是取不回 response ，XMLHttpRequest.withCredentials 本身預設是 false，把他設定回 false ，即可以取得資料</p>
<h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p>跨來源資源共用（Cross-Origin Resource Sharing ( CORS )）是一種使用額外 HTTP 標頭令目前瀏覽網站的使用者代理取得存取其他來源（網域）伺服器特定資源權限的機制。當使用者代理請求一個 — — 例如來自於不同網域（domain）、通訊協定（protocol）或通訊埠（port）的資源時，會建立一個<strong>跨來源 HTTP 請求（cross-origin HTTP request）</strong></p>
<p>舉個跨來源請求的例子：<code>http://domain-a.com</code> HTML 頁面裡面一個 <code>&lt;img&gt;</code> 標籤的 src 屬性載入來自 <code>http://domain-b.com/image.jpg</code> 的圖片。現今網路上許多頁面所載入的資源，如 CSS 樣式表、圖片影像、以及指令碼（script）都來自與所在位置分離的網域，如內容傳遞網路（content delivery networks, CDN）</p>
<p>同源政策的確是規範非同源就被擋下來，但與此同時其實又有另外一個規範，是說：「如果你想在不同 origin 之間傳輸資料的話，你應該怎麼做」，這規範就叫做 <code>CORS</code></p>
<p>這套規範跟你說，如果你想開啟跨來源 HTTP 請求的話，Server 必須在 Response 的 Header 裡面加上<code>Access-Control-Allow-Origin</code></p>
<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/CORS" >MDN-CORS<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="Preflight-Request"><a href="#Preflight-Request" class="headerlink" title="Preflight Request"></a>Preflight Request</h2><p><img src="0_n0KKpXQt-GT4dh16.png" alt="Preflight Request"></p>
<p>咦？我明明只發了一個 Request，怎麼變兩個了？而且第一個的 Method 居然是OPTIONS。只是多加了一個 Header 就多了一個 Request，是為什麼呢？</p>
<p>CORS 把 Request 分成兩種，一種是簡單請求（simple requests）</p>
<h2 id="簡單請求"><a href="#簡單請求" class="headerlink" title="簡單請求"></a>簡單請求</h2><p>一個不觸發 CORS 預檢的請求 — — 所謂的「簡單請求（simple requests）」</p>
<p>基本上，只使用 GET、HEAD、POST，且不添加額外的 Header，大部分為 simple requests ，詳細說明請看以下參考</p>
<p><img src="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/CORS#%E7%B0%A1%E5%96%AE%E8%AB%8B%E6%B1%82" alt="MDN-簡單請求"></p>
<p>這一個 Request 叫做 Preflight Request，中文翻作「預檢請求」，因為非簡單請求可能會帶有一些使用者資料，因此會先透過 Preflight Request 去確認後續的請求能否送出</p>
<p>如果這個 Preflight Request 沒有過的話，真的 Request 也就不會發送了，這就是預檢請求的目的</p>
<p>我舉一個例子，你就會知道為什麼需要這個 Preflight Request 了</p>
<p>假設今天某個 Server 提供了一個 API 網址叫做：<code>https://example.com/data/16</code>，你只要對它發送 GET，就能夠拿到 id 是 16 的資料，只要對它發送 DELETE，就可以把這筆資料刪除</p>
<p>如果今天沒有 Preflight Request 這個機制的話，我就可以在隨便一個 Domain 的網頁上面發送一個 DELETE 的 Request 給這個 API。剛剛我有強調說瀏覽器的 CORS 機制，還是會幫你發送 Request，但只是 Response 被瀏覽器擋住而已</p>
<p>因此呢，儘管沒有 Response，但是 Server 端的確收到了這個 Request，因此就會把這筆資料給刪除</p>
<p>如果有 Preflight Request 的話，在發送出去收到結果的時候，就會知道這個 API 並沒有提供 CORS，因此真的 DELETE 請求就不會送出，到這邊就結束了</p>
<p>先用一個 OPTIONS 的請求去確認之後的 Request 能不能送出，這就是 Preflight Request 的目的</p>
<h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>這是跨來源請求除了 CORS 以外的另外一種方法，全名叫做：JSON with Padding</p>
<p>其實有些東西是不受同源政策限制的，例如說<code>&lt;script&gt;</code>這個 Tag，我們不是常常引用 <code>CDN</code> 或是 <code>Google Analytics</code> 之類的第三方套件嗎？網址都是其他 Domain 的，但是卻能正常載入</p>
<p><code>JSONP</code> 就是利用<code>&lt;script&gt;</code>的這個特性來達成跨來源請求的</p>
<p>今天先想像你有一段 HTML 長這樣：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  var response = &#123;</span><br><span class="line">    data: &#x27;test&#x27;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  console.log(response);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>很好懂的一段程式碼，我就不多做解釋了。那如果今天把上面那一段換成一串網址呢？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;https://another-origin.com/api/games&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  console.log(response);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>如果 <code>https://another-origin.com/api/games</code> 這個網址返回的內容就是剛剛的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var response = &#123;</span><br><span class="line">  data: &#x27;test&#x27;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>那我不就一樣可以拿到資料了嗎？而且這些資料還是 Server 端控制的，所以 Server 可以給我任何資料。但是這樣用全域變數其實不太好，我們可以借用剛剛的 Callback Function 的概念，改成這樣：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  receiveData(&#123;</span><br><span class="line">    data: &#x27;test&#x27;</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  function receiveData (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>實務上在操作 JSONP 的時候，Server 通常會提供一個 callback 的參數讓 client 端帶過去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">URL: https://another-origin.com/api/games?client_id=xxx&amp;callback=receiveData&amp;limit=1</span><br><span class="line">&lt;script src=&quot;https://another-origin.com/api/games?client_id=xxx&amp;callback=receiveData&amp;limit=1﻿&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  function receiveData (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>所以 JSONP 是什麼？JSONP 其實就是透過上面這種形式，利用<code>&lt;script&gt;</code>裡面放資料，透過指定好的 function 把資料給帶回去。你只要把第一段的<code>&lt;script&gt;</code>那邊想成是 <code>Server</code> 的回傳值，你就可以理解了</p>
<p>它就是透過你帶過去的callback這個參數當作函式名稱，把 JavaScript 物件整個傳到 Function 裡面，你就可以在 Function 裡面拿到資料</p>
<p>利用 JSONP，也可以存取跨來源的資料。但 JSONP 的缺點就是你要帶的那些參數永遠都只能用附加在網址上的方式（GET）帶過去，沒辦法用 POST</p>
<p>如果能用 CORS 的話，還是應該優先考慮 CORS</p>
<blockquote>
<p><a class="link"   href="https://blog.techbridge.cc/2017/05/20/api-ajax-cors-and-jsonp/" >輕鬆理解 Ajax 與跨來源請求<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="添加-header"><a href="#添加-header" class="headerlink" title="添加 header"></a>添加 header</h2><p>To use the API, just prefix the URL with the API URL.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const api = &#x27;http://opendata2.epa.gov.tw/AQI.json&#x27;;  //要取得的API</span><br><span class="line">const corsUrl = &#x27;https://cors-anywhere.herokuapp.com/&#x27;;</span><br></pre></td></tr></table></figure>

<p>將 corsUrl + api 組合起來</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(corsUrl + api)</span><br><span class="line">//  https://cors-anywhere.herokuapp.com/http://opendata2.epa.gov.tw/AQI.json</span><br></pre></td></tr></table></figure>

<p>向上面這個 Url 發送 request ，可以在 response 標頭添加<br><code>Access-Control-Allow-Origin : *</code></p>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function() &#123;</span><br><span class="line">    var cors_api_host = &#x27;cors-anywhere.herokuapp.com&#x27;;</span><br><span class="line">    var cors_api_url = &#x27;https://&#x27; + cors_api_host + &#x27;/&#x27;;</span><br><span class="line">    var slice = [].slice;</span><br><span class="line">    var origin = window.location.protocol + &#x27;//&#x27; + window.location.host;</span><br><span class="line">    var open = XMLHttpRequest.prototype.open;</span><br><span class="line">    XMLHttpRequest.prototype.open = function() &#123;</span><br><span class="line">        var args = slice.call(arguments);</span><br><span class="line">        var targetOrigin = /^https?:\/\/([^\/]+)/i.exec(args[1]);</span><br><span class="line">        if (targetOrigin &amp;&amp; targetOrigin[0].toLowerCase() !== origin &amp;&amp;</span><br><span class="line">            targetOrigin[1] !== cors_api_host) &#123;</span><br><span class="line">            args[1] = cors_api_url + args[1];</span><br><span class="line">        &#125;</span><br><span class="line">        return open.apply(this, args);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line">jQuery.ajaxPrefilter(function(options) &#123;</span><br><span class="line">    if (options.crossDomain &amp;&amp; jQuery.support.cors) &#123;</span><br><span class="line">        options.url = &#x27;https://cors-anywhere.herokuapp.com/&#x27; + options.url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a class="link"   href="https://github.com/Rob--W/cors-anywhere/" >cors-codeanywhere<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>CORS</category>
      </categories>
      <tags>
        <tag>ajax</tag>
        <tag>cors</tag>
      </tags>
  </entry>
  <entry>
    <title>【CSS】CSS Reset</title>
    <url>/2019/06/09/CSS/css_reset/</url>
    <content><![CDATA[<p>瀏覽器會有預設margin，為了讓網頁排版可以全部按照我們的程式碼執行，會在CSS檔案的最上方加入CSS Reset，讓這些瀏覽器預設的樣式歸零</p>
<p><img src="0_vjLkA_8Fjj27FTJD.png" alt="CSS Reset"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">	&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">	&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot; media=&quot;screen&quot;&gt;</span><br><span class="line">	.test1 &#123;</span><br><span class="line">		width:200px;</span><br><span class="line">		height: 200px;</span><br><span class="line">		background-color: blue;</span><br><span class="line">	&#125;</span><br><span class="line">	.test2 &#123;</span><br><span class="line">		width:200px;</span><br><span class="line">		height: 200px;</span><br><span class="line">		background-color: red;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">	&lt;div class=&quot;test1&quot;&gt;&lt;/div&gt;</span><br><span class="line">	&lt;div class=&quot;test2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="CSS-Reset-語法-此為個人慣用"><a href="#CSS-Reset-語法-此為個人慣用" class="headerlink" title="CSS Reset 語法 (此為個人慣用)"></a>CSS Reset 語法 (此為個人慣用)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html, body, div, span, applet, object, iframe,</span><br><span class="line">h1, h2, h3, h4, h5, h6, p, blockquote, pre,</span><br><span class="line">a, abbr, acronym, address, big, cite, code,</span><br><span class="line">del, dfn, em, img, ins, kbd, q, s, samp,</span><br><span class="line">small, strike, strong, sub, sup, tt, var,</span><br><span class="line">b, u, i, center,</span><br><span class="line">dl, dt, dd, ol, ul, li,</span><br><span class="line">fieldset, form, label, legend,</span><br><span class="line">table, caption, tbody, tfoot, thead, tr, th, td,</span><br><span class="line">article, aside, canvas, details, embed, </span><br><span class="line">figure, figcaption, footer, header, hgroup, </span><br><span class="line">menu, nav, output, ruby, section, summary,</span><br><span class="line">time, mark, audio, video &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">    border: 0;</span><br><span class="line">    font-size: 100%;</span><br><span class="line">    font: inherit;</span><br><span class="line">    vertical-align: baseline;</span><br><span class="line">&#125;</span><br><span class="line">/* HTML5 display-role reset for older browsers */</span><br><span class="line">article, aside, details, figcaption, figure, </span><br><span class="line">footer, header, hgroup, menu, nav, section &#123;</span><br><span class="line">    display: block;</span><br><span class="line">&#125;</span><br><span class="line">body &#123;</span><br><span class="line">    line-height: 1;</span><br><span class="line">&#125;</span><br><span class="line">ol, ul &#123;</span><br><span class="line">    list-style: none;</span><br><span class="line">&#125;</span><br><span class="line">blockquote, q &#123;</span><br><span class="line">    quotes: none;</span><br><span class="line">&#125;</span><br><span class="line">blockquote:before, blockquote:after,</span><br><span class="line">q:before, q:after &#123;</span><br><span class="line">    content: &#x27;&#x27;;</span><br><span class="line">    content: none;</span><br><span class="line">&#125;</span><br><span class="line">table &#123;</span><br><span class="line">    border-collapse: collapse;</span><br><span class="line">    border-spacing: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">  -webkit-box-sizing: border-box;</span><br><span class="line">     -moz-box-sizing: border-box;</span><br><span class="line">          box-sizing: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="box-sizing-content-box"><a href="#box-sizing-content-box" class="headerlink" title="box-sizing:content-box"></a>box-sizing:content-box</h3><p>div 設定的寬度僅為內容寬度，而內距與邊框額外加上去</p>
<h3 id="box-sizing-boder-box"><a href="#box-sizing-boder-box" class="headerlink" title="box-sizing:boder-box"></a>box-sizing:boder-box</h3><p>div 設定的寬度就已經包含內容寬度、內距與邊框寬度</p>
<h3 id="表示全部套用"><a href="#表示全部套用" class="headerlink" title="*表示全部套用"></a>*表示全部套用</h3>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>css reset</tag>
      </tags>
  </entry>
  <entry>
    <title>【CSS】display-flex</title>
    <url>/2020/07/03/CSS/display-flex/</url>
    <content><![CDATA[<h1 id="display-flex"><a href="#display-flex" class="headerlink" title="display: flex"></a>display: flex</h1><h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用flex控制份數<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flexcard&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mid&quot;</span>&gt;</span>mid<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>flex: [flex-grow = 1] [flex-shrink = 1] [flex-basic = 0%]</code></p>
</blockquote>
<h3 id="flex-比例分配"><a href="#flex-比例分配" class="headerlink" title="flex 比例分配"></a>flex 比例分配</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.flexcard</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">	<span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mid</span> &#123;</span><br><span class="line">	<span class="attribute">flex</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">	<span class="attribute">flex</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 總合超出父元素的寬度，會按照比例分配</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mid</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="D4C08F27-6D5A-4682-A730-5E3D22F87328.png" alt="display-flex"></p>
<h3 id="flex-shrink-縮減分配"><a href="#flex-shrink-縮減分配" class="headerlink" title="flex-shrink 縮減分配"></a>flex-shrink 縮減分配</h3><h4 id="當寬度小於內容總和時"><a href="#當寬度小於內容總和時" class="headerlink" title="當寬度小於內容總和時"></a>當寬度小於內容總和時</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 總共是 <span class="number">400px</span> - <span class="number">200px</span> = <span class="number">200px</span></span><br><span class="line">// <span class="number">200</span>*(<span class="number">1</span>/<span class="number">4</span>) = <span class="number">50px</span></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// mid 被設定為不能縮減，所以最小就會是 <span class="number">200px</span>，剩下的寬度再按照比列分配給另外兩個</span><br><span class="line"><span class="selector-class">.mid</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// <span class="number">200</span>*(<span class="number">3</span>/<span class="number">4</span>) = <span class="number">150px</span></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="D3D57C9C-C1E6-4D9D-A4B6-007B2CE6286F.png" alt="display-flex"></p>
<h4 id="當寬度大於內容總和時"><a href="#當寬度大於內容總和時" class="headerlink" title="當寬度大於內容總和時"></a>當寬度大於內容總和時</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 總共是 <span class="number">1200px</span></span><br><span class="line">// <span class="attribute">flex</span>: <span class="number">100px</span> = flex: <span class="number">1</span> <span class="number">100px</span>; 因為 <span class="attribute">flex-grow</span> 預設為 <span class="number">1</span></span><br><span class="line">// <span class="number">1200</span> - (<span class="number">100</span> + <span class="number">200</span> + <span class="number">300</span>) = <span class="number">600</span></span><br><span class="line">// <span class="number">600</span> * (<span class="number">1</span>/<span class="number">3</span>) = <span class="number">200</span> 多出來的各有一等份</span><br><span class="line">// <span class="number">100px</span> + <span class="number">200px</span> = <span class="number">300px</span></span><br><span class="line"></span><br><span class="line">// <span class="number">300px</span></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// <span class="number">600</span> * (<span class="number">1</span>/<span class="number">3</span>) = <span class="number">200</span> 多出來的各有一等份</span><br><span class="line">// <span class="number">200px</span> + <span class="number">200px</span> = <span class="number">400px</span></span><br><span class="line"></span><br><span class="line">// <span class="number">400px</span></span><br><span class="line"><span class="selector-class">.mid</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// <span class="number">600</span> * (<span class="number">1</span>/<span class="number">3</span>) = <span class="number">200</span> 多出來的各有一等份</span><br><span class="line">// <span class="number">300px</span> + <span class="number">200px</span> = <span class="number">500px</span></span><br><span class="line"></span><br><span class="line">// <span class="number">500px</span></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="01FDAC58-A061-4E83-83F9-686AE4A43443.png" alt="display-flex"></p>
<h3 id="flex-grow-膨脹分配"><a href="#flex-grow-膨脹分配" class="headerlink" title="flex-grow 膨脹分配"></a>flex-grow 膨脹分配</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 總共是 <span class="number">1200px</span></span><br><span class="line">// <span class="attribute">flex</span>: <span class="number">100px</span> = flex: <span class="number">1</span> <span class="number">100px</span>; 因為 <span class="attribute">flex-grow</span> 預設為 <span class="number">1</span></span><br><span class="line">// <span class="number">1200</span> - (<span class="number">100</span> + <span class="number">200</span> + <span class="number">300</span>) = <span class="number">600</span></span><br><span class="line">// <span class="number">600</span> * (<span class="number">1</span>/<span class="number">2</span>) = <span class="number">300</span></span><br><span class="line">// <span class="number">100px</span> + <span class="number">300px</span> = <span class="number">400px</span></span><br><span class="line"></span><br><span class="line">// <span class="number">400px</span></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 不膨脹也不縮小，不參與分配</span><br><span class="line">// <span class="number">200px</span></span><br><span class="line"><span class="selector-class">.mid</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">flex-grow</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// <span class="number">600</span> * (<span class="number">1</span>/<span class="number">2</span>) = <span class="number">300</span> 多出來的各有一等份</span><br><span class="line">// <span class="number">300px</span> + <span class="number">300px</span> = <span class="number">600px</span></span><br><span class="line"></span><br><span class="line">// <span class="number">600px</span></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="7DE6C55F-9628-4AF3-B8E1-7FBF5EF66C6B.png" alt="display-flex"></p>
<h3 id="order-排列上的比重-優先序"><a href="#order-排列上的比重-優先序" class="headerlink" title="order 排列上的比重 (優先序)"></a>order 排列上的比重 (優先序)</h3><h4 id="flex-direction-row"><a href="#flex-direction-row" class="headerlink" title="flex-direction: row"></a>flex-direction: row</h4><blockquote>
<p><code>order</code> 越大會在越後面<br><code>order</code> 越小會在越前面</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mid</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">order</span>: -<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="97662702-FE11-4D8B-A27E-D6F0A14F17CE.png" alt="display-flex"></p>
<h4 id="flex-direction-row-reverse"><a href="#flex-direction-row-reverse" class="headerlink" title="flex-direction: row-reverse"></a>flex-direction: row-reverse</h4><blockquote>
<p><code>order</code> 越大會在越前面<br><code>order</code> 越小會在越後面</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row-reverse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mid</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">order</span>: -<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="A62093D1-239A-403E-A44E-F3D0CE10B344.png" alt="display-flex"></p>
<blockquote>
<p><a class="link"   href="https://codepen.io/frank890417/pen/Ojjgaq?editors=0100" >HTML/CSS快速入門-flexbox排版入門<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://cythilya.github.io/2017/04/06/flexbox-advance/" >圖解 Flexbox 進階屬性 | Summer。桑莫。夏天<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>【Git】Git Branch</title>
    <url>/2020/07/03/Git/git-branch/</url>
    <content><![CDATA[<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><ul>
<li><p><code>git branch</code>  查看本地所有分支</p>
<ul>
<li><code>git branch -a</code>  查看所有分支 (包含遠端)</li>
</ul>
</li>
<li><p><code>git branch &lt;branch&gt;</code>  開新分支</p>
</li>
<li><p><code>git checkout &lt;branch&gt;</code>  切換分支</p>
</li>
<li><p><code>git branch -d &lt;branch&gt;</code>  刪除分支</p>
<ul>
<li><code>git branch -D &lt;branch&gt;</code>  強制刪除分支</li>
</ul>
</li>
</ul>
<blockquote>
<p>為了避免誤刪分支，若此分支尚未 <code>merge</code>到任一分支，此時使用 <code>git branch -d &lt;branch&gt;</code> 會出現以下錯誤 <code>error: The branch ‘for-practice&#39; is not fully merged.</code>，這時必須使用 <code>git branch -D &lt;branch&gt;</code> 來強制刪除分支</p>
</blockquote>
<ul>
<li><p><code>git checkout -b &lt;branch&gt;</code>  開新分支以及切換分支</p>
<ul>
<li><code>【git checkout -b feature】 = 【git branch feature】 + 【git checkout feature】</code></li>
</ul>
</li>
<li><p><code>git checkout origin/new_brnach -b new_branch</code>  建立 local new_branch 並與遠端連接</p>
</li>
<li><p><code>git branch &lt;new-branch-name&gt; &lt;commit ID&gt;</code>  回到某個 commit，並開一個新分支</p>
</li>
</ul>
<h3 id="刪除分支"><a href="#刪除分支" class="headerlink" title="刪除分支"></a>刪除分支</h3><p>刪除分支並不會刪掉 commit ，只是會被隱藏起來</p>
<p><code>git reflog</code> 顯示所有 log (包含隱藏的 log)</p>
<h3 id="合併分支"><a href="#合併分支" class="headerlink" title="合併分支"></a>合併分支</h3><p><code>git merge &lt;branch&gt;</code> :  站在這裡將其他 branch 拉進來</p>
<blockquote>
<p>合併後會自動多一個合併訊息</p>
</blockquote>
<h4 id="快轉-Fast-Forward-合併"><a href="#快轉-Fast-Forward-合併" class="headerlink" title="快轉(Fast-Forward)合併"></a>快轉(Fast-Forward)合併</h4><p>從 <code>master</code> 分出分支 <code>practice</code>，在 <code>practice</code> 提交了兩個版本 <code>C3``C4</code>，<br>而 <code>master</code> 在分出 <code>practice</code>後一直沒有提交新的版本，這時合併就</p>
<ol>
<li><strong>不會有 merge commit message</strong></li>
<li><strong>也不像之前合併一樣會有一個耳朵長出來合進去</strong></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Git checkout master</span><br><span class="line">Git merge practice</span><br></pre></td></tr></table></figure>

<h5 id="如果想要看到耳朵"><a href="#如果想要看到耳朵" class="headerlink" title="如果想要看到耳朵"></a>如果想要看到耳朵</h5><p><code>git merge —no-ff &lt;branch&gt;</code></p>
<h3 id="合併回復"><a href="#合併回復" class="headerlink" title="合併回復"></a>合併回復</h3><p><code>git reset —-hard ORIG_HEAD</code>  表示回到上一版</p>
<p><code>git reset —-hard [commit ID]</code>  表示回復到某個特定 commit</p>
<h3 id="git-reset-的三種模式"><a href="#git-reset-的三種模式" class="headerlink" title="git reset 的三種模式"></a>git reset 的三種模式</h3><p><code>—-hard</code>:</p>
<p>在這個模式下，不管是工作目錄以及暫存區的檔案都會丟掉。</p>
<p><code>—-mixed</code></p>
<p>—mixed 是預設的參數，如果沒有特別加參數，git reset 指令將會使用 –mixed 模式。這個模式會把暫存區的檔案丟掉(unstage)，但不會動到工作目錄的檔案，也就是說 Commit 拆出來的檔案會留在工作目錄，但不會留在暫存區。</p>
<p><code>—-soft</code>:</p>
<p>這個模式下的 reset，工作目錄跟暫存區的檔案都不會被丟掉，所以看起來就只有 HEAD 的移動而已。也因此，Commit 拆出來的檔案會直接放在暫存區。</p>
<p><img src="51AA4EE5-B6F6-48DE-B462-0941131622F8.png" alt="git-branch"></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>【Git】Git Log</title>
    <url>/2020/07/03/Git/git-log/</url>
    <content><![CDATA[<h2 id="Git-Log"><a href="#Git-Log" class="headerlink" title="Git Log"></a>Git Log</h2><ul>
<li><p><code>git log</code>  檢視 git 紀錄</p>
</li>
<li><p><code>git log —-oneline</code> 檢視 git 紀錄，不一樣的輸出格式</p>
</li>
<li><p><code>git log -p [commit id]</code>  查看特定 commit 內容</p>
</li>
<li><p><code>git reflog</code> 顯示所有 log (包含隱藏的 log)</p>
</li>
</ul>
<h3 id="想找一位叫做-Sherly-的作者的-Commit"><a href="#想找一位叫做-Sherly-的作者的-Commit" class="headerlink" title="想找一位叫做 Sherly 的作者的 Commit"></a>想找一位叫做 Sherly 的作者的 Commit</h3><p><code>git log --oneline --author=“Sherly&quot;</code></p>
<h3 id="想找-Sherly-and-Eddie-的-Commit"><a href="#想找-Sherly-and-Eddie-的-Commit" class="headerlink" title="想找 Sherly and Eddie 的 Commit"></a>想找 Sherly and Eddie 的 Commit</h3><p><code>git log -—oneline --author=“Sherly\|Eddie”</code></p>
<h3 id="想要找-Commit-訊息裡面有在罵髒話的"><a href="#想要找-Commit-訊息裡面有在罵髒話的" class="headerlink" title="想要找 Commit 訊息裡面有在罵髒話的"></a>想要找 Commit 訊息裡面有在罵髒話的</h3><p><code>git log —-oneline --grep=“WTF”</code></p>
<h3 id="想要找-Commit-的檔案內容有提到-“Ruby”-這個字"><a href="#想要找-Commit-的檔案內容有提到-“Ruby”-這個字" class="headerlink" title="想要找 Commit 的檔案內容有提到 “Ruby” 這個字"></a>想要找 Commit 的檔案內容有提到 “Ruby” 這個字</h3><p><code>git log -S “Ruby”</code></p>
<h3 id="想要找今天早上-9-點-到-12點之間的-Commit"><a href="#想要找今天早上-9-點-到-12點之間的-Commit" class="headerlink" title="想要找今天早上 9 點 到 12點之間的 Commit"></a>想要找今天早上 9 點 到 12點之間的 Commit</h3><p><code>git log —-oneline —-since=“9am” —-until=&quot;12am”</code></p>
<h3 id="想要找從-2017-年-1-月之後，每天早上-9-點-到-12點之間的-Commit"><a href="#想要找從-2017-年-1-月之後，每天早上-9-點-到-12點之間的-Commit" class="headerlink" title="想要找從 2017 年 1 月之後，每天早上 9 點 到 12點之間的 Commit"></a>想要找從 2017 年 1 月之後，每天早上 9 點 到 12點之間的 Commit</h3><p><code>git log --oneline --since=“9am” —-until=&quot;12am” —-after=“2017-01&quot;</code></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>【Git】Git Remote/ Git Push</title>
    <url>/2020/07/03/Git/git-push/</url>
    <content><![CDATA[<ul>
<li><p><code>git remote</code>  查詢遠端分支</p>
</li>
<li><p><code>git remote -v</code>  查詢遠端詳細位置</p>
</li>
<li><p><code>git push</code> 會提交到預設的儲存庫</p>
</li>
<li><p><code>git push origin master</code> 指定提交的地方</p>
</li>
</ul>
<blockquote>
<p><code>git push origin master</code> 其實等於  <code>git push origin master:master</code></p>
<p>意思就是要把本地的 master 分支推上去之後，在 Server 上建立 master 分支</p>
</blockquote>
<h2 id="刪除遠端分支"><a href="#刪除遠端分支" class="headerlink" title="刪除遠端分支"></a>刪除遠端分支</h2><ul>
<li><code>git push origin :&lt;branch&gt;</code></li>
</ul>
<blockquote>
<p>就像是推了空的內容去更新線上的 <branch> 分支的內容，也算是變相的把該分支刪除。</p>
</blockquote>
<h2 id="將本地與遠端儲存庫建立連結"><a href="#將本地與遠端儲存庫建立連結" class="headerlink" title="將本地與遠端儲存庫建立連結"></a>將本地與遠端儲存庫建立連結</h2><ul>
<li><code>git remote add origin https://github.com/[GitHub帳號]/[Repositories].git</code></li>
</ul>
<blockquote>
<p>這裡 origin 只是一個代名詞，可以自己設定自定義的名稱</p>
</blockquote>
<h3 id="例如你的遠端節點叫做-dragonball，而且你想把-cat-分支推上去："><a href="#例如你的遠端節點叫做-dragonball，而且你想把-cat-分支推上去：" class="headerlink" title="例如你的遠端節點叫做 dragonball，而且你想把 cat 分支推上去："></a>例如你的遠端節點叫做 <code>dragonball</code>，而且你想把 <code>cat</code> 分支推上去：</h3><p><code>git push dragonball cat</code></p>
<h2 id="將本地已存在的儲存庫-已有版控-，上傳至遠端儲存庫"><a href="#將本地已存在的儲存庫-已有版控-，上傳至遠端儲存庫" class="headerlink" title="將本地已存在的儲存庫(已有版控)，上傳至遠端儲存庫"></a>將本地已存在的儲存庫(已有版控)，上傳至遠端儲存庫</h2><ul>
<li><code>git push -u origin master</code></li>
</ul>
<ol>
<li>把 master 這個分支的內容，推向 origin 這個位置。</li>
<li>在 origin 那個遠端 Server 上，如果 master 不存在，就建立一個叫做 master 的同名分支。</li>
<li>但如果本來 Server 上就存在 master 分支，便會移動 Server 上 master 分支的位置，使它指到目前最新的進度上。</li>
</ol>
<blockquote>
<p><code>-u</code> 表示設定 <code>upstream</code>  有設定預設值的意思，下次執行 <code>git push</code> 時，他就會被當成預設值</p>
</blockquote>
<p>例如：</p>
<p><code>git push -u origin master</code>:</p>
<p>就會把 origin/master 設定為本地 master 分支的 upstream，當下回執行 <code>git push</code> 指令而不加任何參數的時候，它就會猜你是要推往 origin 這個遠端節點，並且把 master 這個分支推上去。</p>
<h3 id="反之，沒設定-upstream-的話，就必須在每次-Push-的時候都跟-Git-講清楚、說明白："><a href="#反之，沒設定-upstream-的話，就必須在每次-Push-的時候都跟-Git-講清楚、說明白：" class="headerlink" title="反之，沒設定 upstream 的話，就必須在每次 Push 的時候都跟 Git 講清楚、說明白："></a>反之，沒設定 upstream 的話，就必須在每次 Push 的時候都跟 Git 講清楚、說明白：</h3><p><code>git push origin master</code></p>
<p>否則，光就執行 git push 指令而不帶其它參數的話，Git 會跟你埋怨說不知道該 Push 什麼分支以及要 Push 去哪裡：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git push</span><br><span class="line">fatal: The current branch master has no upstream branch.</span><br><span class="line">To push the current branch and set the remote as upstream, use</span><br><span class="line"></span><br><span class="line">    git push —set-upstream origin master</span><br></pre></td></tr></table></figure>

<h3 id="若有建立其他分支或是標籤，在push時，請改成以下指令："><a href="#若有建立其他分支或是標籤，在push時，請改成以下指令：" class="headerlink" title="若有建立其他分支或是標籤，在push時，請改成以下指令："></a>若有建立其他分支或是標籤，在push時，請改成以下指令：</h3><ul>
<li><p><code>git push —all</code></p>
</li>
<li><p><code>git push --tags</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>【Git】Git terminal 指令</title>
    <url>/2020/07/03/Git/git-terminal/</url>
    <content><![CDATA[<h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><ul>
<li><p><code>git init</code>  初始化目錄</p>
</li>
<li><p><code>git status</code>  這個目錄的狀態</p>
</li>
<li><p><code>git log</code>  檢視 git 紀錄</p>
<ul>
<li><code>git log —-oneline</code> 檢視 git 紀錄，不一樣的輸出格式</li>
<li><code>git reflog</code> 顯示所有 log (包含隱藏的 log)</li>
</ul>
</li>
<li><p><code>git clone https://github.com/[GitHub帳號]/[遠端repo名稱].git</code>  下載專案</p>
</li>
</ul>
<h2 id="將檔案交給-Git"><a href="#將檔案交給-Git" class="headerlink" title="將檔案交給 Git"></a>將檔案交給 Git</h2><ul>
<li><code>git add &lt;file&gt;</code>  將檔案放入暫存區 (stage)</li>
</ul>
<h3 id="git-add-amp-git-add-all-不同"><a href="#git-add-amp-git-add-all-不同" class="headerlink" title="git add . &amp;  git add -all 不同"></a><code>git add .</code> &amp;  <code>git add -all</code> 不同</h3><p><code>git add .</code> 將所有變更檔案加入暫存區 (只限此目錄下以及子目錄)</p>
<p><code>git add -all</code> 將所有變更檔案加入暫存區 (不只包含當下目錄，真正的所有變更檔案)</p>
<p><img src="3D1BA4FB-0994-47D9-B838-2A9DAA3C38B8.png" alt="github"></p>
<p>這邊有修改過的兩隻檔案 <code>main.css</code> &amp; <code>index.html</code> ，如果在根目錄 <strong>git-practice</strong> 下分別下<br><code>git add .</code>  &amp; <code>git add -all</code>，<code>main.css</code> &amp; <code>index.html</code> 都會被加入暫存區。</p>
<p>但如果在 <code>git-practice/css</code> 目錄下分別下 <code>git add .</code>  &amp; <code>git add -all</code>的話，<br><code>git add .</code> 只會有 <code>main.css</code> 加入暫存，<code>git add -all</code> 則會有 <code>main.css</code> &amp; <code>index.html</code> 加入暫存。</p>
<h2 id="將檔案移出暫存區"><a href="#將檔案移出暫存區" class="headerlink" title="將檔案移出暫存區"></a>將檔案移出暫存區</h2><p><code>git reset HEAD &lt;file&gt;</code>  將檔案移出暫存區 (stage)</p>
<p><code>git rm —cached &lt;file&gt;</code>  將檔案移出暫存區 (stage)</p>
<p><code>git reset</code>  將全部檔案移出暫存區 (stage)</p>
<h2 id="將檔案放入儲存庫"><a href="#將檔案放入儲存庫" class="headerlink" title="將檔案放入儲存庫"></a>將檔案放入儲存庫</h2><p><code>git commit -m “&lt;commit message&gt;”</code>  將暫存區的東西放入儲存庫 (Repository)</p>
<blockquote>
<p>每個 commit 都會有一個唯一的 ID，SHA1碼，這是一個16進位值，共40字元</p>
</blockquote>
<h3 id="提交空白-commit"><a href="#提交空白-commit" class="headerlink" title="提交空白 commit"></a>提交空白 commit</h3><p><code>git commit —allow-empty-message</code> 將暫存區的東西放入儲存庫 (Repository)，可以提交空白的 <code>commit message</code></p>
<h3 id="如果暫存區沒有東西可以提交嗎？"><a href="#如果暫存區沒有東西可以提交嗎？" class="headerlink" title="如果暫存區沒有東西可以提交嗎？"></a>如果暫存區沒有東西可以提交嗎？</h3><p><code>git commit —allow-empty -m “empty&quot;</code></p>
<p>加上 <code>-allow-empty</code> 後，即使暫存區沒有東西，還是可以提交，不過用處不大，應該主要用來練習</p>
<h2 id="回到之前的版本"><a href="#回到之前的版本" class="headerlink" title="回到之前的版本"></a>回到之前的版本</h2><p><code>git reset —hard &lt;commit id&gt;</code>  commit id 就是 SHA1 碼，只需要打上前六碼就可以了</p>
<h2 id="比較差異"><a href="#比較差異" class="headerlink" title="比較差異"></a>比較差異</h2><p><code>git diff &lt;commit1 ID&gt; &lt;commit2 ID&gt;</code></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>【Git】用 Github 的 gh-pages 分支展示自己的項目(Vue-cli 3)</title>
    <url>/2019/06/15/Git/github-pages-vue-cli3/</url>
    <content><![CDATA[<h2 id="步驟："><a href="#步驟：" class="headerlink" title="步驟："></a>步驟：</h2><ol>
<li><p>建立一個檔案 <code>vue.config.js</code> ，此為 vue-cli 3 的配置設定檔</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// vue.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line"> baseUrl: ‘/my-first-project/’ </span><br><span class="line">// baseUrl 為 project-name，根目錄地址為上傳的網域</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>執行 <code>npm run build</code> 生成 <strong>dist</strong></p>
</li>
<li><p>將 <strong>dist</strong> 從 <strong>.gitignore</strong> 移除</p>
</li>
</ol>
<blockquote>
<p><a class="link"   href="https://cli.vuejs.org/config/#baseurl" >Vue-cli 3<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<ol start="4">
<li>執行 <code>git add dist</code> &amp;&amp; <code>git commit -m “Initial dist subtree commit”</code></li>
</ol>
<p>這段是將 <strong>dist</strong> 也加入 git 的儲存庫，並且 <strong>commit</strong></p>
<ol start="5">
<li><code>git subtree push –prefix dist origin gh-pages</code></li>
</ol>
<p>將 <strong>dist</strong> push 到 <strong>gh-pages</strong></p>
<h2 id="另一種方法："><a href="#另一種方法：" class="headerlink" title="另一種方法："></a>另一種方法：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git run build</span><br><span class="line">git branch gh-pages     //创建gh-pages分支</span><br><span class="line">git checkout gh-pages   //切换到gh-pages分支</span><br><span class="line">git add -f dist         //强制把dist文件夹提交到github</span><br><span class="line">$ git subtree push --prefix dist origin gh-pages    //把dist文件夹单独部署到 gh-pages 分支</span><br></pre></td></tr></table></figure>

<p>在真正的項目開發中，<strong>dist</strong> 文件夾最終是要放到服務器上，而不是 github 上，所以 <strong>.gitignore</strong> 內才會有 <strong>dist</strong></p>
<blockquote>
<p><a class="link"   href="https://medium.com/@Roli_Dori/deploy-vue-cli-3-project-to-github-pages-ebeda0705fbd" >Deploy vue-cli 3 project to github pages<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://juejin.im/post/5b276644e51d4558a3051b5e" >vue项目实现github在线预览效果<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
        <tag>github pages</tag>
      </tags>
  </entry>
  <entry>
    <title>【Git】在 Github Pages 建立靜態網站</title>
    <url>/2019/06/07/Git/github_pages/</url>
    <content><![CDATA[<h2 id="在Github上建立新專案"><a href="#在Github上建立新專案" class="headerlink" title="在Github上建立新專案"></a>在Github上建立新專案</h2><p><img src="0_m3H-dAF4fNlxaSIn.png" alt="Github Pages"></p>
<h2 id="按下setting-裡面找到-Github-Pages-的地方"><a href="#按下setting-裡面找到-Github-Pages-的地方" class="headerlink" title="按下setting 裡面找到 Github Pages 的地方"></a>按下setting 裡面找到 Github Pages 的地方</h2><p><img src="0_VgER8EhDdnxhnMt6.png" alt="Github Pages"></p>
<p><img src="0_rE8g-VsEo-aBZDT9.png" alt="Github Pages"></p>
<h2 id="點擊-Choose-a-theme"><a href="#點擊-Choose-a-theme" class="headerlink" title="點擊 Choose a theme"></a>點擊 Choose a theme</h2><p>這是讓你選擇模板，會先以這個模板架設網站</p>
<p><img src="0_e_SmxV5pTHbILYoT.png" alt="Github Pages"></p>
<h2 id="選好模板後，按下Select-theme"><a href="#選好模板後，按下Select-theme" class="headerlink" title="選好模板後，按下Select theme"></a>選好模板後，按下Select theme</h2><p>commit後，網站就發佈了，網址就在setting裡面可以看見</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github pages</tag>
      </tags>
  </entry>
  <entry>
    <title>【Git】Sourcetree + Bitbucket and Github 版本控制</title>
    <url>/2019/06/06/Git/sourcetree_with_bitbucket_and_github/</url>
    <content><![CDATA[<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol>
<li>生成金鑰</li>
<li>添加ssh金鑰</li>
<li>新增本地專案</li>
<li>本地專案與遠端串聯</li>
<li>推送至遠端</li>
</ol>
<h2 id="確認是否已經生成過金鑰"><a href="#確認是否已經生成過金鑰" class="headerlink" title="確認是否已經生成過金鑰"></a>確認是否已經生成過金鑰</h2><p>打開 <strong>terminal</strong> 輸入 <code>cd ~/.ssh</code> 在輸入 <code>ls</code></p>
<p><img src="0_ytShGhzQs3_sWor3.png" alt="Sourcetree + Bitbucket and Github 版本控制-image1"></p>
<p><strong>.pub</strong> 檔就是公開金鑰</p>
<p>若沒有 <strong>.ssh</strong>資料夾或是沒有 <strong>.pub檔</strong>就是沒有生成過金鑰</p>
<p>輸入 <code>ssh-keygen</code> 即可生成金鑰，重複上述流程確認下 <strong>.ssh</strong>資料夾內是否有 <strong>.pub</strong>檔</p>
<p>輸入 ssh-keygen 後，他會向你確認保存公開金鑰的位置(.ssh/id_rsa)，儘量不要更改，省得麻煩</p>
<p>之後會要求你輸入密碼，此密碼是在你要使用公開金鑰時，必須要輸入的密碼，若你不想有密碼可以不要輸入</p>
<h2 id="取出金鑰"><a href="#取出金鑰" class="headerlink" title="取出金鑰"></a>取出金鑰</h2><p>到 <strong>.ssh</strong> 的目錄下，輸入 <code>cat ~/.ssh/id_rsa.pub | pbcopy</code> ，便已經複製下來</p>
<p><img src="0_JGb_wBsr4LFtywxU.png" alt="Sourcetree + Bitbucket and Github 版本控制-image2"></p>
<h2 id="添加公鑰到Bitbucket"><a href="#添加公鑰到Bitbucket" class="headerlink" title="添加公鑰到Bitbucket"></a>添加公鑰到Bitbucket</h2><p>Bitbucket 的 ssh key 有 deployment key &amp; account key 的分別<br>deployment key 與 account key 是相同的，差別在添加的地方以及作用<br>deployment key 只有可以讀取的權限，account key 才有可以修改的權限<br>不可同時添加 deployment key &amp; account key<br>所以必須添加 account key ！！</p>
<h2 id="deployment-key"><a href="#deployment-key" class="headerlink" title="deployment key"></a>deployment key</h2><p>deployment key 添加在專案內 -&gt; setting -&gt; Access key -&gt; Add key</p>
<p><img src="0_LfdR7x09XI3wp0Hr.png" alt="Sourcetree + Bitbucket and Github 版本控制-image3"></p>
<p>將剛剛複製的公鑰(id_rsa.pub檔)貼在key的地方，label可以自由命名</p>
<p><img src="0_dICOpw6PLONezNOU.png" alt="Sourcetree + Bitbucket and Github 版本控制-image4"></p>
<p>添加完畢後</p>
<p><img src="0_yCKrWLNnPGMcVQ9w.png" alt="Sourcetree + Bitbucket and Github 版本控制-image5"></p>
<h2 id="account-key"><a href="#account-key" class="headerlink" title="account key"></a>account key</h2><p>account key 點左下角帳號頭像 -&gt; Bitbucket settings -&gt; setting -&gt; SSH keys -&gt; Add key</p>
<p><img src="0_gUCSiyvDDpv8GOMh.png" alt="Sourcetree + Bitbucket and Github 版本控制-image6"></p>
<p><img src="0_Q_gWrPCjV5gRQHSA.png" alt="Sourcetree + Bitbucket and Github 版本控制-image7"></p>
<h2 id="Sourcetree-登入-Bitbucket-以及-Github-帳號"><a href="#Sourcetree-登入-Bitbucket-以及-Github-帳號" class="headerlink" title="Sourcetree 登入 Bitbucket 以及 Github 帳號"></a>Sourcetree 登入 Bitbucket 以及 Github 帳號</h2><p><img src="0_GZQQG7w6St22N4kE.png" alt="Sourcetree + Bitbucket and Github 版本控制-image8"></p>
<p><img src="0_7JOAhBr7xp1MAxw6.png" alt="Sourcetree + Bitbucket and Github 版本控制-image9"></p>
<h2 id="按下-Connect-Account"><a href="#按下-Connect-Account" class="headerlink" title="按下 Connect Account"></a>按下 Connect Account</h2><p><img src="0_DpmduIDjsrh7LRZO.png" alt="Sourcetree + Bitbucket and Github 版本控制-image10"></p>
<h2 id="新增遠端專案"><a href="#新增遠端專案" class="headerlink" title="新增遠端專案"></a>新增遠端專案</h2><p><img src="0_qZFUVC_bih3o4vbe.png" alt="Sourcetree + Bitbucket and Github 版本控制-image11"></p>
<p><img src="0_jbJxuN5yvgfZ_Txj.png" alt="Sourcetree + Bitbucket and Github 版本控制-image12"></p>
<p><img src="0_ebkucr0KWmoi-xQz.png" alt="Sourcetree + Bitbucket and Github 版本控制-image13"></p>
<h2 id="新增本地專案"><a href="#新增本地專案" class="headerlink" title="新增本地專案"></a>新增本地專案</h2><p><img src="0_7iyb2ceObhwS_MgD.png" alt="Sourcetree + Bitbucket and Github 版本控制-image14"></p>
<p><img src="0_96Fc1iUmokw_H69K.png" alt="Sourcetree + Bitbucket and Github 版本控制-image15"></p>
<p><img src="0_AmJQyMBW--1UVaIa.png" alt="Sourcetree + Bitbucket and Github 版本控制-image16"></p>
<p><img src="0_p5RJ34uSd_3Yk9tg.png" alt="Sourcetree + Bitbucket and Github 版本控制-image17"></p>
<p>按下右下角的 commit ，便完成本地檔案的版控</p>
<p>接下來要將本地檔案推送到遠端</p>
<h2 id="本地專案與遠端連結"><a href="#本地專案與遠端連結" class="headerlink" title="本地專案與遠端連結"></a>本地專案與遠端連結</h2><p><img src="0_c815hucN0lc3Whdc.png" alt="Sourcetree + Bitbucket and Github 版本控制-image18"></p>
<p>如果沒有連結 Bitbucket 以及 Github 帳號，按下地球符號，是不會出現任何東西的</p>
<p><img src="0_lkpIOAHc9GHln7AB.png" alt="Sourcetree + Bitbucket and Github 版本控制-image19"></p>
<p>Remote name 可以隨意填，建議填與 Repositories 相同的名字</p>
<p>最後 push 到遠端便完成了</p>
<h2 id="推送到-Github-遠端"><a href="#推送到-Github-遠端" class="headerlink" title="推送到 Github 遠端"></a>推送到 Github 遠端</h2><h3 id="添加公鑰到Github"><a href="#添加公鑰到Github" class="headerlink" title="添加公鑰到Github"></a>添加公鑰到Github</h3><p><img src="0_-TVYedCiQ8kuvSJ-.png" alt="Sourcetree + Bitbucket and Github 版本控制-image20"></p>
<p><img src="0_rdlr-48CevQJDVG8.png" alt="Sourcetree + Bitbucket and Github 版本控制-image21"></p>
<p>生成公鑰 <code>ssh-keygen</code> 複製公鑰 <code>cat ~/.ssh/id_rsa.pub | pbcopy</code></p>
<h3 id="添加本地專案到Github遠端"><a href="#添加本地專案到Github遠端" class="headerlink" title="添加本地專案到Github遠端"></a>添加本地專案到Github遠端</h3><p><img src="0_HMQRG_LHNgmEE5Nt.png" alt="Sourcetree + Bitbucket and Github 版本控制-image22"></p>
<p><img src="0_FFEPSsTu7dCyhamJ.png" alt="Sourcetree + Bitbucket and Github 版本控制-image23"></p>
<p>account 要選擇 Github ， private repository 不要打勾<br>這邊會直接幫你在 Github 遠端建立一個新的 repository</p>
<p><img src="0_OLJ4x7I9xiMZoFIo.png" alt="Sourcetree + Bitbucket and Github 版本控制-image24"></p>
<p><img src="0_hW3IyFxmI4OqNYBr.png" alt="Sourcetree + Bitbucket and Github 版本控制-image25"></p>
<p>輸入完公鑰密碼後，便完成推送到 Github 遠端</p>
<h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><h2 id="ssh-key-amp-https-key-差別"><a href="#ssh-key-amp-https-key-差別" class="headerlink" title="ssh key &amp; https key 差別"></a>ssh key &amp; https key 差別</h2><p><strong>ssh key</strong> 可以幫你儲存公鑰密碼，在你每次修改檔案並推送到遠端時，不用輸入</p>
<p><strong>https key</strong> 不能儲存公鑰密碼，所以每次修改都要輸入密碼，比較麻煩，但比較安全，官方也是推薦使用https key</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
        <tag>sourcetree</tag>
        <tag>bitbucket</tag>
      </tags>
  </entry>
  <entry>
    <title>【HTTP】HTTP 協定</title>
    <url>/2019/06/28/Http/http/</url>
    <content><![CDATA[<h2 id="HTTP-Request"><a href="#HTTP-Request" class="headerlink" title="HTTP Request"></a>HTTP Request</h2><p><img src="0_sLSQTavgAyE-H5ve.jpeg" alt="http request"></p>
<p>一个HTTP请求由三个部分组成：</p>
<ul>
<li>start line;</li>
<li>http headers;</li>
<li>body</li>
</ul>
<h3 id="start-line"><a href="#start-line" class="headerlink" title="start line"></a>start line</h3><p>HTTP 的 start line 用于标识客户端想要服务器执行的某个动作，例如是 GET 某个数据，还是上传某个数据，其有三个要素组成：</p>
<p><code>HTTP Method | 空白 | URL | 空白 | 版本 | CRLF(換行)</code></p>
<h3 id="HTTP-Method"><a href="#HTTP-Method" class="headerlink" title="HTTP Method"></a>HTTP Method</h3><p>该 HTTP 请求所要执行的动作，主要有以下几类：</p>
<ul>
<li>GET(需要大写）： 从服务端获取指定的资源，可以是一个文档，一张图片，一个视频等</li>
<li>PUT：创建一个新的资源或者用新的数据取代目标资源</li>
<li>POST：提交某个资源，例如对已存在的资源进行注释；提交一个表单；发布消息到新闻组，邮件列表等；通过附加操作扩展一个数据库</li>
<li>DELETE：删除某个特定的资源</li>
<li>TRACE：用于发起一个远端的回环(loop-back)的消息请求</li>
<li>CONNECT：用于建立一个到服务端的网络隧道(tunnel)</li>
<li>HEAD：请求一个与GET命令请求相同的response,但是不包含消息主体(body)</li>
<li>OPTIONS：为目标资源描述会话的可选项，请求资源的URL, URL在不同的情况下可以是：绝对路径，通常后面会有一个 ? 以及一个查询字符串，一般与GET,POST，HEAD以及OPTIONS搭配使用</li>
</ul>
<p>例如以下：<br>POST / HTTP/1.1<br>GET /background.png HTTP/1.0<br>HEAD /test.html?query=alibaba HTTP/1.1<br>OPTIONS /anypage.html HTTP/1.0<br>GET <a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages" >http://developer.mozilla.org/en-US/docs/Web/HTTP/Messages<i class="fas fa-external-link-alt"></i></a> HTTP/1.1</p>
<h3 id="HTTP-版本号"><a href="#HTTP-版本号" class="headerlink" title="HTTP 版本号"></a>HTTP 版本号</h3><p>用于告知服务端接收请求响应时所期望的 HTTP 版本</p>
<h3 id="HTTP-Headers"><a href="#HTTP-Headers" class="headerlink" title="HTTP Headers"></a>HTTP Headers</h3><p>HTTP头用于客户端向服务端发送关于请求或者响应的额外信息，比如字符的编码方式，语言等，这些信息可以分成如下三个部分：</p>
<ul>
<li>一般性头信息(General Header): 对于请求与响应都适用;</li>
<li>请求头信息(Request Header): 关于HTTP请求的附加信息</li>
<li>实体头信息(Entity Header): 适用于请求主体(body)的附加信息</li>
</ul>
<p>HTTP Header and Request Body 中間會有個換行 CRLF (carriage return followed by line feed)</p>
<h3 id="Request-Body-資料主體"><a href="#Request-Body-資料主體" class="headerlink" title="Request Body(資料主體)"></a>Request Body(資料主體)</h3><p>通常情况下，HTTP请求不包主体，除非客户端有数据需要更新到服务器上，此时一般由HTTP头Content-Length,Content-Type来确定消息体的数据类型以及长度。<br>如果使用 GET 方法，資料主體就會是空白</p>
<h2 id="HTTP-Response"><a href="#HTTP-Response" class="headerlink" title="HTTP Response"></a>HTTP Response</h2><p><img src="0_0hCU5MOv5GbbfaoW.jpeg" alt="http response"></p>
<p>与HTTP请求相类似，HTTP响应也有三部分组成：</p>
<ul>
<li>Status line</li>
<li>Header</li>
<li>body</li>
</ul>
<h3 id="Status-line"><a href="#Status-line" class="headerlink" title="Status line"></a>Status line</h3><p>状态行主要包括HTTP协议版本、状态码以及状态码描述字符串组成。例如以下：</p>
<ul>
<li>HTTP/1.1 404 NOT FOUND</li>
</ul>
<h3 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h3><p>响应的头跟请求的头信息有相同的结构（可参考上节关于请求头信息的描述），也包含了三个类型的头信息</p>
<ul>
<li>General Headers：适用于整个消息</li>
<li>Response Headers：描述有关服务端的信息</li>
<li>Entity Headers：适用于消息主体部分</li>
</ul>
<h3 id="body"><a href="#body" class="headerlink" title="body"></a>body</h3><p>并不是所有的HTTP响应都有主体部分，像204，201状态码对应的响应就不需要。<br>最后一部分，我们来看下服务端响应客户端请求后返回的状态码以及具体的含义。</p>
<h3 id="status-code"><a href="#status-code" class="headerlink" title="status code"></a>status code</h3><p>HTTP的状态码是一个3位数表示，其作用是告知客户端如何解析服务端的响应，共有5种类型的状态码：</p>
<p>1xx: informational (訊息)<br>服务端告知客户端继续或者执行某个操作：</p>
<ul>
<li>100： continue, 表示客户端可以继续发送HTTP请求</li>
<li>101： switching protocols, 切换协议</li>
</ul>
<p>2xx: Successful (成功)<br>这类状态码用于告知客户端，服务端已经成功收到并处理了HTTP请求：</p>
<ul>
<li>200： OK, 请求成功</li>
<li>202： Accepted, 请求已经被接收到，但是尚未完成处理</li>
</ul>
<p>3xx: Redirection (重新導向)<br>重定向：需要用户的做进一步的操作，通常需要跳至一个不同的URL去获取资源</p>
<ul>
<li>301： moved permanently, 资源已经更换到一个新的URL</li>
<li>303: see other, 需要通过另外一个URL来获取资源</li>
</ul>
<p>4xx: Client error (用戶端錯誤)<br>服务端认为客户端出错时发送此状态码，如访问一个无效的资源或者请求有误：</p>
<ul>
<li>400： bad reqeust, 请求有误</li>
<li>401: unauthorized, 请求需要验证</li>
<li>403： forbidden, 服务器拒绝访问资源</li>
<li>404: Not found, 请求的资源不存在</li>
</ul>
<p>5xx: Server error (伺服器錯誤)<br>此类状态码表示服务器处理请求时出现了错误：</p>
<ul>
<li>500： internal server error, 服务器自身出错</li>
<li>501： not implemented, 服务器尚未实现该请求</li>
<li>503： service unavailable, 服务不用，如服务故障或者过载</li>
</ul>
<blockquote>
<p><a class="link"   href="https://notfalse.net/39/http-message-format#crlf" >HTTP 訊息格式<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>Http</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>【HTTP】Lidemy Http challenge</title>
    <url>/2019/06/30/Http/lidemy-http-challenge/</url>
    <content><![CDATA[<h2 id="先附上作者部落格說明以及遊戲連結"><a href="#先附上作者部落格說明以及遊戲連結" class="headerlink" title="先附上作者部落格說明以及遊戲連結"></a>先附上作者部落格說明以及遊戲連結</h2><p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/start" >HTTP Challenge<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://github.com/aszx87410/blog/issues/42" >作者 Huli blog<i class="fas fa-external-link-alt"></i></a></p>
<p>如果還沒玩過的話，建議先玩，避免破壞體驗，真的想不到答案再來看看解法吧！</p>
<h2 id="初始畫面"><a href="#初始畫面" class="headerlink" title="初始畫面"></a>初始畫面</h2><p><img src="1_Uff1xpwLXd7p9B61sPZ62A.png" alt="image1"></p>
<p>簡單的遊戲敘述，只有文字</p>
<p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/start" >https://lidemy-http-challenge.herokuapp.com/start<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="第一關"><a href="#第一關" class="headerlink" title="第一關"></a>第一關</h2><p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/lv1?token=%7BGOGOGO%7D" >https://lidemy-http-challenge.herokuapp.com/lv1?token={GOGOGO}<i class="fas fa-external-link-alt"></i></a></p>
<p>這邊要考驗的是對 GET 的用法，只要在網址後面帶上參數即可，如下</p>
<p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/lv1?token=%7BGOGOGO%7D&amp;name=neil%60" >https://lidemy-http-challenge.herokuapp.com/lv1?token={GOGOGO}&amp;name=neil`<i class="fas fa-external-link-alt"></i></a></p>
<p>這邊會拿到 API 的文件，要先記著之後會用到</p>
<p><a class="link"   href="https://gist.github.com/aszx87410/3873b3d9cbb28cb6fcbb85bf493b63ba" >API 文件<i class="fas fa-external-link-alt"></i></a></p>
<p>就可獲得第二關的 token</p>
<h2 id="第二關"><a href="#第二關" class="headerlink" title="第二關"></a>第二關</h2><p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/lv2?token=%7BHellOWOrld%7D" >https://lidemy-http-challenge.herokuapp.com/lv2?token={HellOWOrld}<i class="fas fa-external-link-alt"></i></a></p>
<p>這一關我是用猜的，就從54帶 id 帶到 56</p>
<p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/lv2?token=%7BHellOWOrld%7D&amp;id=56" >https://lidemy-http-challenge.herokuapp.com/lv2?token={HellOWOrld}&amp;id=56<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="第三關"><a href="#第三關" class="headerlink" title="第三關"></a>第三關</h2><p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/lv3?token=%7B5566NO1%7D" >https://lidemy-http-challenge.herokuapp.com/lv3?token={5566NO1}<i class="fas fa-external-link-alt"></i></a></p>
<p>這關我是使用 POSTMAN 通過的</p>
<p>查看 API 文件，使用 POST 方法，並傳入參數。</p>
<h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/api/books" >https://lidemy-http-challenge.herokuapp.com/api/books<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p>Content-Type : application/x-www-form-urlencoded</p>
<h3 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h3><p>格式 : x-www-form-urlencoded<br>ISBN : 9789863594475</p>
<p>便會回給你新增成功或是失敗的狀態信息，以及 id<br>拿到 id 後，同樣再將 id 帶到網址後傳出</p>
<p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/lv3?token=%7B5566NO1%7D&amp;id=1989" >https://lidemy-http-challenge.herokuapp.com/lv3?token={5566NO1}&amp;id=1989<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="第四關"><a href="#第四關" class="headerlink" title="第四關"></a>第四關</h2><p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/lv4?token=%7BLEarnHOWtoLeArn%7D" >https://lidemy-http-challenge.herokuapp.com/lv4?token={LEarnHOWtoLeArn}<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="查詢書籍"><a href="#查詢書籍" class="headerlink" title="查詢書籍"></a>查詢書籍</h3><p>GET</p>
<p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/api/books?q=%E4%B8%96%E7%95%8C" >https://lidemy-http-challenge.herokuapp.com/api/books?q=世界<i class="fas fa-external-link-alt"></i></a></p>
<p>就可以找到作者是 村上春樹 寫的是哪本書</p>
<p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/lv4?token=%7BLEarnHOWtoLeArn%7D&amp;id=79" >https://lidemy-http-challenge.herokuapp.com/lv4?token={LEarnHOWtoLeArn}&amp;id=79<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="第五關"><a href="#第五關" class="headerlink" title="第五關"></a>第五關</h2><p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/lv5?token=%7BHarukiMurakami%7D" >https://lidemy-http-challenge.herokuapp.com/lv5?token={HarukiMurakami}<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="刪除書籍"><a href="#刪除書籍" class="headerlink" title="刪除書籍"></a>刪除書籍</h3><p>DELETE</p>
<p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/api/books/23" >https://lidemy-http-challenge.herokuapp.com/api/books/23<i class="fas fa-external-link-alt"></i></a></p>
<p>這沒什麼只是使用 DELETE 方法而已</p>
<h2 id="第六關"><a href="#第六關" class="headerlink" title="第六關"></a>第六關</h2><p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/lv6?token=%7BCHICKENCUTLET%7D" >https://lidemy-http-challenge.herokuapp.com/lv6?token={CHICKENCUTLET}<i class="fas fa-external-link-alt"></i></a></p>
<p>獲得新的 <a class="link"   href="https://gist.github.com/aszx87410/1e5e5105c1c35197f55c485a88b0328a" >API 文件<i class="fas fa-external-link-alt"></i></a></p>
<p>這邊開始會檢查權限，不是任何人拿到 API 文件，想做什麼就可以的。</p>
<p>GET</p>
<p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/api/v2/me" >https://lidemy-http-challenge.herokuapp.com/api/v2/me<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Authorization"><a href="#Authorization" class="headerlink" title="Authorization"></a>Authorization</h3><p>Type : Basic Auth</p>
<p>輸入帳號密碼</p>
<p>帳號：admin<br>密碼：admin123</p>
<p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/lv6?token=%7BCHICKENCUTLET%7D&amp;email=lib@lidemy.com" >https://lidemy-http-challenge.herokuapp.com/lv6?token={CHICKENCUTLET}&amp;email=lib@lidemy.com<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="第七關"><a href="#第七關" class="headerlink" title="第七關"></a>第七關</h2><p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/lv7?token=%7BSECurityIsImPORTant%7D" >https://lidemy-http-challenge.herokuapp.com/lv7?token={SECurityIsImPORTant}<i class="fas fa-external-link-alt"></i></a></p>
<p>DELETE</p>
<p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/api/v2/books/89" >https://lidemy-http-challenge.herokuapp.com/api/v2/books/89<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="第八關"><a href="#第八關" class="headerlink" title="第八關"></a>第八關</h2><p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/lv8?token=%7BHsifnAerok%7D" >https://lidemy-http-challenge.herokuapp.com/lv8?token={HsifnAerok}<i class="fas fa-external-link-alt"></i></a></p>
<p>GET</p>
<p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/api/v2/books?q=%E6%88%91" >https://lidemy-http-challenge.herokuapp.com/api/v2/books?q=我<i class="fas fa-external-link-alt"></i></a></p>
<p>之後找到作者四個字，ISBN 最後一個數字為 7 的只有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;id&quot;:72,&quot;name&quot;:&quot;日日好日：茶道教我的幸福15味【電影書腰版】&quot;,&quot;author&quot;:&quot;森下典子&quot;,&quot;ISBN&quot;:&quot;9981835427&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>PATCH</p>
<p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/api/v2/books/72" >https://lidemy-http-challenge.herokuapp.com/api/v2/books/72<i class="fas fa-external-link-alt"></i></a></p>
<p>authorization, header 同之前</p>
<p>Body</p>
<p>name : 日日好日：茶道教我的幸福15味【電影書腰版】<br>ISBN : 9981835423</p>
<h2 id="第九關"><a href="#第九關" class="headerlink" title="第九關"></a>第九關</h2><p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/lv9?token=%7BNeuN%7D" >https://lidemy-http-challenge.herokuapp.com/lv9?token={NeuN}<i class="fas fa-external-link-alt"></i></a></p>
<p>這邊告訴我們其實送出去的資訊可以讓我們偽裝是其他瀏覽器送出的 request</p>
<p>GET</p>
<p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/api/v2/sys_info" >https://lidemy-http-challenge.herokuapp.com/api/v2/sys_info<i class="fas fa-external-link-alt"></i></a></p>
<p>header</p>
<p>X-Library-Number : 20<br>User-Agent : Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)</p>
<p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/lv9?token=%7BNeuN%7D&amp;version=1A4938Jl7" >https://lidemy-http-challenge.herokuapp.com/lv9?token={NeuN}&amp;version=1A4938Jl7<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="第十關"><a href="#第十關" class="headerlink" title="第十關"></a>第十關</h2><p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/lv10?token=%7BduZDsG3tvoA%7D" >https://lidemy-http-challenge.herokuapp.com/lv10?token={duZDsG3tvoA}<i class="fas fa-external-link-alt"></i></a></p>
<p>這關是終極密碼的遊戲，參數帶在網址後傳出即可</p>
<p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/lv10?token=%7BduZDsG3tvoA%7D&amp;num=9613" >https://lidemy-http-challenge.herokuapp.com/lv10?token={duZDsG3tvoA}&amp;num=9613<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="第十一關"><a href="#第十一關" class="headerlink" title="第十一關"></a>第十一關</h2><p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/lv11?token=%7BIhateCORS%7D" >https://lidemy-http-challenge.herokuapp.com/lv11?token={IhateCORS}<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://gist.github.com/aszx87410/0b0d3cabf32c4e44084fadf5180d0cf4" >新的 API 文件<i class="fas fa-external-link-alt"></i></a></p>
<p>GET</p>
<p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/api/v3/hello" >https://lidemy-http-challenge.herokuapp.com/api/v3/hello<i class="fas fa-external-link-alt"></i></a></p>
<p>一開始打招呼的時候，會回給我們以下訊息</p>
<p><code>您的 origin 不被允許存取此資源，請確認您是從 lidemy.com 送出 request。</code></p>
<p>這邊其實就有提示，要從 lidemy.com</p>
<p>但其實我一開始並不知道 request 的位置也可以設定，只是猜想瀏覽器可以設定該不會來源也可以設定吧，就找到答案了。</p>
<p>Header</p>
<p>Origin : lidemy.com</p>
<h2 id="第十二關"><a href="#第十二關" class="headerlink" title="第十二關"></a>第十二關</h2><p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/lv12?token=%7Br3d1r3c7%7D" >https://lidemy-http-challenge.herokuapp.com/lv12?token={r3d1r3c7}<i class="fas fa-external-link-alt"></i></a></p>
<p>GET</p>
<p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/api/v3/deliver_token" >https://lidemy-http-challenge.herokuapp.com/api/v3/deliver_token<i class="fas fa-external-link-alt"></i></a></p>
<p>會被轉址到</p>
<p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/api/v3/deliver_token_result" >https://lidemy-http-challenge.herokuapp.com/api/v3/deliver_token_result<i class="fas fa-external-link-alt"></i></a></p>
<p>這時會有訊息告訴我們，token 已經給我們<br>這邊我沒有使用 POSTMAN，因為不知道哪裡可以看到類似瀏覽器查看 requset 的傳遞。<br>我第一步先是查看 console.log 的部分，發現沒有訊息<br>再從 Network 裡面去看<br>不過這部分有卡了一下是因為，一開始輸入網址並沒有打開開發者模式，導致沒有資訊在 network 裡面，然後重新整理 只會出現兩個 request：</p>
<ul>
<li>deliver_token_result</li>
<li>inject.js</li>
</ul>
<p>後來才發現，網址已經從 A -&gt; C -&gt; B，已經到了 B，我一直重新整理 B 的網址是沒有用的。</p>
<p>所以再次打開 A 的網址：</p>
<p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/api/v3/deliver_token" >https://lidemy-http-challenge.herokuapp.com/api/v3/deliver_token<i class="fas fa-external-link-alt"></i></a><br>這次有記得先打開開發者模式，就出現了四個 request：</p>
<ul>
<li>deliver_token</li>
<li>stopover</li>
<li>deliver_token_result</li>
<li>inject.js</li>
</ul>
<p>C 就是 stopover ，在其中 header 的地方就可以找到第十三關的 token</p>
<h2 id="第十三關"><a href="#第十三關" class="headerlink" title="第十三關"></a>第十三關</h2><p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/lv13?token=%7Bqspyz%7D" >https://lidemy-http-challenge.herokuapp.com/lv13?token={qspyz}<i class="fas fa-external-link-alt"></i></a></p>
<p>回傳：</p>
<p><code>此 request 不是來自菲律賓，禁止存取系統資訊。</code></p>
<p>這邊也給我們一些資訊，要我們假裝在菲律賓！<br>但因為不知道該下什麼關鍵字，所以也查看了 hint。</p>
<h3 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h3><p>可以假裝自己是從哪邊來的 request<br>我是使用 postman，所以設定 proxy 如下：</p>
<p><img src="1_JlCjwUnSTJKA_sYHmf04eQ.png" alt="postman_proxy"></p>
<p>原本的設定應該是 Use System Proxy<br>上面自定義設定中的 Proxy Server 是自己去查菲律賓的代理伺服器</p>
<p><a class="link"   href="http://free-proxy.cz/zh/proxylist/country/PH/all/ping/all" >菲律賓代理伺服器<i class="fas fa-external-link-alt"></i></a></p>
<p>再次發送 request 就可以拿到下一關的 token</p>
<h2 id="第十四關"><a href="#第十四關" class="headerlink" title="第十四關"></a>第十四關</h2><p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/lv14?token=%7BSEOisHard%7D" >https://lidemy-http-challenge.herokuapp.com/lv14?token={SEOisHard}<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">跟那邊的溝通差不多都搞定了，真是太謝謝你了，關於這方面沒什麼問題了！</span><br><span class="line">不過我老大昨天給了我一個任務，他希望我去研究那邊的首頁內容到底是怎麼做的</span><br><span class="line">為什麼用 Google 一搜尋關鍵字就可以排在第一頁，真是太不合理了</span><br><span class="line"></span><br><span class="line">他們的網站明明就什麼都沒有，怎麼會排在那麼前面？</span><br><span class="line">難道說他們偷偷動了一些手腳？讓 Google 搜尋引擎看到的內容跟我們看到的不一樣？</span><br><span class="line"></span><br><span class="line">算了，還是不要瞎猜好了，你幫我們研究一下吧！</span><br></pre></td></tr></table></figure>

<p>看到這些敘述，毫無頭緒，果斷 hint XD</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">伺服器是怎麼辨識是不是 Google 搜尋引擎的？仔細想想之前我們怎麼偽裝自己是 IE6 的</span><br></pre></td></tr></table></figure>

<p>啊！原來是要我們偽裝 google<br>在 header 加上<br>User-Agnet : Mozilla/5.0 (compatible; Googlebot/2.1; +<a class="link"   href="http://www.google.com/bot.html" >http://www.google.com/bot.html<i class="fas fa-external-link-alt"></i></a>)<br>這邊也讓我知道原來可以根據不同瀏覽器顯示不同內容</p>
<h2 id="第十五關"><a href="#第十五關" class="headerlink" title="第十五關"></a>第十五關</h2><p><a class="link"   href="https://lidemy-http-challenge.herokuapp.com/lv15?token=%7BILOVELIdemy!!!%7D" >https://lidemy-http-challenge.herokuapp.com/lv15?token={ILOVELIdemy!!!}<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>通關啦！很感謝 Huli 大大做了這個遊戲，用故事串連整個遊戲，真的很有趣，作者說不定也有說故事的天份。<br>每個關卡做起來很簡單，但如果你不知道該用什麼解法，你可能想破頭也不知道怎麼辦，這個遊戲讓我知道很多新的名詞。</p>
]]></content>
      <categories>
        <category>Http</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Adding Up Times With Reduces</title>
    <url>/2019/05/25/JS30/JS30-adding-up-times-with-reduces/</url>
    <content><![CDATA[<h1 id="Adding-Up-Times-with-Reduce"><a href="#Adding-Up-Times-with-Reduce" class="headerlink" title="Adding Up Times with Reduce"></a>Adding Up Times with Reduce</h1><h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>利用<code>map()</code>與<code>reduce()</code>來取得播放清單的總秒數。</p>
<p><a href="https://des86532.github.io/javascript-30/18_Adding-Up-Times-with-Reduce/index.html">Adding Up Times with Reduce</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/18_Adding-Up-Times-with-Reduce" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-取得全部的時間值"><a href="#Step1-取得全部的時間值" class="headerlink" title="Step1. 取得全部的時間值"></a>Step1. 取得全部的時間值</h3><p>在HTML中，時間資訊放在<code>&lt;li data-time&gt;</code>中，<br>所以透過querySelectorAll來取得，<br>因為接著會使用map及reduce操作，<br>資料型態必須先轉為Array。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 透過Array.from或是[...]來將querySelectorAll取回的NodeList轉Array</span><br><span class="line">const timeNodes = Array.from(document.querySelectorAll(&#x27;[data-time&#x27;));</span><br><span class="line">const timeNodes = [...document.querySelectorAll(&#x27;[data-time]&#x27;)]</span><br></pre></td></tr></table></figure>

<h3 id="Step2-將取回的資料轉為秒數並加總"><a href="#Step2-將取回的資料轉為秒數並加總" class="headerlink" title="Step2. 將取回的資料轉為秒數並加總"></a>Step2. 將取回的資料轉為秒數並加總</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const seconds = timeNodes</span><br><span class="line">      // 取出每個元素中的data-time資料</span><br><span class="line">      .map(node =&gt; node.dataset.time)</span><br><span class="line">      .map(timeCode =&gt; &#123;</span><br><span class="line">        // 用解構賦值的方式分別取出split(&#x27;:&#x27;)後的分與秒</span><br><span class="line">        // 再透過一個map執行parseFloat將字串轉數值</span><br><span class="line">        const [mins, secs] = timeCode.split(&#x27;:&#x27;).map(parseFloat);</span><br><span class="line">        // 回傳這組資料轉換後的總秒數</span><br><span class="line">        return (mins * 60) + secs;</span><br><span class="line">      &#125;)</span><br><span class="line">      // 用reduce來加總每次執行結果</span><br><span class="line">      .reduce((total, seconds) =&gt; total + seconds);</span><br></pre></td></tr></table></figure>

<h3 id="Step3-把總秒數轉為時分秒格式"><a href="#Step3-把總秒數轉為時分秒格式" class="headerlink" title="Step3. 把總秒數轉為時分秒格式"></a>Step3. 把總秒數轉為時分秒格式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 利用取得的總秒數來進行總共時分秒的計算</span><br><span class="line">// 使用Math.floor取整數，再利用%來操作餘數</span><br><span class="line">  const hours = Math.floor(seconds/3600)</span><br><span class="line">  const min = Math.floor((seconds % 3600)/60)</span><br><span class="line">  const sec = (seconds % 3600) % 60</span><br></pre></td></tr></table></figure>

<h3 id="Step4-印出結果"><a href="#Step4-印出結果" class="headerlink" title="Step4. 印出結果"></a>Step4. 印出結果</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(hours,min,sec)</span><br></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>這篇也算是之前學習的再次運用，<br>比較特別的是發現map中可以直接使用function！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const [mins, secs] = timeCode.split(&#x27;:&#x27;).map(parseFloat);</span><br><span class="line">//等同於</span><br><span class="line">const [mins, secs] = timeCode.split(&#x27;:&#x27;).map(function(str)&#123;</span><br><span class="line">    return parseFloat(str);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Click and Drag</title>
    <url>/2019/06/02/JS30/JS30-click-and-drag/</url>
    <content><![CDATA[<h1 id="27-—-Click-and-Drag"><a href="#27-—-Click-and-Drag" class="headerlink" title="27 — Click and Drag"></a>27 — Click and Drag</h1><p><img src="0_19R8igN58qpwOwRK.png" alt="Click and Drag"></p>
<h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>製作一個可拖曳移動的水平捲軸。</p>
<p><a href="https://des86532.github.io/javascript-30/27_Click-and-Drag/index.html">Click and Drag</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/27_Click-and-Drag" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-取得頁面元素與設定初始變數"><a href="#Step1-取得頁面元素與設定初始變數" class="headerlink" title="Step1. 取得頁面元素與設定初始變數"></a>Step1. 取得頁面元素與設定初始變數</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const slider = document.querySelector(&#x27;.items&#x27;);</span><br><span class="line">let isDown = false;</span><br><span class="line">let startX;</span><br><span class="line">let scrollLeft;</span><br><span class="line">//這邊是我的寫法</span><br><span class="line">    const items = document.querySelector(&#x27;.items&#x27;)</span><br><span class="line">    let isdown = false;</span><br><span class="line">    let startX;</span><br><span class="line">    let startscrollleft;</span><br></pre></td></tr></table></figure>

<h3 id="Step2-建立基本事件框架"><a href="#Step2-建立基本事件框架" class="headerlink" title="Step2. 建立基本事件框架"></a>Step2. 建立基本事件框架</h3><p>因為這次練習主要是在拖曳的動作，<br>所以對會用到的mouse event事件先建立監聽框框出來：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/** 滑鼠按鍵按下 **/</span><br><span class="line">slider.addEventListener(&#x27;mousedown&#x27;, () =&gt; &#123;</span><br><span class="line">&#125;);</span><br><span class="line">/** 滑鼠滑出範圍**/</span><br><span class="line">slider.addEventListener(&#x27;mouseleave&#x27;, () =&gt; &#123;</span><br><span class="line">&#125;);</span><br><span class="line">/** 滑鼠按鍵放開 **/</span><br><span class="line">slider.addEventListener(&#x27;mouseup&#x27;, () =&gt; &#123;</span><br><span class="line">&#125;);</span><br><span class="line">/** 滑鼠移動 **/</span><br><span class="line">slider.addEventListener(&#x27;mousemove&#x27;, () =&gt; &#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Step3-滑鼠按下事件"><a href="#Step3-滑鼠按下事件" class="headerlink" title="Step3. 滑鼠按下事件"></a>Step3. 滑鼠按下事件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slider.addEventListener(&#x27;mousedown&#x27;, (e) =&gt; &#123;</span><br><span class="line">  // 給予按下的flag</span><br><span class="line">  isDown = true;</span><br><span class="line">  // 加上抓取效果樣式</span><br><span class="line">  slider.classList.add(&#x27;active&#x27;);</span><br><span class="line">  // 設定移動的初始值為目前頁面距離-當前item左邊距</span><br><span class="line">  startX = e.pageX - slider.offsetLeft;</span><br><span class="line">  // 設定目前捲軸的左距</span><br><span class="line">  scrollLeft = slider.scrollLeft;</span><br><span class="line">&#125;);</span><br><span class="line">//這邊是我的寫法</span><br><span class="line">items.addEventListener(&#x27;mousedown&#x27;,(e) =&gt; &#123;</span><br><span class="line">    isdown = true</span><br><span class="line">    items.classList.add(&#x27;active&#x27;)</span><br><span class="line">    //設定startX為一開始點擊的位置</span><br><span class="line">    startX = e.clientX</span><br><span class="line">    //startscrollleft</span><br><span class="line">    //為一開始畫面捲動的距離,若左邊已經沒有可以捲動的距離，此時</span><br><span class="line">    //startscrollleft應該為 0</span><br><span class="line">    startscrollleft = items.scrollLeft;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="Step4-滑鼠移出事件"><a href="#Step4-滑鼠移出事件" class="headerlink" title="Step4. 滑鼠移出事件"></a>Step4. 滑鼠移出事件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slider.addEventListener(&#x27;mouseleave&#x27;, () =&gt; &#123;</span><br><span class="line">  // 將按下的flag與樣式移除</span><br><span class="line">  isDown = false;</span><br><span class="line">  slider.classList.remove(&#x27;active&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">//這邊是我的寫法</span><br><span class="line">items.addEventListener(&#x27;mouseleave&#x27;,() =&gt; &#123;</span><br><span class="line">    items.classList.remove(&#x27;active&#x27;)</span><br><span class="line">    isdown = false</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="Step5-滑鼠按鍵放開事件"><a href="#Step5-滑鼠按鍵放開事件" class="headerlink" title="Step5. 滑鼠按鍵放開事件"></a>Step5. 滑鼠按鍵放開事件</h3><p>與Step4一樣，主要是取消樣式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slider.addEventListener(&#x27;mouseup&#x27;, () =&gt; &#123;</span><br><span class="line">  // 將按下的flag與樣式移除</span><br><span class="line">  isDown = false;</span><br><span class="line">  slider.classList.remove(&#x27;active&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">//這邊是我的寫法</span><br><span class="line">items.addEventListener(&#x27;mouseup&#x27;,() =&gt; &#123;</span><br><span class="line">    items.classList.remove(&#x27;active&#x27;)</span><br><span class="line">    isdown = false</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="Step6-滑鼠移動事件"><a href="#Step6-滑鼠移動事件" class="headerlink" title="Step6. 滑鼠移動事件"></a>Step6. 滑鼠移動事件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slider.addEventListener(&#x27;mousemove&#x27;, (e) =&gt; &#123;</span><br><span class="line">  // 若移動時的狀態非按下，不動作</span><br><span class="line">  if (!isDown) return;</span><br><span class="line">  // 避免觸發其他預設事件（按下且移動預設是選取範圍）</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  // 設定X（當前定位）為目前頁面距離-當前item左邊距</span><br><span class="line">  const x = e.pageX - slider.offsetLeft;</span><br><span class="line">  // 設定移動距離為 X-初始值</span><br><span class="line">  const walk = x - startX;</span><br><span class="line">  // 設定水平捲軸的偏移量</span><br><span class="line">  slider.scrollLeft = scrollLeft - walk;</span><br><span class="line">&#125;);</span><br><span class="line">//這邊是我的寫法</span><br><span class="line">items.addEventListener(&#x27;mousemove&#x27;,(e) =&gt; &#123;</span><br><span class="line">    if(!isdown) return;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    //畫面目前的位置，scrollLeft是個絕對位置，</span><br><span class="line">    //startscrollleft 一開始點擊時捲動的絕對位置</span><br><span class="line">    //startX 畫面上的初始相對位置</span><br><span class="line">    //e.clientX 畫面上的相對位置</span><br><span class="line">    //startX - e.client = 捲動的距離</span><br><span class="line">    items.scrollLeft = startscrollleft - e.clientX + startX</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>如果有仔細看，會發現當拖曳左右移動時，<br>HTML中的卡片會有3D移動的效果感很褲，這是CSS的<code>rotateY</code>效果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 用scaleX與rotateY搭配使移動時有3D效果 */</span><br><span class="line">.item:nth-child(even) &#123; transform: scaleX(1.31) rotateY(40deg); &#125;</span><br><span class="line">.item:nth-child(odd) &#123; transform: scaleX(1.31) rotateY(-40deg); &#125;</span><br></pre></td></tr></table></figure>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/rotateY" >MDN-rotateY<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】CSS Clock</title>
    <url>/2019/05/12/JS30/JS30-clock/</url>
    <content><![CDATA[<h1 id="02-—-Clock"><a href="#02-—-Clock" class="headerlink" title="02 — Clock"></a>02 — Clock</h1><p><img src="0_dD6RkQlAXD35bd7-.png" alt="clock-demoImage"></p>
<h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>畫面呈現一個時鐘</p>
<p><a href="https://des86532.github.io/javascript-30/02_JS-and-CSS-Clock/index.html">Clock</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/02_JS-and-CSS-Clock" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-新增變數"><a href="#Step1-新增變數" class="headerlink" title="Step1. 新增變數"></a>Step1. 新增變數</h3><p>先各自抓到秒針時針分針的CSS</p>
<h3 id="Step2-建立function"><a href="#Step2-建立function" class="headerlink" title="Step2. 建立function"></a>Step2. 建立function</h3><ol>
<li>一個變數用來儲存現在的時間</li>
<li>三個變數分別儲存現在時間的秒、分、時</li>
<li>三個變數分別儲存秒的角度、分的角度、時的角度</li>
<li>根據各自的角度變化</li>
</ol>
<h3 id="Step3-新增setInterval"><a href="#Step3-新增setInterval" class="headerlink" title="Step3. 新增setInterval"></a>Step3. 新增setInterval</h3><p><code>setInterval(function, milliseconds, param1, param2, …)</code> 這邊用每秒更新一次</p>
<h3 id="Step4-呼叫function"><a href="#Step4-呼叫function" class="headerlink" title="Step4. 呼叫function"></a>Step4. 呼叫function</h3><h2 id="JavaScript語法-amp-備註"><a href="#JavaScript語法-amp-備註" class="headerlink" title="JavaScript語法&amp;備註"></a>JavaScript語法&amp;備註</h2><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS:"></a>CSS:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;clock&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;clock-face&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;hand hour-hand&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;hand min-hand&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;hand second-hand&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>要設定 second-hand 的 CSS，也只需要在 style 標籤下<code>.second-hand&#123;&#125;</code>就可以</p>
]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Countdown Timer</title>
    <url>/2019/06/04/JS30/JS30-countdown-timer/</url>
    <content><![CDATA[<h1 id="29-—-Countdown-Timer"><a href="#29-—-Countdown-Timer" class="headerlink" title="29 — Countdown Timer"></a>29 — Countdown Timer</h1><h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>製作一個倒數計時器。</p>
<p><a href="https://des86532.github.io/javascript-30/29_Countdown_Timer/index.html">Countdown Timer</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/29_Countdown_Timer" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-取得頁面元素並替預設"><a href="#Step1-取得頁面元素並替預設" class="headerlink" title="Step1. 取得頁面元素並替預設"></a>Step1. 取得頁面元素並替預設</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const timerDisplay = document.querySelector(&#x27;.display__time-left&#x27;);</span><br><span class="line">const endTime = document.querySelector(&#x27;.display__end-time&#x27;);</span><br><span class="line">const buttons = document.querySelectorAll(&#x27;[data-time]&#x27;);</span><br></pre></td></tr></table></figure>
<h3 id="Step2-設定計時器"><a href="#Step2-設定計時器" class="headerlink" title="Step2. 設定計時器"></a>Step2. 設定計時器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 外層變數，供計時器主體使用</span><br><span class="line">let countdown; </span><br><span class="line">/** 計時器 **/</span><br><span class="line">function timer(seconds) &#123;</span><br><span class="line">  // 新的計時器被啟動時，先把原本的setInterval清除</span><br><span class="line">  clearInterval(countdown);</span><br><span class="line">  // 取得時間</span><br><span class="line">  const now = Date.now();</span><br><span class="line">  // 現在時間 + 倒數計時的時間</span><br><span class="line">  const timeStamp = now + seconds * 1000;</span><br><span class="line">  // 倒數計時與結束的時間顯示function</span><br><span class="line">  displayTimeLeft(seconds);</span><br><span class="line">  displayEndTime(timeStamp);</span><br><span class="line">  // 計時器執行在countdown裡面方便接著清除使用</span><br><span class="line">  countdown = setInterval(() =&gt; &#123;</span><br><span class="line">    // 取得要跑的總時長</span><br><span class="line">    const secondsLeft = Math.round((timeStamp - Date.now()) / 1000);</span><br><span class="line">    // 如果時間已經小於零，結束這個Interval</span><br><span class="line">    if(secondsLeft &lt; 0) &#123;</span><br><span class="line">      clearInterval(countdown);</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line">    // 更新時間</span><br><span class="line">    displayTimeLeft(secondsLeft);</span><br><span class="line">  &#125;, 1000);</span><br><span class="line">&#125;</span><br><span class="line">// 顯示倒數時間</span><br><span class="line">function displayTimeLeft(seconds) &#123;</span><br><span class="line">  // 透過Math.floor來取得分鐘數(傳入秒數/60取得最大整數)</span><br><span class="line">  const minutes = Math.floor(seconds /60);</span><br><span class="line">  // 用％來取得傳入秒數除60的餘數（扣除分鐘數後的秒數）</span><br><span class="line">  const remainderSeconds = seconds % 60;</span><br><span class="line">  console.log(&#123;minutes, remainderSeconds&#125;);</span><br><span class="line">  // 顯示秒數的部分若小於0數字前補0</span><br><span class="line">  const display = `$&#123;minutes&#125;:$&#123;remainderSeconds &lt; 10 ? &#x27;0&#x27; : &#x27;&#x27;&#125;$&#123;remainderSeconds&#125;`;</span><br><span class="line">  // 顯示對應時間</span><br><span class="line">  document.title = display;</span><br><span class="line">  timerDisplay.textContent = display;</span><br><span class="line">&#125;</span><br><span class="line">// 顯示結束時間</span><br><span class="line">function displayEndTime(timestamp) &#123;</span><br><span class="line">  // 用傳入的timestamp在取得date資訊</span><br><span class="line">  const end = new Date(timestamp);</span><br><span class="line">  // 從date取得小時數</span><br><span class="line">  const hour = end.getHours();</span><br><span class="line">  // 轉12小時制</span><br><span class="line">  const adjustedHour = hour &gt; 12 ? hour - 12 : hour;</span><br><span class="line">  // 從date取得分鐘數</span><br><span class="line">  const minutes = end.getMinutes();</span><br><span class="line">  // 顯示結束時間，與上方一樣，若分鐘數小於10，則前面補0</span><br><span class="line">  endTime.textContent = `Be Back At $&#123;hour&#125;:$&#123;minutes &lt; 10 ? &#x27;0&#x27; : &#x27;&#x27;&#125;$&#123;minutes&#125;`;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Step3-預設的固定時間倒數按鈕"><a href="#Step3-預設的固定時間倒數按鈕" class="headerlink" title="Step3. 預設的固定時間倒數按鈕"></a>Step3. 預設的固定時間倒數按鈕</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 開始計時（HTML畫面設定好的時間）</span><br><span class="line">function startTimer() &#123;</span><br><span class="line">  // 取得html中設定的data-time（秒數）</span><br><span class="line">  const seconds = parseInt(this.dataset.time);</span><br><span class="line">  // 傳入計時器function</span><br><span class="line">  timer(seconds);</span><br><span class="line">&#125;</span><br><span class="line">// 替每個時間按鈕加上監聽click事件，用來啟動計時function</span><br><span class="line">buttons.forEach(button =&gt; button.addEventListener(&#x27;click&#x27;, startTimer));</span><br></pre></td></tr></table></figure>
<h3 id="Step4-自訂時間倒數"><a href="#Step4-自訂時間倒數" class="headerlink" title="Step4. 自訂時間倒數"></a>Step4. 自訂時間倒數</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// HTML中的input自訂倒數時間輸入欄位監聽</span><br><span class="line">document.customForm.addEventListener(&#x27;submit&#x27;, function(e) &#123;</span><br><span class="line">  // 因為用form，submit後避免跳頁使用preventDefault()來阻止預設事件</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  // 取得input欄位的值</span><br><span class="line">  const mins = this.minutes.value;</span><br><span class="line">  // 傳入計時器</span><br><span class="line">  timer(mins * 60);</span><br><span class="line">  // 清空input</span><br><span class="line">  this.reset();</span><br><span class="line">&#125;)</span><br><span class="line">let button = document.querySelector(&#x27;button&#x27;);</span><br><span class="line">let fn_arr = () =&gt; &#123;</span><br><span class="line">  // 建立 function 時 this 指 Window</span><br><span class="line">  console.log(this.constructor.name)  // 執行function時 this 指 Window</span><br><span class="line">&#125;;</span><br><span class="line">let fn = function()&#123;</span><br><span class="line">  // 建立 function 時 this 指 Window</span><br><span class="line">  console.log(this.constructor.name)  // 執行function時 this 指HTMLButtonElement</span><br><span class="line">button.addEventListener(&#x27;click&#x27;, fn_arr);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a class="link"   href="https://pjchender.blogspot.com/2017/01/es6-arrow-function.html" >箭頭函示與this<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】CSS Variables</title>
    <url>/2019/05/13/JS30/JS30-css-variables/</url>
    <content><![CDATA[<h1 id="03-—-CSS-Variable"><a href="#03-—-CSS-Variable" class="headerlink" title="03 — CSS Variable"></a>03 — CSS Variable</h1><p><img src="0_iD8cFJpaDLGDzkJ9.png" alt="CSS_Variables-demoImage"></p>
<h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>用 JavaScript 和 CSS 讓可以即時調整畫面，模糊、放大、調色。</p>
<p><a href="https://des86532.github.io/javascript-30/03_CSS-Variables/index.html">CSS-Variables</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/03_CSS-Variables" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-新增變數"><a href="#Step1-新增變數" class="headerlink" title="Step1. 新增變數"></a>Step1. 新增變數</h3><p>先抓取input的CSS</p>
<h3 id="Step2-監聽事件"><a href="#Step2-監聽事件" class="headerlink" title="Step2. 監聽事件"></a>Step2. 監聽事件</h3><ol>
<li><p>給每個input添加監聽事件</p>
</li>
<li><p>事件發生後，改變property</p>
</li>
</ol>
<h2 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h2><h3 id="CSS-濾鏡參考-filter"><a href="#CSS-濾鏡參考-filter" class="headerlink" title="CSS 濾鏡參考 filter"></a>CSS 濾鏡參考 filter</h3><p><strong>style.setproperty</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">style.setProperty(&#x27;padding&#x27;, &#x27;15px&#x27;); /* 等同於 */</span><br><span class="line">style.padding = &#x27;15px&#x27;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/setProperty" >MDN-setProperty<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p><code>:root</code> 常用於聲明全局</p>
<p><strong>CSS ：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:root &#123; --color: #fff; &#125;</span><br><span class="line">在使用時：</span><br><span class="line">img &#123; background: var(--base); &#125;</span><br></pre></td></tr></table></figure>

<p><strong>dataset</strong></p>
<p>用 <code>dataset.*</code> 可以取出對象的 <code>data-*</code> 屬性，也等同於 <code>getAttribute</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;test&quot; data-no=&quot;123&quot;&gt;&lt;/div&gt;</span><br><span class="line">document.querySelector(&#x27;#test&#x27;).dataset.no // 輸出123</span><br><span class="line">document.querySelector(&#x27;#test &#x27;).getAttribute(&#x27;data-no&#x27;); // 輸出123</span><br><span class="line">dataset.no = data-no</span><br></pre></td></tr></table></figure>

<p><strong>如何用 JavaScript 改變 CSS 屬性值？</strong></p>
<p>在 JavaScript 中 <code>document.documentElement</code> 即代表文檔根元素。所以要改變全局的 CSS 變量，可以這樣寫：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.documentElement.style.setProperty(&#x27;--base&#x27;, &#x27;#fff&#x27;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Dev Tools Domination</title>
    <url>/2019/05/17/JS30/JS30-dev-tools-domination/</url>
    <content><![CDATA[<h1 id="09-—-Dev-Tools-Domination"><a href="#09-—-Dev-Tools-Domination" class="headerlink" title="09 — Dev Tools Domination"></a>09 — Dev Tools Domination</h1><h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>介紹chrome的開發工具，各種<code>console.</code>的用法</p>
<h3 id="DOM-BREAK-ON"><a href="#DOM-BREAK-ON" class="headerlink" title="DOM BREAK ON .."></a>DOM BREAK ON ..</h3><p>介紹了DOM的中斷點模式，分別有三種觸發模式可選（可複選）</p>
<p><strong>subtree modifications: 當子元素點發生變化時</strong></p>
<p><strong>arrtibute modifications: 當元素發生變化時</strong></p>
<p><strong>node removal: 當元素被移除時</strong></p>
<p>使用方法為如圖，對選取的元素按下<code>右鍵 &gt; Break on...</code> 即可。</p>
<p><img src="0_MZlppsoLJbhggnac.png" alt="dev_tools_domination-image1"></p>
<h2 id="CONSOLE-THINGS"><a href="#CONSOLE-THINGS" class="headerlink" title="CONSOLE.THINGS"></a>CONSOLE.THINGS</h2><p>介紹各種 <code>console</code> 用法</p>
<h3 id="1-console-log"><a href="#1-console-log" class="headerlink" title="1. console.log()"></a>1. console.log()</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(&#x27;hello&#x27;);</span><br></pre></td></tr></table></figure>

<p><img src="0_wv0NVxMAyldVAyl3.png" alt="dev_tools_domination-image2"></p>
<h3 id="2-console-log-‘-s’-value"><a href="#2-console-log-‘-s’-value" class="headerlink" title="2. console.log(‘%s’, value)"></a>2. console.log(‘%s’, value)</h3><p>可將字串中的%s顯示為指定的參數</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(&#x27;Hello I am a %s string!&#x27;, &#x27;</span><br><span class="line">&#x27;);</span><br></pre></td></tr></table></figure>

<p><img src="0_gLi0sL_R7nY-J2cY.png" alt="dev_tools_domination-image3"></p>
<h3 id="3-console-log-‘-c’-font-style"><a href="#3-console-log-‘-c’-font-style" class="headerlink" title="3. console.log(‘%c’, font-style)"></a>3. console.log(‘%c’, font-style)</h3><p>可將字串顯示為參數中帶入的css樣式（font系列的style)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(&#x27;%c I am some great text&#x27;, &#x27;font-size:50px; background:red; text-shadow: 10px 10px 0 blue&#x27;)</span><br></pre></td></tr></table></figure>

<p><img src="0_NQZ1TppS-Tvzzp1R.png" alt="dev_tools_domination-image4"></p>
<h3 id="4-console-warning"><a href="#4-console-warning" class="headerlink" title="4. console.warning()"></a>4. console.warning()</h3><p>顯示為警告圖示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.warn(&#x27;OH NOOO&#x27;);</span><br></pre></td></tr></table></figure>

<p><img src="0_0nQv7HbZneWQoOxq.png" alt="dev_tools_domination-image5"></p>
<h3 id="5-console-error"><a href="#5-console-error" class="headerlink" title="5. console.error()"></a>5. console.error()</h3><p>顯示為錯誤圖示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.error(&#x27;Shit!&#x27;);</span><br></pre></td></tr></table></figure>

<p><img src="0_uZNA7-tu68XeMhFb.png" alt="dev_tools_domination-image6"></p>
<h3 id="6-console-info"><a href="#6-console-info" class="headerlink" title="6. console.info()"></a>6. console.info()</h3><p>顯示為資訊圖示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.info(&#x27;Crocodiles eat 3-4 people per year&#x27;);</span><br></pre></td></tr></table></figure>

<p><img src="0_8MgkJcYaRzUmZ24p.png" alt="dev_tools_domination-image7"></p>
<h3 id="7-console-assert"><a href="#7-console-assert" class="headerlink" title="7. console.assert()"></a>7. console.assert()</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const p = document.querySelector(&#x27;p&#x27;);</span><br><span class="line">    console.assert(p.classList.contains(&#x27;ouch&#x27;), &#x27;That is wrong!&#x27;);</span><br></pre></td></tr></table></figure>

<p>可以拿來測試判斷是否為真，若為false則回傳對應的錯誤訊息。</p>
<p><img src="0_ylF0cjU9qUON7ayj.png" alt="dev_tools_domination-image8"></p>
<h3 id="8-console-clear"><a href="#8-console-clear" class="headerlink" title="8. console.clear()"></a>8. console.clear()</h3><p>清除console的所有訊息。</p>
<p>補充：<strong>Mac</strong> 上清除的快捷鍵為 <code>⌘(Command)+K</code>、<strong>Windows</strong> 快捷鍵則為<code>CTRL+L</code></p>
<h3 id="9-console-dir"><a href="#9-console-dir" class="headerlink" title="9. console.dir()"></a>9. console.dir()</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(p);</span><br><span class="line">console.dir(p);</span><br></pre></td></tr></table></figure>

<p>可以顯示選取物件的所有屬性，<br>我寫的這個範例中，console.log(p)只能返回test本身的function內容，<br>若使用<code>console.dir(p)</code>則可以印出p本身及其所擁有的屬性（注意屬性第一行run）。</p>
<p><img src="0_0sv_QFSWturyISvC.png" alt="dev_tools_domination-image9"></p>
<h3 id="10-console-groupCollapsed-amp-console-groupEnd"><a href="#10-console-groupCollapsed-amp-console-groupEnd" class="headerlink" title="10.console.groupCollapsed() &amp; console.groupEnd()"></a>10.console.groupCollapsed() &amp; console.groupEnd()</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const dogs = [&#123; name: &#x27;Snickers&#x27;, age: 2 &#125;, &#123; name: &#x27;hugo&#x27;, age: 8 &#125;];</span><br><span class="line">dogs.forEach(dog =&gt; &#123;</span><br><span class="line">      console.groupCollapsed(`$&#123;dog.name&#125;`);</span><br><span class="line">      console.log(`This is $&#123;dog.name&#125;`);</span><br><span class="line">      console.log(`$&#123;dog.name&#125; is $&#123;dog.age&#125; years old`);</span><br><span class="line">      console.log(`$&#123;dog.name&#125; is $&#123;dog.age * 7&#125; dog years old`);</span><br><span class="line">      console.groupEnd(`$&#123;dog.name&#125;`);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p>可以把輸出資訊透過group包起來。</p>
<p><img src="0_BrkXwrBNer7iU1NV.png" alt="dev_tools_domination-image10"></p>
<h3 id="11-console-count"><a href="#11-console-count" class="headerlink" title="11. console.count()"></a>11. console.count()</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.count(&#x27;Wes&#x27;);</span><br><span class="line">console.count(&#x27;Wes&#x27;);</span><br><span class="line">console.count(&#x27;Steve&#x27;);</span><br><span class="line">console.count(&#x27;Steve&#x27;);</span><br><span class="line">console.count(&#x27;Wes&#x27;);</span><br><span class="line">console.count(&#x27;Steve&#x27;);</span><br><span class="line">console.count(&#x27;Wes&#x27;);</span><br><span class="line">console.count(&#x27;Steve&#x27;);</span><br><span class="line">console.count(&#x27;Steve&#x27;);</span><br><span class="line">console.count(&#x27;Steve&#x27;);</span><br><span class="line">console.count(&#x27;Steve&#x27;);</span><br><span class="line">console.count(&#x27;Steve&#x27;);</span><br></pre></td></tr></table></figure>

<p>用來累加出現次數。</p>
<p><img src="0_TJe2tkVc7yvo2jJv.png" alt="dev_tools_domination-image10"></p>
<h3 id="12-console-time-amp-console-timeEnd"><a href="#12-console-time-amp-console-timeEnd" class="headerlink" title="12.console.time() &amp; console.timeEnd()"></a>12.console.time() &amp; console.timeEnd()</h3><p>可以用來計算區域內執行的時間，我寫的範例是計算取回json資料的時間。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.time(&#x27;fetching data&#x27;);</span><br><span class="line">    fetch(&#x27;https://api.github.com/users/wesbos&#x27;)</span><br><span class="line">      .then(data =&gt; data.json())</span><br><span class="line">      .then(data =&gt; &#123;</span><br><span class="line">        console.timeEnd(&#x27;fetching data&#x27;);</span><br><span class="line">        console.log(data);</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>

<p><img src="0_LWnxBVb1efSYcRCp.png" alt="dev_tools_domination-image11"></p>
<p>會在執行到 <code>console.timeEnd(‘fetching data’);</code> 時，console 出</p>
<p><img src="0_ETxITy1h34C9dZeh.png" alt="dev_tools_domination-image12"></p>
<p>console.log(data);</p>
<h3 id="13-console-table"><a href="#13-console-table" class="headerlink" title="13.console.table()"></a>13.console.table()</h3><p>可以把資料整理成table格式方便瀏覽。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const dogs = [&#123; name: &#x27;Snickers&#x27;, age: 2 &#125;, &#123; name: &#x27;hugo&#x27;, age: 8 &#125;];</span><br><span class="line">console.table(dogs);</span><br></pre></td></tr></table></figure>

<p><img src="0_EI37R-4PGpVquCvJ.png" alt="dev_tools_domination-image13"></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>還有很多可以透過開發工具來協助的，<br>例如監測整個網頁的讀取速度可以透過Network這個頁籤來查看，<br>也可以設置模擬各種網路速度、或是離線狀態等..<br>非常推薦觀看六角學院的免費課程，可以透過影片了解更多開發工具的操作範例。</p>
<blockquote>
<p><a class="link"   href="https://www.udemy.com/course/chrome-devtools/" >六角學院-Chrome 網頁除錯功能大解密(免費)<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://developers.google.com/web/tools/chrome-devtools/" >Google Dev Tool API<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Custom Video Player</title>
    <url>/2019/05/19/JS30/JS30-custom-video-player/</url>
    <content><![CDATA[<h1 id="11-—-Custom-Video-Player"><a href="#11-—-Custom-Video-Player" class="headerlink" title="11 — Custom Video Player"></a>11 — Custom Video Player</h1><p><img src="0_oYCAixCxuuQCq9Wc.png" alt="Custom_Video_Player-demoImage"></p>
<h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>介紹如何使用HTML5的video tag來完成各種播放器功能，<br>播放/暫停、快進/快退、音量控制、速率控制等…</p>
<p><a href="https://des86532.github.io/javascript-30/11_Custom-Video-Player/index.html">Custom Video Player</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/11_Custom-Video-Player" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-基本設定"><a href="#Step1-基本設定" class="headerlink" title="Step1. 基本設定"></a>Step1. 基本設定</h3><p>作者已經有將基礎的css及html tag設定好，僅需針對各項目的功能開始進行js撰寫即可，設定各個變數</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const player = document.querySelector(&#x27;.player&#x27;);</span><br><span class="line">const video = player.querySelector(&#x27;.viewer&#x27;);</span><br><span class="line">const progress = player.querySelector(&#x27;.progress&#x27;);</span><br><span class="line">const progressBar = player.querySelector(&#x27;.progress__filled&#x27;);</span><br><span class="line">const toggle = player.querySelector(&#x27;.toggle&#x27;);</span><br><span class="line">const skipButtons = player.querySelectorAll(&#x27;[data-skip]&#x27;);</span><br><span class="line">const ranges = player.querySelectorAll(&#x27;.player__slider&#x27;);</span><br><span class="line">const fullScreenBtn = document.querySelector(&#x27;.fullScreen&#x27;);</span><br><span class="line">let change = false</span><br></pre></td></tr></table></figure>

<h3 id="Step2-播放-暫停按鈕"><a href="#Step2-播放-暫停按鈕" class="headerlink" title="Step2. 播放/暫停按鈕"></a>Step2. 播放/暫停按鈕</h3><p>為了在整個播放器範圍及點擊播放按鈕時能播放/暫停，<br>先針對這兩個元素做<code>addEventListener</code>，<br>並在<code>togglePlay()</code>中使影片產生對應動作＆更換圖示，<br>比較特別的是使用了<code>video[method]</code>的寫法，來直接操作video的屬性，<br>直接用影片是否已暫停paused來做判斷，並更改圖示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function toggleplay() &#123;</span><br><span class="line">  if(video.paused) &#123;</span><br><span class="line">    video.play()</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    video.pause()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">function updateicon() &#123;</span><br><span class="line">  const icon = video.paused ? &#x27;►&#x27; : &#x27;❚ ❚&#x27;;</span><br><span class="line">  toggle.textContent = icon;</span><br><span class="line">&#125;</span><br><span class="line">video.addEventListener(&#x27;click&#x27;, toggleplay);  //點擊畫面可以撥放及暫停</span><br><span class="line">toggle.addEventListener(&#x27;click&#x27;,toggleplay);  //點擊撥放按鈕可以撥放以及暫停</span><br><span class="line">video.addEventListener(&#x27;play&#x27;, updateicon);   //更新撥放按鈕切換為暫停按鈕</span><br><span class="line">video.addEventListener(&#x27;pause&#x27;, updateicon);  //更新暫停按鈕切換為撥放按鈕</span><br></pre></td></tr></table></figure>

<h3 id="Step3-音量-速率操作"><a href="#Step3-音量-速率操作" class="headerlink" title="Step3. 音量/速率操作"></a>Step3. 音量/速率操作</h3><p>在HTML中已經定義好對應的input-range標籤，<br>在這裡只需要做監聽並取屬性值來操作就好了！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;range&quot; name=&quot;volume&quot; class=&quot;player__slider&quot; min=&quot;0&quot; max=&quot;1&quot; step=&quot;0.05&quot; value=&quot;1&quot;&gt;</span><br><span class="line">&lt;input type=&quot;range&quot; name=&quot;playbackRate&quot; class=&quot;player__slider&quot; min=&quot;0.5&quot; max=&quot;2&quot; step=&quot;0.1&quot; value=&quot;1&quot;&gt;Ï</span><br></pre></td></tr></table></figure>

<p>在javascript的部分，ranges是透過<code>querySelectorAll</code>來取得的，<br>所以可以用forEach來把所有range加上<code>addEventListener</code>，<br>也因為range是拖曳條，除了click外，也必須要監聽<code>mousemove</code>，<br>而name的命名<code>volume</code>與<code>playbackRate</code>也就是video本身的屬性，直接使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function updateslider() &#123;</span><br><span class="line">  if (!move) &#123;return&#125;</span><br><span class="line">  console.log(this.value);</span><br><span class="line">  video[this.name] = this.value;</span><br><span class="line">&#125;</span><br><span class="line">ranges.forEach(range =&gt; range.addEventListener(&#x27;change&#x27;, updateslider));   //聲音調整以及撥放速度調整</span><br></pre></td></tr></table></figure>

<h3 id="Step4-快進-快退操作"><a href="#Step4-快進-快退操作" class="headerlink" title="Step4. 快進/快退操作"></a>Step4. 快進/快退操作</h3><p>一樣也在HTML中的input定義好對應的秒數了，只須取出使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button data-skip=&quot;-10&quot; class=&quot;player__button skip_left&quot;&gt;&lt;i class=&quot;icon-backward&quot;&gt;&lt;/i&gt;&lt;/button&gt;</span><br><span class="line">&lt;button data-skip=&quot;25&quot; class=&quot;player__button skip_right&quot;&gt;&lt;i class=&quot;icon-forward&quot;&gt;&lt;/i&gt;&lt;/button&gt;</span><br><span class="line">skipButtons也跟Step3的ranges一樣用forEach來加上監聽效果，</span><br><span class="line">取出input中data-skip後透過currentTime來調整影片時間</span><br><span class="line">function skip() &#123;</span><br><span class="line">//dataset.skip = data-skip  dataset為自定義的變數</span><br><span class="line">  console.log(this.dataset.skip);</span><br><span class="line">//parsefloat 將string轉為數值</span><br><span class="line">  video.currentTime += parseFloat(this.dataset.skip);</span><br><span class="line">&#125;</span><br><span class="line">skipButtons.forEach(skipButton =&gt; skipButton.addEventListener(&#x27;click&#x27;, skip));   //快進25S 倒退10S</span><br></pre></td></tr></table></figure>

<h3 id="Step5-進度條顯示"><a href="#Step5-進度條顯示" class="headerlink" title="Step5. 進度條顯示"></a>Step5. 進度條顯示</h3><p>使用 video 的 currenTime 與 duration 計算出進度％數，<br>再透過CSS改變進度條的色塊％數，值得一提的是作者有說到兩個監聽參數：<br>timeupdate 與 progress 都可以做為影片時間變動時的觸發條件，<br>我稍微小測試後發現，使用 progress 會在載入時就將進度顯示在正確位置，<br>而 timeupdate 必須在啟動播放後才會去抓到正確的位置，<br>可以將CSS中的 flexBasis 預設設為50%來觀察這兩者的差別。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function updateprogress() &#123;</span><br><span class="line">  const percent = (video.currentTime/video.duration) * 100</span><br><span class="line">  progressBar.style.flexBasis = `$&#123;percent&#125;%`</span><br><span class="line">&#125;</span><br><span class="line">video.addEventListener(&#x27;timeupdate&#x27;, updateprogress)  //當影片撥放的長度變更時，進度條會變化</span><br></pre></td></tr></table></figure>

<h3 id="Step6-進度條操作-拖曳功能"><a href="#Step6-進度條操作-拖曳功能" class="headerlink" title="Step6. 進度條操作(拖曳功能)"></a>Step6. 進度條操作(拖曳功能)</h3><p>在影片的進度條上，做點擊切換段落，或著是按著滑動片段，<br>分解動作會有：點擊、按住並移動這兩種觸發條件，<br>為了要讓function能同時判斷兩種狀態，必須要將其中一個條件設flag，<br>這裡就將<code>mousedown</code>做了一個flag來操作狀態，<br>並利用<code>e.offsetX</code>的位置及<code>progress.offsetWidth</code>寬度與影片總長來操作當前秒數。<br>監聽的部分，因為原本重複寫了四次addEventListener，<br>所以我把會使用到的event寫在一個陣列裡面，使用forEach去執行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function updateprogressbar(e) &#123;</span><br><span class="line">  if (!move) &#123;return&#125;</span><br><span class="line">  const updateprogressbartime = (e.offsetX / progress.offsetWidth) * video.duration;</span><br><span class="line">  video.currentTime = updateprogressbartime</span><br><span class="line">&#125;</span><br><span class="line">progress.addEventListener(&#x27;mousedown&#x27;, updateprogressbar)  //可以雙擊進度條直接更新影片進度</span><br><span class="line">let move = false;</span><br><span class="line">progress.addEventListener(&#x27;mousedown&#x27;, () =&gt; move = true)</span><br><span class="line">ranges.forEach(range =&gt; range.addEventListener(&#x27;mousedown&#x27;, () =&gt; move = true));</span><br><span class="line">progress.addEventListener(&#x27;mousemove&#x27;, updateprogressbar)</span><br><span class="line">ranges.forEach(range =&gt; range.addEventListener(&#x27;mousemove&#x27;, updateslider));</span><br><span class="line">progress.addEventListener(&#x27;mouseup&#x27;, () =&gt; move = false)</span><br><span class="line">ranges.forEach(range =&gt; range.addEventListener(&#x27;mouseup&#x27;, () =&gt; move = false));</span><br></pre></td></tr></table></figure>

<h3 id="Step7-全螢幕"><a href="#Step7-全螢幕" class="headerlink" title="Step7. 全螢幕"></a>Step7. 全螢幕</h3><p>作者最後有提到的小功能，他說留給我們自己去研究。<br>首先在HTML中加上對應的功能按鈕與圖標(就是這個放大圖標讓我去用font-aswsome)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button class=&quot;player__button fullScreen&quot; title=&quot;Full Screen&quot;&gt;&lt;i class=&quot;icon-fullscreen&quot;&gt;&lt;/i&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure>
<p>然後再javascript中加入這段，多個判斷是為了不同的瀏覽器而寫，<br>值得一提的是，不用對取消全螢幕特別做處理，預設就會有esc關閉及對應的關閉icon了，<br>但如果有特別需求可以使用<code>exitFullscreen()</code>來關閉。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function fullScreen() &#123;</span><br><span class="line">  if (video.requestFullscreen) &#123;</span><br><span class="line">    video.requestFullscreen();</span><br><span class="line">  &#125; else if (video.msRequestFullscreen) &#123;</span><br><span class="line">    video.msRequestFullscreen();</span><br><span class="line">  &#125; else if (video.mozRequestFullScreen) &#123;</span><br><span class="line">    video.mozRequestFullScreen();</span><br><span class="line">  &#125; else if (video.webkitRequestFullscreen) &#123;</span><br><span class="line">    video.webkitRequestFullscreen();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fullScreenBtn.addEventListener(&#x27;click&#x27;, fullScreen);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Event Capture, Propagation, Bubbling and Once</title>
    <url>/2019/05/31/JS30/JS30-event-capture/</url>
    <content><![CDATA[<h1 id="25-—-Event-Capture-Propagation-Bubbling-and-Once"><a href="#25-—-Event-Capture-Propagation-Bubbling-and-Once" class="headerlink" title="25 — Event Capture, Propagation, Bubbling and Once"></a>25 — Event Capture, Propagation, Bubbling and Once</h1><h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>解析<code>addEventListener</code>中事件的捕捉、傳遞、氣泡與單次執行方法</p>
<p><a href="https://des86532.github.io/javascript-30/25_Event-Capture-Propagation-Bubbling-and-Once/index.html">Event Capture, Propagation, Bubbling and Once</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/25_Event-Capture-Propagation-Bubbling-and-Once" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-建立事件模型與基本呼叫"><a href="#Step1-建立事件模型與基本呼叫" class="headerlink" title="Step1. 建立事件模型與基本呼叫"></a>Step1. 建立事件模型與基本呼叫</h3><p>首先建立三層DIV作為稍後測試使用的模型，<br>依序包覆為：紫色&gt;淺橘色&gt;深橘色</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;one&quot;&gt; </span><br><span class="line">  &lt;div class=&quot;two&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;three&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>接著建立<code>click</code>事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 取得頁面的所有div</span><br><span class="line">const divs = document.querySelectorAll(&#x27;div&#x27;);</span><br><span class="line">function logText(e) &#123;</span><br><span class="line">  // 印出當前div的class name</span><br><span class="line">  console.log(this.classList.value);</span><br><span class="line">&#125;</span><br><span class="line">// 為每個div加上click事件監聽</span><br><span class="line">divs.forEach(div =&gt; div.addEventListener(&#x27;click&#x27;, logText));</span><br></pre></td></tr></table></figure>
<h3 id="Step2-預設的點擊事件"><a href="#Step2-預設的點擊事件" class="headerlink" title="Step2. 預設的點擊事件"></a>Step2. 預設的點擊事件</h3><p>當對著畫面中間(深橘色/one)做點擊時，console印出來的是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">three</span><br><span class="line">two</span><br><span class="line">one</span><br></pre></td></tr></table></figure>
<p>會從<code>click</code>的位置的最深處開始向外層連動所有的div <code>click</code>事件，像是氣泡一樣的從內向外浮出去。</p>
<h3 id="Step3-addEventListener的第三個參數-1-capture"><a href="#Step3-addEventListener的第三個參數-1-capture" class="headerlink" title="Step3. addEventListener的第三個參數-1 : capture"></a>Step3. addEventListener的第三個參數-1 : capture</h3><p>深入檢查，會發現其實<code>addEventListener</code>是有第三個參數的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">divs.forEach(div =&gt; div.addEventListener(&#x27;click&#x27;, logText, &#123;</span><br><span class="line">  capture: false, // 預設為false</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure>
<p>第三個參數的第一個屬性<code>Capture</code>就是事件的捕捉順序，<br>剛剛提到<code>click</code>後console印出來順序是由內向外，</p>
<p>若將<code>Capture</code>設為<code>true</code>會在點擊中間(深橘色/one)會印出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">one</span><br><span class="line">two</span><br><span class="line">three</span><br></pre></td></tr></table></figure>
<p>變為由外向內了。</p>
<p>如果將<code>Capture</code>設為<code>true</code>，也同時使用<code>stopPropagation</code><br>就只有印出one而已，這是因為對當前最外層的容器one去點了，<br>就已經捕捉到目的了，所以他不會再往下找，只會到點擊的最外層目標為止。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">one</span><br></pre></td></tr></table></figure>

<h3 id="Step4-stopPropagation"><a href="#Step4-stopPropagation" class="headerlink" title="Step4. stopPropagation()"></a>Step4. stopPropagation()</h3><p>但如果想從內層往外層點，而且是依選取層印出對應層級的話，<br>就要在列印的function加上<code>stopPropagation()</code>來使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function logText(e) &#123;</span><br><span class="line">  console.log(this.classList.value);</span><br><span class="line">  e.stopPropagation(); // stop bubbling!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這會使原本向外延伸的氣泡事件停止。</p>
<h3 id="Step5-addEventListener的第三個參數-2-once"><a href="#Step5-addEventListener的第三個參數-2-once" class="headerlink" title="Step5. addEventListener的第三個參數-2:once"></a>Step5. addEventListener的第三個參數-2:once</h3><p>而<code>addEventListener</code>的第三參數還有一個新屬性<code>once</code>，<br>新增一個按鈕的click事件來測試：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">button.addEventListener(&#x27;click&#x27;, () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;Click!!!&#x27;);</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  once: true</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>它可以使這個按鈕click被執行結束後，直接<code>unbind</code>這個元素與事件，<br>之後這個按鈕就已經不會再被觸發click事件了！<br>可以運用在很多避免重複點擊的狀況，例如表單送出後禁止<strong>user</strong>重複點擊。</p>
]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Flex-Panel-Gallery</title>
    <url>/2019/05/14/JS30/JS30-flex-panel-gallery/</url>
    <content><![CDATA[<h1 id="05-—-Flex-實現可伸縮的圖片牆"><a href="#05-—-Flex-實現可伸縮的圖片牆" class="headerlink" title="05 — Flex 實現可伸縮的圖片牆"></a>05 — Flex 實現可伸縮的圖片牆</h1><p><img src="0_y6DLMvPEiGfMmZbG.png" alt="Flex-Panel-Gallery"></p>
<h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>點擊任一張圖片，使圖片放大，兩側文字向內滑入</p>
<p><a href="https://des86532.github.io/javascript-30/05_Flex-Panel-Gallery/index.html">Flex-Panel-Gallery</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/05_Flex-Panel-Gallery" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><ol>
<li>抓取所有panel</li>
<li>建立function</li>
<li>設定click、transitionend的監聽事件</li>
</ol>
<h2 id="CSS-部分"><a href="#CSS-部分" class="headerlink" title="CSS 部分"></a>CSS 部分</h2><p>要使用flexbox需要<code>display:flex</code>才可以使用flexbox的語法</p>
<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex" >MDN-flexbox<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p><code>&gt;</code>:<br>直接碰到該標籤的才會變化</p>
<p><code>*</code> :<br>所有的意思</p>
<blockquote>
<p><a class="link"   href="https://pjchender.blogspot.com/2015/07/css.html" >CSS選擇器<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h2><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction:"></a>flex-direction:</h3><p>可以改變方向，為直立或是橫列</p>
<h3 id="flex-flex-grow｜flex-shrink｜flex-basis"><a href="#flex-flex-grow｜flex-shrink｜flex-basis" class="headerlink" title="flex: flex-grow｜flex-shrink｜flex-basis:"></a>flex: flex-grow｜flex-shrink｜flex-basis:</h3><p>以下兩個相同:</p>
<p>flex: auto<br>flex: 1 1 auto;</p>
<p>以下兩個相同:</p>
<p>flex: none;<br>flex: 0 0 auto;</p>
<h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow:"></a>flex-grow:</h3><p>預設值為0,表示寬度就是元素內容的寬。而從1開始，數字愈大，占的寬度比例也會愈大。</p>
<h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink:"></a>flex-shrink:</h3><p>flex-shrink跟flex-grow相反，是表示當父元素寬度空間不足時，子元素壓縮的比例。預設值為 1，但設為 0 同樣表示不壓縮，數字愈大，被壓縮的幅度就愈大。</p>
<h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis:"></a>flex-basis:</h3><p>可以在flex-basis設定寬度或高度，設定好後會自動分配該區塊的寬度或高度。</p>
<h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content:"></a>justify-content:</h3><p>水平對齊</p>
<h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content:"></a>align-content:</h3><p>垂直對齊，與align-items的不同是，align-items是針對單行的處理，多行元素用align-content</p>
]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Follow Along Link Highlighter</title>
    <url>/2019/05/29/JS30/JS30-follow-along-link-highlighter/</url>
    <content><![CDATA[<h1 id="22-—-Follow-Along-Link-Highlighter"><a href="#22-—-Follow-Along-Link-Highlighter" class="headerlink" title="22 — Follow Along Link Highlighter"></a>22 — Follow Along Link Highlighter</h1><p><img src="0_P-5Tgm8x1d34N1cr.png" alt="follow along link highlighter"></p>
<h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>透過<code>getBoundingClientRect</code>與CSS的<code>transform</code>來達到HightLight樣式會跟著指定位置移動的效果。</p>
<p><a href="https://des86532.github.io/javascript-30/22_Follow-Along-Link-Highlighter/index.html">Follow Along Link Highlighter</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/22_Follow-Along-Link-Highlighter" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-取得頁面元素"><a href="#Step1-取得頁面元素" class="headerlink" title="Step1. 取得頁面元素"></a>Step1. 取得頁面元素</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 取得HTML中所有的a元素</span><br><span class="line">const triggers = document.querySelectorAll(&#x27;a&#x27;);</span><br><span class="line">// 建立一個span來放置highlight效果</span><br><span class="line">const highlight = document.createElement(&#x27;span&#x27;);</span><br><span class="line">highlight.classList.add(&#x27;highlight&#x27;);</span><br><span class="line">// 將建立的span加到頁面中</span><br><span class="line">document.body.append(highlight);</span><br></pre></td></tr></table></figure>

<h3 id="Step2-撰寫移入狀態"><a href="#Step2-撰寫移入狀態" class="headerlink" title="Step2. 撰寫移入狀態"></a>Step2. 撰寫移入狀態</h3><p>用以下的JS對目標(a連結)定位並設定樣式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 效果</span><br><span class="line">function highlightLink() &#123;</span><br><span class="line">  // 取得this(由a.addEventListener傳入，所以會是該a)的資訊</span><br><span class="line">  const linkCoords = this.getBoundingClientRect();</span><br><span class="line">  // 建立一個coords物件來存放會使用的寬高與定位資訊</span><br><span class="line">  const cords = &#123;</span><br><span class="line">    width: linkCoords.width,</span><br><span class="line">    height: linkCoords.height,</span><br><span class="line">    left: linkCoords.left + window.scrollX,</span><br><span class="line">    top: linkCoords.top + window.scrollY</span><br><span class="line">  &#125;</span><br><span class="line">  // 設定highlight效果的寬高及定位</span><br><span class="line">  highlight.style.width = `$&#123;cords.width&#125;px`;</span><br><span class="line">  highlight.style.height = `$&#123;cords.height&#125;px`;</span><br><span class="line">  highlight.style.transform = `translate($&#123;cords.left&#125;px, $&#123;cords.top&#125;px`;</span><br><span class="line">&#125;</span><br><span class="line">// 監聽所有a元素的滑鼠移入，觸發highlightLink</span><br><span class="line">triggers.forEach(a =&gt; a.addEventListener(&#x27;mouseenter&#x27;, highlightLink));</span><br></pre></td></tr></table></figure>
<p>位移的效果主要來自已經寫好的css與js裡面重新定位的<code>translate</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.highlight &#123;</span><br><span class="line">  transition: all 0.2s;</span><br><span class="line">  border-bottom:2px solid white;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top:0;</span><br><span class="line">  background:white;</span><br><span class="line">  left:0;</span><br><span class="line">  z-index: -1;</span><br><span class="line">  border-radius:20px;</span><br><span class="line">  display: block;</span><br><span class="line">  box-shadow: 0 0 10px rgba(0,0,0,0.2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="語法-amp-備註"><a href="#語法-amp-備註" class="headerlink" title="語法&amp;備註"></a>語法&amp;備註</h2><h3 id="ParentNode-父節點"><a href="#ParentNode-父節點" class="headerlink" title="ParentNode( 父節點 )"></a>ParentNode( 父節點 )</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">&lt;a class=&quot;test&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;test2&quot;&gt;&lt;/a&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">let b = document.getElementById(&#x27;test&#x27;).parentNode</span><br><span class="line">console.log(b)  //&lt;p&gt;&lt;a class=&quot;test&quot;&gt;&lt;/a&gt;&lt;a class=&quot;test2&quot;&gt;&lt;/a&gt;</span><br><span class="line">let c = document.getElementById(&#x27;test&#x27;).parentNode.nodeName</span><br><span class="line">console.log(c)  //p</span><br></pre></td></tr></table></figure>
<h3 id="ParentNode-append-amp-amp-ParentNode-appendChild"><a href="#ParentNode-append-amp-amp-ParentNode-appendChild" class="headerlink" title="ParentNode.append() &amp;&amp; ParentNode.appendChild()"></a>ParentNode.append() &amp;&amp; ParentNode.appendChild()</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 創建一個新的段落p，然後加到body最後面</span><br><span class="line">let p = document.createElement(&#x27;p&#x27;)</span><br><span class="line">document.body.appendChild(p)</span><br><span class="line">//包含在body之內</span><br></pre></td></tr></table></figure>

<p><strong>差異：</strong></p>
<p><code>ParentNode.append()</code>允許追加 DOMString 對象，而 <code>Node.appendChild()</code> 只接受 Node 對象</p>
<p><code>ParentNode.append()</code>没有返回值，而 <code>Node.appendChild()</code> 返回追加的 Node 對象。</p>
<p><code>ParentNode.append()</code>可以追加幾個節點和字符串，而 <code>Node.appendChild()</code> 只能追加一個節點。</p>
<p><a class="link"   href="https://developer.mozilla.org/zh-TW/docs/Web/API/ParentNode" >MDN-ParentNode<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/API/ParentNode/append" >MDN-ParentNode.append<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/appendChild" >MDN-appendChild<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Element-getBoundingClientRect"><a href="#Element-getBoundingClientRect" class="headerlink" title="Element.getBoundingClientRect()"></a>Element.getBoundingClientRect()</h3><p>返回目標元素的大小與相對於瀏覽器視窗的位置資訊</p>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect" >MDN-Element.getBoundingClientRect<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Geolocation</title>
    <url>/2019/05/28/JS30/JS30-geolocation/</url>
    <content><![CDATA[<h1 id="21-Geolocation"><a href="#21-Geolocation" class="headerlink" title="21 - Geolocation"></a>21 - Geolocation</h1><p><img src="0_luV5NMsO4d-WpbxT.png" alt="geolocation"></p>
<h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>利用<code>navigator.geolocation</code>來取得裝置的地理位置與速率。</p>
<p><a href="https://des86532.github.io/javascript-30/21_Geolocation/index.html">Geolocation</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/21_Geolocation" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-啟動Local-Server"><a href="#Step1-啟動Local-Server" class="headerlink" title="Step1. 啟動Local Server"></a>Step1. 啟動Local Server</h3><p>這個練習需要使用到local server，<br>如果你已經有一個可在本機run起來的server可以直接使用，<br>或在這層資料夾底下運行<code>npm install</code>來安裝<code>browser-sync</code>，<br>安裝完成後可以透過指令npm start來啟動localserver(預設port3000)，<br>npm指令需要下載node.js來使用</p>
<h3 id="Step2-測試"><a href="#Step2-測試" class="headerlink" title="Step2. 測試"></a>Step2. 測試</h3><p>由於這個練習是需要取得定位資訊，<br>所以可以透過手機瀏覽器利用npm start啟動server後的內網ip來連線，<br>或是使用Mac的Xcode開發工具來模擬移動中的裝置(影片教學是使用後者)。</p>
<h3 id="Step3-撰寫程式"><a href="#Step3-撰寫程式" class="headerlink" title="Step3. 撰寫程式"></a>Step3. 撰寫程式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 取得HTML中的元素</span><br><span class="line">const arrow = document.querySelector(&#x27;.arrow&#x27;);</span><br><span class="line">const speed = document.querySelector(&#x27;.speed-value&#x27;);</span><br><span class="line">// 使用watchPosition來取得使用者的地理位置及海拔、速度</span><br><span class="line">navigator.geolocation.watchPosition((data) =&gt; &#123;</span><br><span class="line">  // 若成功取回，則會回傳一組Position(這裡定義名稱為data)</span><br><span class="line">  console.log(data);</span><br><span class="line">  // 使用coords.speed取回速度(公尺/秒)</span><br><span class="line">  speed.textContent = data.coords.speed;</span><br><span class="line">  // 使用coords.heading取得方位，代表偏離北方的角度，0為正北、90為正東</span><br><span class="line">  arrow.style.transform = `rotate($&#123;data.coords.heading&#125;deg)`;</span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">  // 錯誤回傳訊息，例如未取得定位授權時</span><br><span class="line">  console.error(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/API/Geolocation" >MDN-Geolocation<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Fun With Html5 Canvas</title>
    <url>/2019/05/16/JS30/JS30-fun-with-html5-canvas/</url>
    <content><![CDATA[<h1 id="08-—-Fun-with-HTML5-Canvas"><a href="#08-—-Fun-with-HTML5-Canvas" class="headerlink" title="08 — Fun with HTML5 Canvas"></a>08 — Fun with HTML5 Canvas</h1><p><img src="0_MJZmUuU2ely4Ra5E.png" alt="Fun_with_HTML5_Canvas-demoImage"></p>
<h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>使用HTML5的Canvas來製作一個畫布，<br>透過滑鼠來繪製彩色粗細不一的線條～</p>
<p><a href="https://des86532.github.io/javascript-30/08_Fun-with-HTML5-Canvas/index.html">HTML5 Canvas</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/08_Fun-with-HTML5-Canvas" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1"><a href="#Step1" class="headerlink" title="Step1"></a>Step1</h3><p>先在HTML的地方建立一個<code>&lt;canvas&gt;</code>的區塊，<br>只有width、height兩種屬性，<br>並設置一個變數 <strong>ctx</strong> 作為 canvas 的操作元素，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const ctx = canvas.getContext(‘2d’)</span><br></pre></td></tr></table></figure>
<p><code>getContext</code>用來取得渲染環境<br>設定顏色<code>strokeStyle</code>、樣式<code>lineJoin</code>、<code>lineCap</code>、<code>lineWidth</code>…</p>
<h3 id="Step2"><a href="#Step2" class="headerlink" title="Step2"></a>Step2</h3><p>接著設定變數各種待會會應用到的變數</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const canvas = document.querySelector(&#x27;#draw&#x27;);</span><br><span class="line">const ctx = canvas.getContext(&#x27;2d&#x27;);</span><br><span class="line">canvas.width = window.innerWidth;</span><br><span class="line">canvas.height = window.innerHeight;</span><br><span class="line">ctx.strokeStyle = &#x27;#BADA55&#x27;; // 線條顏色</span><br><span class="line">ctx.lineJoin = &#x27;round&#x27;; // 線條連接樣式（轉角）</span><br><span class="line">ctx.lineCap = &#x27;round&#x27;; // 線條結束樣式</span><br><span class="line">ctx.lineWidth = 100; // 線條寬度</span><br><span class="line">let isDrawing = false; // 判斷是否執行畫圖中</span><br><span class="line">let lastX = 0; </span><br><span class="line">let lastY = 0;</span><br><span class="line">let hue = 0; // 色相值，在hsl中使用</span><br><span class="line">let direction = true; // 判斷粗細增減用</span><br></pre></td></tr></table></figure>

<h3 id="Step3"><a href="#Step3" class="headerlink" title="Step3"></a>Step3</h3><p>寫function來執行畫圖！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function draw(e) &#123;</span><br><span class="line">    // 判斷是否`isDrawing`，`false`則`return`不觸發此function</span><br><span class="line">    if (!isDrawing) &#123; return; &#125;</span><br><span class="line">    // 設定線條顏色為hsl模式，吃變數hue</span><br><span class="line">    ctx.strokeStyle = `hsl($&#123;hue&#125;, 100%, 50%)`;</span><br><span class="line">    // 起始畫圖路徑</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    // 將路徑指針移動到X、Y點</span><br><span class="line">    ctx.moveTo(lastX, lastY);</span><br><span class="line">    // 將起始點與目前滑鼠位置的X、Y用線條連接起來</span><br><span class="line">    ctx.lineTo(e.offsetX, e.offsetY);</span><br><span class="line">    // 將線條繪製出來</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    // 把結束點放進X、Y變數中</span><br><span class="line">    [lastX, lastY] = [e.offsetX, e.offsetY];</span><br><span class="line">    // 做顏色的變化效果，當色相值超過360後歸零</span><br><span class="line">    hue++;</span><br><span class="line">    if (hue &gt;= 360) &#123;</span><br><span class="line">        hue = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    // 做線條寬度的變化效果，當寬度達到指令值得時候，切換direction的true/false</span><br><span class="line">    if (ctx.lineWidth &gt;= 100 || ctx.lineWidth &lt;= 1) &#123;</span><br><span class="line">        direction = !direction;</span><br><span class="line">    &#125;</span><br><span class="line">    if (direction) &#123;</span><br><span class="line">        ctx.lineWidth++;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        ctx.lineWidth--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Step4"><a href="#Step4" class="headerlink" title="Step4"></a>Step4</h3><p>接著設定滑鼠對應的addEventListener效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 當滑鼠按下時，將目前滑鼠的位置設定為變數中的X、Y並讓isDrawing為true</span><br><span class="line">canvas.addEventListener(&#x27;mousedown&#x27;, (e) =&gt; &#123;</span><br><span class="line">    isDrawing = true;</span><br><span class="line">    [lastX, lastY] = [e.offsetX, e.offsetY];</span><br><span class="line">&#125;);</span><br><span class="line">// 滑鼠移動中，執行function draw</span><br><span class="line">canvas.addEventListener(&#x27;mousemove&#x27;, draw);</span><br><span class="line">// 滑鼠放開，滑鼠離開 都將isDrawing改為false不觸發function draw</span><br><span class="line">canvas.addEventListener(&#x27;mouseup&#x27;, () =&gt; isDrawing = false);</span><br><span class="line">canvas.addEventListener(&#x27;mouseout&#x27;, () =&gt; isDrawing = false);</span><br></pre></td></tr></table></figure>

<h2 id="Javascript語法-amp-備註"><a href="#Javascript語法-amp-備註" class="headerlink" title="Javascript語法&amp;備註"></a>Javascript語法&amp;備註</h2><h3 id="direction-direction"><a href="#direction-direction" class="headerlink" title="direction = !direction"></a>direction = !direction</h3><p>學到的是透過這個方式來做true/false的切換。</p>
<h3 id="HTML5語法-amp-備註"><a href="#HTML5語法-amp-備註" class="headerlink" title="HTML5語法&amp;備註"></a>HTML5語法&amp;備註</h3><p>這篇幾乎都是使用到canvas的功能，<br>紀錄若要製作像這樣的畫布效果在canvas中的使用順序：</p>
<ol>
<li>定義線條樣式<br>(1) strokeStyle線條顏色<br>(2) lineWidth線條寬度<br>(3) lineJoin線條的轉角樣式<br>(4) lineCap線條的結束樣式</li>
<li>移動順序<br>(1) beginPath()開啟一個新的繪製路徑<br>(2) moveTo()將繪製路徑的起點移動到指定的座標中<br>(3) lineTo()連接路徑終點到指定的座標中<br>(4) stroke()繪製路徑</li>
</ol>
<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D" >MDN-CanvasRenderingContext2D<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Hold Shift and Check Checkboxes</title>
    <url>/2019/05/18/JS30/JS30-hold-shift-and-check-checkboxes/</url>
    <content><![CDATA[<h1 id="10-—-Hold-Shift-and-Check-Checkboxes"><a href="#10-—-Hold-Shift-and-Check-Checkboxes" class="headerlink" title="10 — Hold Shift and Check Checkboxes"></a>10 — Hold Shift and Check Checkboxes</h1><p><img src="0_ehPGKgaPx7n6UAOc.png" alt="Hold_Shift_and_Check_Checkboxes-demoImage"></p>
<h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>介紹如何使用Shift + 左鍵來完成連續區間選取，<br>在這篇的探索中，我增加了連續區間取消選取及部分問題的改善。</p>
<p><a href="https://des86532.github.io/javascript-30/10_Hold-Shift-and-Check-Checkboxes/index.html">Hold Shift and Check Checkboxes</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/10_Hold-Shift-and-Check-Checkboxes" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-基本設定"><a href="#Step1-基本設定" class="headerlink" title="Step1. 基本設定"></a>Step1. 基本設定</h3><p>用<code>querySelectorAll(&#39;input&#39;)</code>來把HTML中的inputs選起來，<br>並設置一個變數<code>let lastcheck;</code>作為稍後勾選位置的紀錄使用。</p>
<h3 id="Step2-觸發設定"><a href="#Step2-觸發設定" class="headerlink" title="Step2. 觸發設定"></a>Step2. 觸發設定</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inputsforEach來加入addEventListener(&#x27;click&#x27;, checking)。</span><br></pre></td></tr></table></figure>

<h3 id="Step3-checking"><a href="#Step3-checking" class="headerlink" title="Step3. checking"></a>Step3. checking</h3><p>在這個function裡面，建立了一個區域變數<code>let between = false</code>來當作選取區間的標記，<br>並在每次觸發時檢查是否有 <strong>按著shift</strong> 點擊<code>if(e.shiftKey &amp;&amp; this.checked)</code>，<br>若有的話則再跑一次forEach來透過between對每個checkbox進行區間標記，<br>把屬於區間內的checkbox勾起來，並記錄此次點擊的位置。</p>
<h2 id="程式備註"><a href="#程式備註" class="headerlink" title="程式備註"></a>程式備註</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//選取所有的checkbox</span><br><span class="line">const inputs = document.querySelectorAll(&#x27;input&#x27;)</span><br><span class="line">let lastcheck;</span><br><span class="line">function checking(e) &#123;</span><br><span class="line">  let between = false</span><br><span class="line">  // 有+shift按鍵的 和 這個有沒有被打勾</span><br><span class="line">  if(e.shiftKey &amp;&amp; this.checked) &#123;</span><br><span class="line">    //全部找一遍 遇到第一個打勾的(input === this) 就把between變成true</span><br><span class="line">    //遇到最後一個打勾的那個 因為中間的between = true 所以把最後一個變成 between = false</span><br><span class="line">    inputs.forEach(input =&gt; &#123;</span><br><span class="line">      if(input === this || input === lastcheck) &#123;</span><br><span class="line">        between = !between</span><br><span class="line">      &#125;</span><br><span class="line">      //把中間between = true 的 全部打勾</span><br><span class="line">      if(between) &#123;</span><br><span class="line">        input.checked = true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  //要儲存最後一個打勾的是哪一個</span><br><span class="line">  lastcheck = this</span><br><span class="line">&#125;</span><br><span class="line">// 為每個checkbox加上click事件</span><br><span class="line">inputs.forEach(input =&gt; &#123;</span><br><span class="line">  input.addEventListener(&#x27;click&#x27;, checking)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Drum Kit</title>
    <url>/2019/05/11/JS30/JS30-javascript-drum-kit/</url>
    <content><![CDATA[<h1 id="01-—-Drum-Kit"><a href="#01-—-Drum-Kit" class="headerlink" title="01 — Drum Kit"></a>01 — Drum Kit</h1><p><img src="1_gMmV-bW9dTw5VCnH1GSxkQ.png" alt="drum_kit-demoImage"></p>
<h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>透過JS使鍵盤及滑鼠按下後播放出對應按鍵的聲音，並同時產生一個特效，在按下其他鍵後會關閉該特效並於新按鍵中啟用。</p>
<p><a href="https://des86532.github.io/javascript-30/01_Java-Script-Drum-Kit/index.html">Drum Kit</a><br><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/01_Java-Script-Drum-Kit" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-新增keydown-listener"><a href="#Step1-新增keydown-listener" class="headerlink" title="Step1. 新增keydown listener"></a>Step1. 新增keydown listener</h3><p>利用<code>window.addEventListener(&#39;keydown&#39;, function);</code>來監聽鍵盤動作。<br>(鍵盤每個按鍵都有固定的data-key這個參數)</p>
<h3 id="Step2-建立function"><a href="#Step2-建立function" class="headerlink" title="Step2. 建立function"></a>Step2. 建立function</h3><ol>
<li>利用傳入的e.keyCode來取得對應的audio標籤及該按鍵的div標籤</li>
<li>判斷傳入的e.keyCode是否有對應的audio標籤，若無則退出</li>
<li>使對應的div加上playing樣式，產生對應的典及特效</li>
<li>使對應的audio播放時間為0</li>
<li>播放對應的音檔</li>
</ol>
<h3 id="Step3-新增transitionend-listener"><a href="#Step3-新增transitionend-listener" class="headerlink" title="Step3. 新增transitionend listener"></a>Step3. 新增transitionend listener</h3><p>當該元件觸發特效並結束時(transitionend)，呼叫function</p>
<h3 id="Step4-新增click-listener"><a href="#Step4-新增click-listener" class="headerlink" title="Step4. 新增click listener"></a>Step4. 新增click listener</h3><ol>
<li>點擊後讀取data-key</li>
<li>利用傳入的e.keyCode來取得對應的audio標籤及該按鍵的div標籤</li>
<li>判斷傳入的e.keyCode是否有對應的audio標籤，若無則退出</li>
<li>使對應的div加上playing樣式，產生對應的典及特效</li>
<li>使對應的audio播放時間為0</li>
<li>播放對應的音檔</li>
</ol>
<h2 id="JavaScript語法-amp-備註"><a href="#JavaScript語法-amp-備註" class="headerlink" title="JavaScript語法&amp;備註"></a>JavaScript語法&amp;備註</h2><h3 id="EventTarget-addEventListener-："><a href="#EventTarget-addEventListener-：" class="headerlink" title="EventTarget.addEventListener()："></a>EventTarget.addEventListener()：</h3><p>EvenTarget常見有document、Element、window<br>Document 介面代表所有在瀏覽器中載入的網頁，也是作為網頁內容 DOM 樹（包含如 <code>HTMLElement(“body”)、HTMLElement(“table”)</code> 的進入點</p>
<p><img src="0_NZMuGgzOQBZthm4K.jpeg" alt="drum_kit-image1"></p>
<p>window 物件代表了一個包含 DOM 文件的視窗，其中的 document 屬性指向了視窗中載入的 Document 物件</p>
<p><img src="0_hJVR4vzhqivD4OEb.jpeg" alt="drum_kit-image2"><br><img src="0_Dh1m1AJEOQHCsUfo.jpeg" alt="drum_kit-image3"><br><img src="0_gPM-dfUPhIVXLEN-.png" alt="drum_kit-image4"></p>
<p>Element 介面表示了一個在 Document 中的物件，其描述了各類型元素的共同屬性與方法</p>
<h3 id="element-classList："><a href="#element-classList：" class="headerlink" title="element.classList："></a>element.classList：</h3><p><code>add( String [, String] ); //新增多個className</code><br><code>remove( String [,String] ); //移除多個className</code></p>
<p>如果已經存在/不存在的className則會被忽略。<br>還有其他方法如:</p>
<p><code>item ( Number )</code>返回已存在的值<br><code>toggle ( String [, force] )</code>偵測是否存在這個className，存在則刪除/不存在則新增<br><code>contains( String )</code>偵測是否存在這個className, 返回true/false</p>
<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/API/Element/classList" >MDN-Element.classList<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="HTMLmediaElement-audio-："><a href="#HTMLmediaElement-audio-：" class="headerlink" title="HTMLmediaElement(audio)："></a>HTMLmediaElement(audio)：</h3><p>HTML的audio標籤，在HTML放置如下標籤指定音源<br><code>&lt;audio src=&quot;sound/a.mp3&quot;&gt;&lt;/audio&gt;</code><br>透過javascript來操作：<br><code>element.play()</code>:進行播放<br><code>element.currentTime</code>:指定播放秒數<br>範例中使用<code>currentTime</code>是為了達到連發的效果</p>
<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement" >MDN-HTMLMediaElement<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="addEventListener"><a href="#addEventListener" class="headerlink" title="addEventListener"></a>addEventListener</h3><p>因為我是是第一次看到<code>transtionend</code>這個event，<br>所以去MDN查了HTML DOM event記錄連結在此</p>
<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/Events" >MDN-Event reference<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h3><p>範例中有這段<br><code>const keys = Array.from(document.querySelectorAll(&#39;.key&#39;));</code><br>查詢了<code>Array.from</code>才知道這是一個將一個物件或是字串轉為陣列格式的語法，<br>但當時覺得為何要把陣列在轉成陣列? querySelectorAll 不就是返回陣列嗎?<br>在查下去才發現 querySelectorAll 返回的是 nodeList 且 nodeList 跟 Array 是不同的!<br>雖然都很像陣列，但 nodeList 並沒有 array.prototype 上的方法！<br>最簡單的例子是用<code>array.push()</code>去測試，會發現由 querySelectAll 得到的物件無法用 <code>.push()</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let testNodeList = document.querySelectAll(&#x27;.key&#x27;);</span><br><span class="line">testNodeList.push(&#x27;add&#x27;); // &lt;--非陣列會報錯TypeError: testNodeList.push is not a function</span><br><span class="line">let testArray = Array.from(testNodeList);</span><br><span class="line">testArray.push(&#x27;add&#x27;); // &lt;-- 轉為陣列就可以了</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/API/NodeList" >MDN-NodeList<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="箭頭函式-Arrow-Function"><a href="#箭頭函式-Arrow-Function" class="headerlink" title="箭頭函式(Arrow Function)"></a>箭頭函式(Arrow Function)</h3><h4 id="javascript-傳統寫法"><a href="#javascript-傳統寫法" class="headerlink" title="javascript-傳統寫法"></a>javascript-傳統寫法</h4><p><code>let func1 = function(arg) &#123; console.log(&#39;Hi, &#39; + arg); &#125;;</code></p>
<h4 id="javascript-箭頭函式寫法"><a href="#javascript-箭頭函式寫法" class="headerlink" title="javascript-箭頭函式寫法"></a>javascript-箭頭函式寫法</h4><p><code>let func2 = arg =&gt; console.log(&#39;Hi, &#39; + arg);</code></p>
<p><em>補充</em>: 如果該function沒有參數要傳，要帶空括號如下<br><code>let func3 = () =&gt; console.log(&#39;Hi&#39;);</code></p>
<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" >MDN-Arrow functions<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="template-literals"><a href="#template-literals" class="headerlink" title="template literals"></a>template literals</h2><p>模板文字，同樣屬於第一次看到的東西，<br>利用<code>`</code> – 反引號(back-tick)或稱重音符(grave accent)來組合字串，<br>在範圍內可利用<code>$&#123;&#125;</code>加上變數操作<br>例如原本的字串+變數組合寫法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str = &#x27;&lt;div data-key=&quot;&#x27; + key + &#x27;&quot;&gt;&#x27; +</span><br><span class="line">&#x27;&lt;button&gt;click me&lt;/button&gt;&#x27; +</span><br><span class="line">&#x27;&lt;/div&gt;&#x27;;</span><br><span class="line">改用template string來做只要</span><br><span class="line">javascript</span><br><span class="line">let str = `&lt;div data-key=&quot;$&#123;key&#125;&quot;&gt;</span><br><span class="line">&lt;button&gt;click me&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;`;</span><br></pre></td></tr></table></figure>
<p>用<code>`</code>包住字串，利用<code>$&#123;&#125;</code>來包變數<br>這樣可以很輕鬆的組出易於閱讀的組合字串！<br>不用像以前還要注意單雙引號與+的配合了~</p>
<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals" >MDN-Template literals<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="符號"><a href="#符號" class="headerlink" title="符號:"></a>符號:</h2><p>‘ 單引號 quote<br>” 雙引號 double quote<br>` 撇號 apostrophe<br>單引號以及雙引號的作用完全相同，單引號不可放在單引號內，雙引號不可放在雙引號內，單可以放在雙內，雙可以放在單內</p>
<blockquote>
<p>[Difference between ` and ‘ in javascript](<a class="link"   href="https://stackoverflow.com/questions/33679732/difference-if-there-is-any-between-and-in-javascript?lq=1" >https://stackoverflow.com/questions/33679732/difference-if-there-is-any-between-and-in-javascript?lq=1<i class="fas fa-external-link-alt"></i></a>)<br><a class="link"   href="https://pjchender.blogspot.com/2017/01/javascript-es6-template-literalstagged.html" >JavaScript ES6 中的模版字符串（template literals）和標籤模版（tagged template<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Key-Sequence-Detection</title>
    <url>/2019/05/20/JS30/JS30-key-sequence-detection/</url>
    <content><![CDATA[<h1 id="12-—-Key-Sequence-Detection"><a href="#12-—-Key-Sequence-Detection" class="headerlink" title="12 — Key Sequence Detection"></a>12 — Key Sequence Detection</h1><p><img src="0_mWHQcWNtUtl_cKPK.png" alt="Key_Sequence_Detection-demoImage"></p>
<h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>輸入特定的密碼，當你輸入完後會出現對應特效，<br>這篇就是介紹如何用JS來做這樣的小效果。</p>
<p><a href="https://des86532.github.io/javascript-30/12_Key-Sequence-Detection/index.html">Key Sequence Detection</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/12_Key-Sequence-Detection" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-設定目標"><a href="#Step1-設定目標" class="headerlink" title="Step1. 設定目標"></a>Step1. 設定目標</h3><p>在這個效果中，目的是在瀏覽器內容中透過鍵盤觸發對應的“密碼”後執行，<br>所以需要設定一個陣列來保存輸入值，並設定好設定的密碼(我設定為<code>neilworld</code>)，<br>接著針對<code>window</code>對這個瀏覽器視窗來做<code>addEventListener(&#39;keydown&#39;..)</code>監聽鍵盤動作。</p>
<h3 id="Step2-執行"><a href="#Step2-執行" class="headerlink" title="Step2. 執行"></a>Step2. 執行</h3><p>當觸發keydown時利用陣列的<code>push()</code>來塞入鍵盤動作所觸發的輸入內容<br>e.key，<br>接著用陣列的<code>splice()</code>來控制密碼陣列，使其不超出密碼長度且堆疊替換掉第一個元素，<br>最後透過陣列的<code>join()</code>及字串的<code>includes()</code>來驗證輸入內容是否與設定密碼相同。</p>
<h2 id="程式備註"><a href="#程式備註" class="headerlink" title="程式備註"></a>程式備註</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const pressed = []; //保存輸入值用的陣列</span><br><span class="line">const secretCode = &#x27;neilworld&#x27;; //設定的密碼</span><br><span class="line">//監聽整個瀏覽器視窗的鍵盤動作</span><br><span class="line">window.addEventListener(&#x27;keydown&#x27;, (e) =&gt; &#123;</span><br><span class="line">  //push觸發的鍵盤輸入值到陣列中</span><br><span class="line">  pressed.push(e.key);</span><br><span class="line">  //透過運算使pressed陣列長度始終與設定密碼相同，且當超出時替換掉陣列第一個元素</span><br><span class="line">  if(pressed.length &gt; secretcode.length) &#123;</span><br><span class="line">      pressed.splice(0,1)</span><br><span class="line">    &#125;</span><br><span class="line">  //判斷輸入值陣列的內容是否與設定密碼相同</span><br><span class="line">  if(pressed.join(&#x27;&#x27;).includes(secretcode)) &#123;</span><br><span class="line">      console.log(&#x27;DING DING!&#x27;)</span><br><span class="line">      cornify_add()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="JavaScript語法-amp-備註"><a href="#JavaScript語法-amp-備註" class="headerlink" title="JavaScript語法&amp;備註"></a>JavaScript語法&amp;備註</h2><h3 id="Array-prototype-splice"><a href="#Array-prototype-splice" class="headerlink" title="Array.prototype.splice()"></a>Array.prototype.splice()</h3><p><code>splice(start, deleteCount, item1, item2, ...)</code>可以對陣列內容過行刪除或新增<br>第一個參數 <strong>start</strong> 為開始位置，若為負值則會返著數（由陣列尾部開始數），<br>第二個參數 <strong>deleteCount</strong> 為移除數量，若為0則不移除、若為負值則沒反應，<br>第三個參數 <strong>item1..</strong> 開始的為加入元素，可從第一個參數位置開始塞陣列元素。<br>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [1,2,3];</span><br><span class="line">arr.splice(0, 1);  //代表從位置0開始刪除1個元素，arr變成[2,3]</span><br><span class="line">arr.splice(-1, 1); //代表從陣列尾巴第一個開始刪除1個元素，arr變成[1,2]</span><br><span class="line">arr.splice(0, -1); //第二個參數不接受複數，arr不變</span><br><span class="line">arr.splice(0, 1, &#x27;4&#x27;) //從位置0刪除1個元素，並從位置0塞入&#x27;4&#x27;，arr變成[&#x27;4&#x27;,2,3]</span><br></pre></td></tr></table></figure>

<p>所以回到練習中的這段code，就會了解為何這樣可以維持陣列長度並堆疊替換第一個元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const pressed = [];</span><br><span class="line">const secretCode = &#x27;guahsu&#x27;</span><br><span class="line">pressed.push(e.key);</span><br><span class="line">pressed.splice(-secretCode.length - 1, pressed.length - secretCode.length);</span><br></pre></td></tr></table></figure>

<p>以此範例來說，第一個參數始終會是-7，第二個參數會是當前輸入陣列長度-6，<br>所以當事件觸發到第七個陣列值（第七個輸入被觸發且push進pressed時），<br>例如<code>[1,2,3,4,5,6,7]</code>時會變成<code>pressed.splice(-7,1)</code>，<br>等於刪除倒數第七個元素（也就是index0第一筆），<br>並透過陣列長度-設定密碼長度來決定刪除數量，使其維持在固定長度，<br>之後每次的push會加在尾段，而splice會刪除第一個元素。</p>
<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" >MDN-Array.prototype.splice()<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="Array-prototype-join"><a href="#Array-prototype-join" class="headerlink" title="Array.prototype.join()"></a>Array.prototype.join()</h3><p>用<code>join()</code>可以把陣列轉為字串，並透過參數設定連接符號。<br>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr = [1,2,3];</span><br><span class="line">arr.join(&#x27;&#x27;); // &#x27;123&#x27;</span><br><span class="line">arr.join(&#x27;@@&#x27;); // &#x27;1@@2@@3&#x27;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join" >Array.prototype.join()<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title="Array.prototype.includes()"></a>Array.prototype.includes()</h3><p>在string跟array都有<code>includes()</code>可以使用，<br>都是去判斷string/array是否包含incudes設定的參數後回傳true/false<br>在這個練習中，因為使用<code>pressed.join(&#39;&#39;).includes(secretCode)</code>;<br>依據處理優先序在pressed.join()時已經被轉字串了，所以這裡的incudes()是屬於string的。</p>
<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" >Array.prototype.includes()<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="探索"><a href="#探索" class="headerlink" title="探索"></a>探索</h2><p>這次雖然只是小小的效果，在寫心得的時候真的也是學到很多以前沒注意的東西，<br>並在寫includes()才也知道string也有這個效果，以往我都只會使用match()，<br>includes()屬於ES6的語法，爬文後整理到關於字串比對的使用還有以下各種方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var str = &#x27;abcde&#x27;;</span><br><span class="line">var check1 = &#x27;ab&#x27;; //包含ab，期待值是true</span><br><span class="line">var check2 = &#x27;ac&#x27;; //包含ac，期待值是false</span><br><span class="line">//用includes()來取得true/false</span><br><span class="line">str.includes(check1); //true</span><br><span class="line">str.includes(check2); //false</span><br><span class="line">//用match()來處理，判斷是否為null來取得true/false</span><br><span class="line">str.match(check1); // object</span><br><span class="line">str.match(check2); // null</span><br><span class="line">//用indexOf()來處理，判斷是否為-1來取得true/false</span><br><span class="line">str.indexOf(check1); // 0</span><br><span class="line">str.indexOf(check2); // -1</span><br><span class="line">//用search()，判斷是否為-1來取得true/false</span><br><span class="line">str.search(check1); // 0</span><br><span class="line">str.search(check2); // -1</span><br><span class="line">//用RegExp正規表示式來取得true/false</span><br><span class="line">var reg1 = /ab/;</span><br><span class="line">var reg2 = /ac/;</span><br><span class="line">reg1.test(str); // true</span><br><span class="line">reg2.test(str); // false</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】LocalStorage</title>
    <url>/2019/05/22/JS30/JS30-localstorage/</url>
    <content><![CDATA[<h1 id="15-—-LocalStorage"><a href="#15-—-LocalStorage" class="headerlink" title="15 — LocalStorage"></a>15 — LocalStorage</h1><p><img src="0_F4AHYzuFvW-PI5YJ.png" alt="localstorage-demoImage"></p>
<h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>這篇介紹LocalStorage的用法，<br>透過一個小菜單來透過localstorage做資料增刪功能。</p>
<p><a href="https://des86532.github.io/javascript-30/15_LocalStorage/index.html">LocalStorage</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/15_LocalStorage" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-基礎設定"><a href="#Step1-基礎設定" class="headerlink" title="Step1. 基礎設定"></a>Step1. 基礎設定</h3><p>作者已經設定好這篇練習用的html與css，<br>主要的架構由一個div包著ul與from，<br>類似Todo-List的清單(ul)與輸入欄位(form)。</p>
<h3 id="Step2-撰寫輸入欄位新增功能"><a href="#Step2-撰寫輸入欄位新增功能" class="headerlink" title="Step2. 撰寫輸入欄位新增功能"></a>Step2. 撰寫輸入欄位新增功能</h3><p>首先取得 form 元素及 ul，並宣告一個空陣列來存放新增資料。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const addItems = document.querySelector(&#x27;.add-items&#x27;);</span><br><span class="line">const itemsList = document.querySelector(&#x27;.plates&#x27;);</span><br><span class="line">const items = [];</span><br></pre></td></tr></table></figure>
<p>接著撰寫一個<code>addItem</code>，參照備註:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function addItem(e) &#123;</span><br><span class="line">// 加上preventDefault()避免每次submit都會重整網頁</span><br><span class="line">e.preventDefault();</span><br><span class="line">// 利用再次querySelector來選取form中的input欄位值</span><br><span class="line">const text = this.querySelector(&#x27;[name=item]&#x27;).value;</span><br><span class="line">// 宣告新增要存入的物件，是輸入的文字與是否勾選的狀態(done)</span><br><span class="line">const item = &#123;</span><br><span class="line">    text,</span><br><span class="line">    done: false</span><br><span class="line">&#125;</span><br><span class="line">console.log(item);</span><br><span class="line">// 清空輸入欄位</span><br><span class="line">this.reset();</span><br><span class="line">&#125;</span><br><span class="line">// 監聽submit按鈕</span><br><span class="line">addItems.addEventListener(&#x27;submit&#x27;, addItem);</span><br></pre></td></tr></table></figure>
<p>這樣每次submit後<code>items</code>就會新增在輸入欄位中的物件了！</p>
<h3 id="Step3-顯示新增的清單"><a href="#Step3-顯示新增的清單" class="headerlink" title="Step3. 顯示新增的清單"></a>Step3. 顯示新增的清單</h3><p>在上一個步驟中所做的只有存於宣告的陣列中，<br>並沒有抓出來顯示在HTML中，所以要寫一個function來顯示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ES6可在function中的參數直接設定參數預設值</span><br><span class="line">function populateList(plates = [], platesList) &#123;</span><br><span class="line">// 使用map搭配join來組成字串，並顯示在html的清單ul中</span><br><span class="line">platesList.innerHTML = plates.map((plate, i) =&gt; &#123;</span><br><span class="line">    return `</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; data-index=$&#123;i&#125; id=&quot;item$&#123;i&#125;&quot; $&#123;plate.done ? &#x27;checked&#x27; : &#x27;&#x27;&#125;/&gt;</span><br><span class="line">        &lt;label for=&quot;item$&#123;i&#125;&quot;&gt;$&#123;plate.text&#125;&lt;/label&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">    `;</span><br><span class="line">&#125;).join(&#x27;&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然後要記得回到<code>addItem</code>中把<code>platesList</code>放在<code>items.push(item)</code>後面，<br>讓每次輸入送出後都會執行這個function重新列出組成的物件字串。</p>
<h3 id="Step4-加入LocalStorage"><a href="#Step4-加入LocalStorage" class="headerlink" title="Step4. 加入LocalStorage"></a>Step4. 加入LocalStorage</h3><p>當完成了新增功能後，就要進入主軸<code>LocalStorage</code>了，<br>這可以讓瀏覽器存取你設定在這個頁面的資訊，<br>所以首先在<code>addItem</code>中修改加入這段：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function addItem(e) &#123;</span><br><span class="line">    populateList(items, itemsList);</span><br><span class="line">    //在localStorage存入item，以key-&gt;value的方式，這邊的話第一個參數就是key，第二個參數就是value，value的部分不能直接存入array，所以轉為JSON的方式存入</span><br><span class="line">    localStorage.setItem(&#x27;items&#x27;, JSON.stringify(items));</span><br><span class="line">    this.reset();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>這裡將items的資訊存在localStorage中一個叫做<code>items</code>的自訂物件中，<br>注意的是存入的物件或陣列必須透過<code>JSON.stringify</code>轉為字串，<br>因為localStorage中的值是string，否則直接存只會得到”object object”的字串。<br>接著修改最一開始宣告的<code>items</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const items = JSON.parse(localStorage.getItem(&#x27;items&#x27;)) || [];</span><br></pre></td></tr></table></figure>
<p>讓頁面在重整後，先判斷localStorage中是否有存放<code>items</code>物件，沒有的話則給空陣列。</p>
<h3 id="Step5-儲存checkbox狀態"><a href="#Step5-儲存checkbox狀態" class="headerlink" title="Step5. 儲存checkbox狀態"></a>Step5. 儲存checkbox狀態</h3><p>這裡要新增一個function toggleDone並監聽<code>itemsList</code>的click動作，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function toggleDone(e) &#123;</span><br><span class="line">// 偵測進來的點擊是input(checkbox)才動作</span><br><span class="line">if (!e.target.matches(&#x27;input&#x27;)) return;</span><br><span class="line">// 取得checkbox的data-index值</span><br><span class="line">const el = e.target;</span><br><span class="line">const index = el.dataset.index;</span><br><span class="line">// 利用！來使done的狀態在true/false間切換</span><br><span class="line">items[index].done = !items[index].done;</span><br><span class="line">// 將更新後的狀態寫入localStorage中</span><br><span class="line">localStorage.setItem(&#x27;items&#x27;, JSON.stringify(items));</span><br><span class="line">// 更新列表</span><br><span class="line">populateList(items, itemsList);</span><br><span class="line">&#125;</span><br><span class="line">// 監聽click</span><br><span class="line">itemsList.addEventListener(&#x27;click&#x27;, toggleDone);</span><br></pre></td></tr></table></figure>
<h2 id="JavaScript語法-amp-備註"><a href="#JavaScript語法-amp-備註" class="headerlink" title="JavaScript語法&amp;備註"></a>JavaScript語法&amp;備註</h2><h3 id="Array-prototype-map"><a href="#Array-prototype-map" class="headerlink" title="Array.prototype.map()"></a>Array.prototype.map()</h3><p>map方法會建立一個新的陣列，其內容為原陣列的每一個元素經由回呼函式運算後所回傳的結果之集合，<br>map裡面可以放入function來對前面的array進行處理</p>
<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/map" >map-MDN<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="LocalStorage"><a href="#LocalStorage" class="headerlink" title="LocalStorage"></a>LocalStorage</h3><blockquote>
<p><a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/API/Storage/LocalStorage" >localstorage-MDN<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Mouse Move Shadow</title>
    <url>/2019/05/23/JS30/JS30-mouse-move-shadow/</url>
    <content><![CDATA[<h1 id="16-—-Mouse-Move-Shadow"><a href="#16-—-Mouse-Move-Shadow" class="headerlink" title="16 — Mouse Move Shadow"></a>16 — Mouse Move Shadow</h1><p><img src="0_LFqekGOPc0xBWcaW.png" alt="mouse_move_shadow"></p>
<h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>透過textShadow讓文字的陰影隨滑鼠位置偏移，<br>並稍微帶到ES6的解構賦值的用法。</p>
<p><a href="https://des86532.github.io/javascript-30/16_Mouse-Move-Shadow/index.html">Mouse Move Shadow</a><br><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/16_Mouse-Move-Shadow" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-設定目標區域與基本偏移量"><a href="#Step1-設定目標區域與基本偏移量" class="headerlink" title="Step1. 設定目標區域與基本偏移量"></a>Step1. 設定目標區域與基本偏移量</h3><p>抓取HTML中的 <strong>hero</strong> 與 <strong>woah</strong> 做為目標區域<br>設定基本偏移基準 <strong>walk = 600</strong></p>
<h3 id="Step2-建立觸發條件與事件"><a href="#Step2-建立觸發條件與事件" class="headerlink" title="Step2. 建立觸發條件與事件"></a>Step2. 建立觸發條件與事件</h3><p>設定 <code>hero.addEventListener(&#39;mousemove&#39;, shadow)</code><br>觸發事件備註：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function play(e) &#123;</span><br><span class="line">  // 透過解構賦值取得並設定資訊</span><br><span class="line">  const &#123; offsetHeight: height,</span><br><span class="line">          offsetWidth: width &#125; = hero;</span><br><span class="line">  //等同於這樣</span><br><span class="line">    const width = hero.offsetWidth;</span><br><span class="line">    const height = hero.offsetHeight;</span><br><span class="line">  let &#123; offsetX: x,</span><br><span class="line">        offsetY: y  &#125; = e;</span><br><span class="line">  //等同於這樣</span><br><span class="line">    let x = e.offsetX</span><br><span class="line">    let y = e.offsetY  </span><br><span class="line">  // 如果在目標區域外，則在加上目標座標值</span><br><span class="line">  if (this !== e.target) &#123;</span><br><span class="line">    x = x + e.target.offsetLeft;</span><br><span class="line">    y = y + e.target.offsetTop;</span><br><span class="line">  &#125;</span><br><span class="line">  // 四捨五入最終偏移值</span><br><span class="line">  const xWalk = Math.round((x / width * walk) - (walk/2));</span><br><span class="line">  const yWalk = Math.round((y / height * walk) - (walk/2));</span><br><span class="line">  console.log(xWalk, yWalk);</span><br><span class="line">  // 使用textShadow來設定文字陰影</span><br><span class="line">  woah.style.textShadow = `</span><br><span class="line">    $&#123;xWalk&#125;px $&#123;yWalk&#125;px 0px rgba(0, 0, 0, 0.5),</span><br><span class="line">    $&#123;xWalk * -1&#125;px $&#123;yWalk&#125;px 0px rgba(0, 0, 0, 0.5),</span><br><span class="line">    $&#123;yWalk&#125;px $&#123;xWalk * -1&#125;px 0px rgba(0, 0, 0, 0.5),</span><br><span class="line">    $&#123;yWalk * -1&#125;px $&#123;xWalk&#125;px 0px rgba(0, 0, 0, 0.5)</span><br><span class="line">    `</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Javascript語法-amp-備註"><a href="#Javascript語法-amp-備註" class="headerlink" title="Javascript語法&amp;備註"></a>Javascript語法&amp;備註</h2><p>解構賦值(<strong>Destructuring assignment</strong>)<br>透過解構賦值，可以把直接把物件/陣列中的值塞入變數中，<br>擷取一小段程式碼做說明：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 下面這段等同於 </span><br><span class="line">const height = hero.offsetHeight;</span><br><span class="line">const &#123; offsetHeight: height &#125; = hero;</span><br><span class="line">// 下面這段等同於 </span><br><span class="line">let x = e.offsetX;</span><br><span class="line">let &#123; offsetX: x &#125; = e;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" >MDN-Destructuring_assignment<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="Math-round"><a href="#Math-round" class="headerlink" title="Math.round"></a>Math.round</h3><p>可以將內容的數值進行四捨五入的動作。</p>
<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round" >MDN-Math<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="CSS語法備註"><a href="#CSS語法備註" class="headerlink" title="CSS語法備註"></a>CSS語法備註</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* offset-x | offset-y | blur-radius | color */</span><br><span class="line">text-shadow: 1px 1px 2px black;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow" >MDN-text_shadow<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Slide in on Scroll</title>
    <url>/2019/05/21/JS30/JS30-slide-in-on-scroll/</url>
    <content><![CDATA[<h1 id="13-—-Slide-in-on-Scroll"><a href="#13-—-Slide-in-on-Scroll" class="headerlink" title="13 — Slide in on Scroll"></a>13 — Slide in on Scroll</h1><p><img src="0_TFpHtpMtG8Zm-Uru.png" alt="Slide_in_on_Scroll-demoImage"></p>
<h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>這篇介紹當滾動視窗到定點時動畫滑入圖片的效果</p>
<p><a href="https://des86532.github.io/javascript-30/13_Slide-in-on-Scroll/index.html">Slide in on Scroll</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/13_Slide-in-on-Scroll" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-基礎設定"><a href="#Step1-基礎設定" class="headerlink" title="Step1. 基礎設定"></a>Step1. 基礎設定</h3><p>作者已經在所有的圖片中加入了待會會用到的class :</p>
<ol>
<li>align-right / align-left : 滑入效果用（左/右）</li>
<li>slide-in : JavaScript抓取用，並已經將相關的動畫滑入效果寫好。</li>
</ol>
<h3 id="Step2-建立觸發條件-並監聽滾動事件"><a href="#Step2-建立觸發條件-並監聽滾動事件" class="headerlink" title="Step2. 建立觸發條件,並監聽滾動事件"></a>Step2. 建立觸發條件,並監聽滾動事件</h3><p>目的是使滾動視窗到定點時顯示效果，<br>所以要監聽的是整個視窗，用window，事件選用scroll，<br>但是如果單純使用scroll來操作的話，每次的畫面滾動都會有大量事件被觸發，<br>會對效能上造成影響，所以作者多寫了一個debounce來使觸發間隔為20毫秒以上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function debounce(func, wait = 20, immediate = true) &#123;</span><br><span class="line">    var timeout;</span><br><span class="line">    return function () &#123;</span><br><span class="line">    var context = this, args = arguments;</span><br><span class="line">    var later = function () &#123;</span><br><span class="line">        timeout = null;</span><br><span class="line">        if (!immediate) func.apply(context, args);</span><br><span class="line">    &#125;;</span><br><span class="line">    var callNow = immediate &amp;&amp; !timeout;</span><br><span class="line">    clearTimeout(timeout);</span><br><span class="line">    timeout = setTimeout(later, wait);</span><br><span class="line">    if (callNow) func.apply(context, args);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以監聽事件就會寫成<code>window.addEventListener(&#39;scroll&#39;, debounce(checkSlide));</code>。</p>
<h3 id="Step3-設定觸發後的事件內容"><a href="#Step3-設定觸發後的事件內容" class="headerlink" title="Step3. 設定觸發後的事件內容"></a>Step3. 設定觸發後的事件內容</h3><p>在一開始先取得所有<code>.slide-in</code>的圖片元素，使用<code>querySelectorAll</code>，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const sliderImages = document.querySelectorAll(&#x27;.slide-in&#x27;);</span><br></pre></td></tr></table></figure>
<p>接著編寫每次<code>scroll</code>觸發的<code>checkSlide</code> function:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function checkslide(e) &#123;</span><br><span class="line">    sliderImages.forEach(sliderImage =&gt; &#123;</span><br><span class="line">    // window.scrollY = 捲動到最上面的時候為0，最上面為起始點，往下捲動逐漸增加   </span><br><span class="line">    // window.innerHeight = 為當前畫面的高度，除非調整視窗大小，不然不會改變</span><br><span class="line">    const slideInAt = (window.scrollY + window.innerHeight) </span><br><span class="line">    // 元素距離外層容器上方的距離  + 元素的高度</span><br><span class="line">    const imagebottom = sliderImage.offsetTop + (sliderImage.height /2);</span><br><span class="line">    //這個寫法的話，有經過的圖片全部都會顯示</span><br><span class="line">    //影片中的教學，超過畫面太多的圖片會被remove active</span><br><span class="line">    if(slideInAt &gt; imagebottom) &#123;</span><br><span class="line">        sliderImage.classList.add(&#x27;active&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JavaScript語法備註"><a href="#JavaScript語法備註" class="headerlink" title="JavaScript語法備註"></a>JavaScript語法備註</h2><h3 id="Window-scrollY"><a href="#Window-scrollY" class="headerlink" title="Window.scrollY"></a>Window.scrollY</h3><p>目前瀏覽器視窗已滾動的Y軸（垂直位置）</p>
<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY" >MDN-Window.scrollY<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="Window-innerHeight"><a href="#Window-innerHeight" class="headerlink" title="Window.innerHeight"></a>Window.innerHeight</h3><p>目前瀏覽器視窗的高度</p>
<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight" >MDN-Window.innerHeight<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="HTMLElement-offsetTop"><a href="#HTMLElement-offsetTop" class="headerlink" title="HTMLElement.offsetTop"></a>HTMLElement.offsetTop</h3><p>返回指定元素相對於有父元素(offsetParent)中的頂端位置，<br>以此練習來說，sliderImage的父元素就是window。</p>
<h3 id="HTMLElement-dataset"><a href="#HTMLElement-dataset" class="headerlink" title="HTMLElement.dataset"></a>HTMLElement.dataset</h3><p>透過<code>dataset</code>可以取回在HTML中設置的<code>data-*</code>內容，<br><strong>注意使用dataset時property不用再將加上data-開頭</strong>，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;test&quot; data-greet=&quot;hi&quot;&gt;&lt;/div&gt;</span><br><span class="line">document.querySelector(&#x27;.test&#x27;).dataset.greet; // hi</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dataset" >MDN-HTMLElement.dataset<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Sort Without Articles</title>
    <url>/2019/05/24/JS30/JS30-sort-without-articles/</url>
    <content><![CDATA[<h1 id="17-—-Sort-Without-Articles"><a href="#17-—-Sort-Without-Articles" class="headerlink" title="17 — Sort Without Articles"></a>17 — Sort Without Articles</h1><p><img src="0_f5N27GRM46o-5Mx7.png" alt="sort_without_articles"></p>
<h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>介紹如何將陣列在排除部分文字的情況下排序。</p>
<p><a href="https://des86532.github.io/javascript-30/17_Sort-Without-Articles/index.html">Sort Without Articles</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/17_Sort-Without-Articles" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-建立篩選的function"><a href="#Step1-建立篩選的function" class="headerlink" title="Step1. 建立篩選的function"></a>Step1. 建立篩選的function</h3><p>使用replace搭配正規表示式來將包含了a, the, an開頭的文字替換為空白。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function strip(bandName) &#123;</span><br><span class="line">    return bandName.replace(/^(a |the |an )/i, &#x27;&#x27;).trim();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Regular_Expressions" >MDN-RegExp<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://regex101.com/" >RegExp-Test<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="Step2-對目標陣列進行篩選與排序"><a href="#Step2-對目標陣列進行篩選與排序" class="headerlink" title="Step2. 對目標陣列進行篩選與排序"></a>Step2. 對目標陣列進行篩選與排序</h2><p>這裡將原本的寫法與簡寫放在一起，可以發現整體簡潔不少。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//原本的寫法</span><br><span class="line">const sortedBands = bands.sort(function(a, b)&#123;</span><br><span class="line">    if(strip(a) &gt; strip(b)) &#123;</span><br><span class="line">        return 1;</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">//利用箭頭函數與三元運算式的簡寫：</span><br><span class="line">const sortedBands = bands.sort((a, b) =&gt; (strip(a) &gt; strip(b)) ? 1 : -1);</span><br></pre></td></tr></table></figure>

<h3 id="Step3-把排序完的渲染到HTML中"><a href="#Step3-把排序完的渲染到HTML中" class="headerlink" title="Step3. 把排序完的渲染到HTML中"></a>Step3. 把排序完的渲染到HTML中</h3><p>使用map與join來組成<code>&lt;li&gt;</code>元素放置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.querySelector(&#x27;#bands&#x27;).innerHTML = </span><br><span class="line">      sortedBands.map(band =&gt; `&lt;li&gt;$&#123;band&#125;&lt;/li&gt;`).join(&#x27;&#x27;);</span><br></pre></td></tr></table></figure>
<p>使用join(”)修改連結符號為空白, 否則原先陣列的分隔符號是,也會一併渲染在html中。</p>
<h2 id="探索"><a href="#探索" class="headerlink" title="探索"></a>探索</h2><p>這邊做了下match,includes,與正規表達的比較</p>
<h3 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string.match (regexp)</span><br></pre></td></tr></table></figure>
<p>比對字串與規則運算式，然後傳回包含該搜尋結果的陣列。<br>結果會以陣列顯示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str =  &quot;azcafAJAC&quot;;</span><br><span class="line">let re = /[a-c]/;</span><br><span class="line">let result = str.match(re)</span><br></pre></td></tr></table></figure>
<p>輸出結果 ： result = [a]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let str = &quot;azcafAJAC&quot;;</span><br><span class="line">let re = /[a-c]/g;</span><br><span class="line">let result = str.match(re)</span><br></pre></td></tr></table></figure>
<p>輸出結果 ： result = [a,c,a]</p>
<h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr.includes(searchElement[, fromIndex])</span><br></pre></td></tr></table></figure>
<p>傳回布林值，指出字串物件中是否包含傳入的字串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Returns true </span><br><span class="line">&quot;abcde&quot;.includes(&quot;cd&quot;)</span><br><span class="line">&quot;abcde&quot;.includes(&quot;cd&quot;, 2)</span><br><span class="line">// Returns false</span><br><span class="line">&quot;abcde&quot;.includes(&quot;CD&quot;)</span><br><span class="line">&quot;abcde&quot;.includes(&quot;cd&quot;, 3)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Speech Synthesis</title>
    <url>/2019/05/29/JS30/JS30-speech-synthesis/</url>
    <content><![CDATA[<h1 id="23-—-Speech-Synthesis"><a href="#23-—-Speech-Synthesis" class="headerlink" title="23 — Speech Synthesis"></a>23 — Speech Synthesis</h1><p><img src="0_B4SGqxysgYQFnClj.png" alt="speech synthesis"></p>
<h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>使用<code>SpeechSynthesisUtterance</code>及<code>speechSynthesis</code>來使文字轉語音。<br>上次有做過語音轉文字的練習<br>這次則是要使用文字轉語音，透過介面中的輸入欄位來轉語音播放，<br>並可透過設定好的控制條來變更語音速率/音準。</p>
<p><a href="https://des86532.github.io/javascript-30/23_Speech-Synthesis/index.html">Speech Synthesis</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/23_Speech-Synthesis" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-取得頁面元素並設置SpeechSynthesisUtterance"><a href="#Step1-取得頁面元素並設置SpeechSynthesisUtterance" class="headerlink" title="Step1. 取得頁面元素並設置SpeechSynthesisUtterance"></a>Step1. 取得頁面元素並設置SpeechSynthesisUtterance</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const msg = new SpeechSynthesisUtterance();</span><br><span class="line">let voices = [];</span><br><span class="line">const voicesDropdown = document.querySelector(&#x27;[name=&quot;voice&quot;]&#x27;);</span><br><span class="line">const options = document.querySelectorAll(&#x27;[type=&quot;range&quot;], [name=&quot;text&quot;]&#x27;);</span><br><span class="line">const speakButton = document.querySelector(&#x27;#speak&#x27;);</span><br><span class="line">const stopButton = document.querySelector(&#x27;#stop&#x27;);</span><br><span class="line">// 使html中的輸入欄位成為SpeechSynthesisUtterance要使用的值</span><br><span class="line">msg.text = document.querySelector(&#x27;[name=&quot;text&quot;]&#x27;).value</span><br></pre></td></tr></table></figure>

<h3 id="Step2-設定語音播放語系選單"><a href="#Step2-設定語音播放語系選單" class="headerlink" title="Step2. 設定語音播放語系選單"></a>Step2. 設定語音播放語系選單</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 取得語系資訊 </span><br><span class="line">function populateVoices() &#123;</span><br><span class="line">  voices = this.getVoices();</span><br><span class="line">  // 將所有語系塞進下拉選單中</span><br><span class="line">  voicesDropdown.innerHTML = voices</span><br><span class="line">    // 使用filter篩選出包含zh及en的語系</span><br><span class="line">    .filter(voice =&gt; voice.lang.includes(&#x27;zh&#x27;) || voice.lang.includes(&#x27;en&#x27;))</span><br><span class="line">    // 篩選後的array透過map把資料組成html</span><br><span class="line">    .map(voice =&gt; `&lt;option value=$&#123;voice.name&#125;&gt;$&#123;voice.name&#125; ($&#123;voice.lang&#125;)&lt;/option&gt;`)</span><br><span class="line">    // 用join來合併且消除原本陣列的逗點</span><br><span class="line">    .join(&#x27;&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">// 監聽語音清單變更後進行語系清單的更新</span><br><span class="line">speechSynthesis.addEventListener(&#x27;voiceschanged&#x27;, populateVoices);</span><br></pre></td></tr></table></figure>

<h3 id="Step3-播放與功能設定"><a href="#Step3-播放與功能設定" class="headerlink" title="Step3. 播放與功能設定"></a>Step3. 播放與功能設定</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 播放切換</span><br><span class="line">function toggle(starOver = true) &#123;</span><br><span class="line">  speechSynthesis.cancel();</span><br><span class="line">  if (starOver) &#123;</span><br><span class="line">    speechSynthesis.speak(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 設定選擇的發音語系</span><br><span class="line">function setVoice() &#123;</span><br><span class="line">  msg.voice = voices.find(voice =&gt; voice.name === this.value);</span><br><span class="line">  toggle();</span><br><span class="line">&#125;</span><br><span class="line">// 設定速率跟音準</span><br><span class="line">function setOption() &#123;</span><br><span class="line">  // 傳入的變數名稱與SpeechSynthesisUtterance本身的物件相同</span><br><span class="line">  // 所以可以透過這種方式來直接用</span><br><span class="line">  msg[this.name] = this.value;</span><br><span class="line">  toggle();</span><br><span class="line">&#125;</span><br><span class="line">// 監聽語系選單，選擇後切換語系</span><br><span class="line">voicesDropdown.addEventListener(&#x27;change&#x27;, setVoice);</span><br><span class="line">// 監聽速率跟音準控制條，移動後設定</span><br><span class="line">options.forEach(option =&gt; option.addEventListener(&#x27;change&#x27;, setOption));</span><br><span class="line">// 播放按鈕</span><br><span class="line">speakButton.addEventListener(&#x27;click&#x27;, toggle);</span><br><span class="line">// 停止按鈕</span><br><span class="line">stopButton.addEventListener(&#x27;click&#x27;, () =&gt; toggle(false));</span><br></pre></td></tr></table></figure>

<h2 id="語法-amp-備註"><a href="#語法-amp-備註" class="headerlink" title="語法&amp;備註"></a>語法&amp;備註</h2><h3 id="SpeechSynthesisUtterance"><a href="#SpeechSynthesisUtterance" class="headerlink" title="SpeechSynthesisUtterance"></a>SpeechSynthesisUtterance</h3><p>可以設置語音服務應讀取的文字內容及播放的細節(語系、速率、音量..等屬性)</p>
<p><a class="link"   href="https://developer.mozilla.org/zh-TW/docs/Web/API/SpeechSynthesisUtterance" >MDN-Element.getBoundingClientRect<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="SpeechSynthesis"><a href="#SpeechSynthesis" class="headerlink" title="SpeechSynthesis"></a>SpeechSynthesis</h3><p>執行語音服務的主要功能，包含了播放、暫停..等屬性</p>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesis" >MDN-SpeechSynthesis<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Sticky Nav</title>
    <url>/2019/05/30/JS30/JS30-sticky-nav/</url>
    <content><![CDATA[<h1 id="24-—-Sticky-Nav"><a href="#24-—-Sticky-Nav" class="headerlink" title="24 — Sticky Nav"></a>24 — Sticky Nav</h1><p><img src="0_5ZMxzdSVSKUWuVoo.png" alt="sticky nav"></p>
<h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>透過CSS的<code>position:fixed</code>與JavaScript的classList來製作網站常見的置頂選單。</p>
<p><a href="https://des86532.github.io/javascript-30/24_Sticky-Nav/index.html">Sticky Nav</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/24_Sticky-Nav" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-取得頁面元素並偵測選單到頂部的高度"><a href="#Step1-取得頁面元素並偵測選單到頂部的高度" class="headerlink" title="Step1. 取得頁面元素並偵測選單到頂部的高度"></a>Step1. 取得頁面元素並偵測選單到頂部的高度</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 取得nav元素</span><br><span class="line">const nav = document.querySelector(&#x27;#main&#x27;);</span><br><span class="line">// 透過offsetTop取得nav頂部到整個page的頂部距離</span><br><span class="line">let topOfNav = nav.offsetTop;</span><br></pre></td></tr></table></figure>

<h3 id="Step2-對CSS增加樣式fixed-nav"><a href="#Step2-對CSS增加樣式fixed-nav" class="headerlink" title="Step2. 對CSS增加樣式fixed-nav"></a>Step2. 對CSS增加樣式fixed-nav</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 當有fixed-nav時，把site-wrap縮放回1，讓整體有放大效果*/</span><br><span class="line">.fixed-nav .site-wrap &#123;</span><br><span class="line">  transform: scale(1);</span><br><span class="line">&#125;</span><br><span class="line">/* 當有fixed-nav時，把nav改為fixed並加上陰影*/</span><br><span class="line">.fixed-nav nav &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  box-shadow: 0 5px rgba(0,0,0,0.1);</span><br><span class="line">&#125;</span><br><span class="line">/* 當有fixed-nav時，把logo寬度增加，使其顯示出來*/</span><br><span class="line">.fixed-nav li.logo &#123;</span><br><span class="line">  max-width: 500px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Step3-進行網頁捲軸高度偵測，決定是否變更選單樣式"><a href="#Step3-進行網頁捲軸高度偵測，決定是否變更選單樣式" class="headerlink" title="Step3. 進行網頁捲軸高度偵測，決定是否變更選單樣式"></a>Step3. 進行網頁捲軸高度偵測，決定是否變更選單樣式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function fixNav() &#123;</span><br><span class="line">  // 如果目前捲軸的高度高過於nav的頂部</span><br><span class="line">  if (window.scrollY &gt;= topOfNav) &#123;</span><br><span class="line">    /* 設定一個padding-top並增加fixed-nav</span><br><span class="line">        因為當position被設定為fixed時，將不會再佔據原有的高度</span><br><span class="line">        所以要動態的增加一個offsetHeight來將內容部位增高避免怪異的彈跳遮擋現象  */</span><br><span class="line">    document.body.style.paddingTop = nav.offsetHeight + &#x27;px&#x27;;</span><br><span class="line">    document.body.classList.add(&#x27;fixed-nav&#x27;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // 還原padding-top並移除fixed-nav</span><br><span class="line">    document.body.style.paddingTop = 0;</span><br><span class="line">    document.body.classList.remove(&#x27;fixed-nav&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 監聽scroll動作</span><br><span class="line">window.addEventListener(&#x27;scroll&#x27;, fixNav);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Stripe Follow Along Nav</title>
    <url>/2019/06/01/JS30/JS30-stripe-follow-along-nav/</url>
    <content><![CDATA[<h1 id="26-—-Stripe-Follow-Along-Nav"><a href="#26-—-Stripe-Follow-Along-Nav" class="headerlink" title="26 — Stripe Follow Along Nav"></a>26 — Stripe Follow Along Nav</h1><p><img src="0_T9q4jNM686_LB36u.png" alt="Stripe Follow Along Nav"></p>
<h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>製作一個隨著滑鼠移動展開的選單效果。</p>
<p><a href="https://des86532.github.io/javascript-30/26_Stripe-Follow-Along-Nav/index.html">Stripe Follow Along Nav</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/26_Stripe-Follow-Along-Nav" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-取得頁面元素與建立基本事件框架"><a href="#Step1-取得頁面元素與建立基本事件框架" class="headerlink" title="Step1. 取得頁面元素與建立基本事件框架"></a>Step1. 取得頁面元素與建立基本事件框架</h3><p>取得頁面元素並分析此次效果僅有兩個事件<code>mouseenter</code>與<code>mouseleave</code>，<br>確定好知道目前要做的範圍，就先把function框建立好。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 頁面元素取得</span><br><span class="line">const triggers = document.querySelectorAll(&#x27;.cool &gt; li&#x27;);</span><br><span class="line">const background  = document.querySelector(&#x27;.dropdownBackground&#x27;);</span><br><span class="line">const nav  = document.querySelector(&#x27;.top&#x27;);</span><br><span class="line">// 滑鼠移入事件</span><br><span class="line">function mousein() &#123;</span><br><span class="line">&#125;</span><br><span class="line">// 滑鼠移出事件</span><br><span class="line">function mouseout() &#123;</span><br><span class="line">&#125;</span><br><span class="line">// 為每個選單加上滑鼠移入/移出事件監聽</span><br><span class="line">triggers.forEach(trigger =&gt; trigger.addEventListener(&#x27;mouseenter&#x27;, mousein));</span><br><span class="line">triggers.forEach(trigger =&gt; trigger.addEventListener(&#x27;mouseleave&#x27;, mouseout));</span><br></pre></td></tr></table></figure>

<h3 id="Step2-撰寫移入事件"><a href="#Step2-撰寫移入事件" class="headerlink" title="Step2. 撰寫移入事件"></a>Step2. 撰寫移入事件</h3><p>編寫當滑鼠移入時被觸發的事件，備註如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 滑鼠移入事件</span><br><span class="line">function mousein() &#123;</span><br><span class="line">  // 替觸發的li加上一個class作為標示已移入</span><br><span class="line">  this.classList.add(&#x27;trigger-enter&#x27;);</span><br><span class="line">  // 當移入時，先檢查是否有trigger-enter這個className</span><br><span class="line">  // 若有的話在150毫秒後新增trigger-enter-active這個class</span><br><span class="line">  setTimeout(() =&gt; this.classList.contains(&#x27;trigger-enter&#x27;) &amp;&amp; this.classList.add(&#x27;trigger-enter-active&#x27;), 150);</span><br><span class="line">  // 新增open這個class</span><br><span class="line">  background.classList.add(&#x27;open&#x27;);</span><br><span class="line">  // 取得滑入元素底下的dropdown</span><br><span class="line">  const dropdown = this.querySelector(&#x27;.dropdown&#x27;);</span><br><span class="line">  // 取得這個dropdown的定位與大小資訊</span><br><span class="line">  const dropdownCoords = dropdown.getBoundingClientRect();</span><br><span class="line">  // 取得nav的定位與大小資訊</span><br><span class="line">  const navCoords = nav.getBoundingClientRect();</span><br><span class="line">  // 設定將要給白色滑動背景使用的定位與大小資訊</span><br><span class="line">  const coords =</span><br><span class="line">    &#123;</span><br><span class="line">      height: dropdownCoords.height,</span><br><span class="line">      width: dropdownCoords.width,</span><br><span class="line">      // 要減去nav的定位，避免上方區塊增加時造成的錯位</span><br><span class="line">      top: dropdownCoords.top - navCoords.top,</span><br><span class="line">      left: dropdownCoords.left - navCoords.left</span><br><span class="line">    &#125;;</span><br><span class="line">    // 設定白色滑動背景的定位與大小</span><br><span class="line">    background.style.setProperty(&#x27;width&#x27;, `$&#123;coords.width&#125;px`);</span><br><span class="line">    background.style.setProperty(&#x27;height&#x27;, `$&#123;coords.height&#125;px`);</span><br><span class="line">    background.style.setProperty(&#x27;transform&#x27;, `translate($&#123;coords.left&#125;px, $&#123;coords.top&#125;px)`);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Step3-撰寫移出事件"><a href="#Step3-撰寫移出事件" class="headerlink" title="Step3. 撰寫移出事件"></a>Step3. 撰寫移出事件</h3><p>簡單的移除被加上的class：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function mouseout() &#123;</span><br><span class="line">   this.classList.remove(‘trigger-enter’, ‘trigger-enter-active’);</span><br><span class="line">   background.classList.remove(‘open’);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><p>利用JS取得定位及大小資訊，並在適時置入對應元素中，產生的動畫效果還得靠CSS，這練習主要是靠這兩個來產生效果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.dropdownBackground &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">position: absolute;</span><br><span class="line">background: #fff;</span><br><span class="line">border-radius: 4px;</span><br><span class="line">box-shadow: 0 50px 100px rgba(50, 50, 93, .1), 0 15px 35px rgba(50, 50, 93, .15), 0 5px 15px rgba(0, 0, 0, .1);</span><br><span class="line">transition: all 0.3s, opacity 0.1s, transform 0.2s;</span><br><span class="line">transform-origin: 50% 0;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: center;</span><br><span class="line">opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line">.dropdownBackground.open &#123;</span><br><span class="line">  opacity: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Speech Detection</title>
    <url>/2019/05/27/JS30/JS30-speech-detection/</url>
    <content><![CDATA[<h1 id="20-—-Speech-Detection"><a href="#20-—-Speech-Detection" class="headerlink" title="20 — Speech Detection"></a>20 — Speech Detection</h1><h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>利用<code>SpeechRecognition</code>來做語音識別，<br>並透過<code>interimResults</code>來輸出識別的結果。</p>
<p><a href="https://des86532.github.io/javascript-30/20_Speech-Detection/index.html">Speech Detection</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/20_Speech-Detection" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-啟動Local-Server"><a href="#Step1-啟動Local-Server" class="headerlink" title="Step1. 啟動Local Server"></a>Step1. 啟動Local Server</h3><p>這個練習需要使用到 local server，<br>如果你已經有一個可在本機 run 起來的 server 可以直接使用，<br>或在這層資料夾底下運行<code>npm install</code>來安裝<code>browser-sync</code>，<br>安裝完成後可以透過指令 npm start 來啟動 localserver(預設port3000)，<br>npm指令需要下載node.js來使用</p>
<h3 id="Step2-將SpeechRecognition建立起來"><a href="#Step2-將SpeechRecognition建立起來" class="headerlink" title="Step2. 將SpeechRecognition建立起來"></a>Step2. 將SpeechRecognition建立起來</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 將全域環境中的SpeechRecognition指好(依據不同瀏覽器)</span><br><span class="line">window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;</span><br><span class="line">// 建立一個變數recognition來放為語音識別功能</span><br><span class="line">const recognition = new SpeechRecognition();</span><br><span class="line">// 讓語音識別回傳識別後的資訊（預設為false)</span><br><span class="line">recognition.interimResults = true;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/zh-TW/docs/Web/API/SpeechRecognition" >MDN-SpeechRecognition<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="Step3-把輸出區域準備好"><a href="#Step3-把輸出區域準備好" class="headerlink" title="Step3. 把輸出區域準備好"></a>Step3. 把輸出區域準備好</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 建立一個p元素在html設定好的文字區中</span><br><span class="line">let p = document.createElement(&#x27;p&#x27;);</span><br><span class="line">const words = document.querySelector(&#x27;.words&#x27;);</span><br><span class="line">words.appendChild(p);</span><br></pre></td></tr></table></figure>

<h3 id="Step4-對識別系統做監聽"><a href="#Step4-對識別系統做監聽" class="headerlink" title="Step4. 對識別系統做監聽"></a>Step4. 對識別系統做監聽</h3><p>識別回傳的資料是<code>NodeList</code>，所以要用<code>map</code>操作得先轉<code>array</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 監聽識別回傳</span><br><span class="line">recognition.addEventListener(&#x27;result&#x27;, e =&gt; &#123;</span><br><span class="line">  // 將回傳資料先轉為array來操作</span><br><span class="line">  const transcript = Array.from(e.results)</span><br><span class="line">    // 透過map取得回傳陣列中的第0筆</span><br><span class="line">    .map(result =&gt; result[0])</span><br><span class="line">    // 在取得第0筆中的transcript</span><br><span class="line">    .map(result =&gt; result.transcript)</span><br><span class="line">    // 用join把連結符號消掉</span><br><span class="line">    .join(&#x27;&#x27;)</span><br><span class="line">  // 把回傳內容塞到p元素中</span><br><span class="line">  p.textContent = transcript;</span><br><span class="line">  // 如果回傳內容已經結束（一段話的結尾）在建立一個新的p元素來放下一段文字</span><br><span class="line">  if (e.results[0].isFinal) &#123;</span><br><span class="line">    p = document.createElement(&#x27;p&#x27;);</span><br><span class="line">    words.appendChild(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 監聽如果語音識別結束，則在開啟一次新的識別</span><br><span class="line">recognition.addEventListener(&#x27;end&#x27;, recognition.start);</span><br><span class="line">// 開始識別</span><br><span class="line">recognition.start();</span><br></pre></td></tr></table></figure>

<h2 id="JavaScript語法-amp-備註"><a href="#JavaScript語法-amp-備註" class="headerlink" title="JavaScript語法&amp;備註"></a>JavaScript語法&amp;備註</h2><h3 id="appendChild"><a href="#appendChild" class="headerlink" title="appendChild"></a>appendChild</h3><p>加入一個新的標籤</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let node  = document.createElement(&#x27;p&#x27;)</span><br><span class="line">let textnode = document.createTextNode(&#x27;Water&#x27;)</span><br><span class="line">node.appendChild(textnode)     //此時node已改變</span><br><span class="line">document.getElementById(&#x27;mylist&#x27;).appendChild(node)</span><br><span class="line">//此時會創立一個新的&lt;p&gt;Water&lt;/p&gt; 在class=&quot;mylist&quot; 裡面</span><br><span class="line">let node = document.getElementById(&#x27;mylist1&#x27;).lastChild</span><br><span class="line">document.getElementById(&#x27;mylist2&#x27;).appendChild(node)</span><br><span class="line">//class=&quot;mylist1&quot;中的最後一個元素會被移動到class=&quot;mylist2&quot;中</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a class="link"   href="https://www.w3schools.com/jsref/met_node_appendchild.asp" >MDN-appendChild<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://www.w3schools.com/jsref/met_document_createtextnode.asp" >MDN-createTextNode<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Type Ahead</title>
    <url>/2019/05/15/JS30/JS30-type-ahead/</url>
    <content><![CDATA[<h1 id="06-—-Type-Ahead"><a href="#06-—-Type-Ahead" class="headerlink" title="06 — Type Ahead"></a>06 — Type Ahead</h1><p><img src="0_YNu2ujUHBDJIj2WM.png" alt="Type_Ahead-demoImage"></p>
<h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>利用<code>fetch()</code>來取回json檔案，並透過<code>filter()</code>及<code>RegExp()</code>等語法來製作搜尋即時顯示關聯效果！</p>
<p><a href="https://des86532.github.io/javascript-30/06_Type-Ahead/index.html">Type-Ahead</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/06_Type-Ahead" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-取得資料"><a href="#Step1-取得資料" class="headerlink" title="Step1 取得資料"></a>Step1 取得資料</h3><p>預設已經有建立了一個城市的.json清單，<br>先建立一個空的陣列 cities 並透過<code>fetch</code>來取得json資料存進去。</p>
<h3 id="Step2-字串比對"><a href="#Step2-字串比對" class="headerlink" title="Step2 字串比對"></a>Step2 字串比對</h3><p>建立function: <code>findMatches(wordToMatch, cities)</code><br>裡面建立了一個 RegExp 用於 match 來進行字串比對</p>
<h3 id="Step3-監聽"><a href="#Step3-監聽" class="headerlink" title="Step3 監聽"></a>Step3 監聽</h3><p>建立<code>displayMatches()</code>並用<code>addEventListener</code>來監測輸入框的<code>change&amp;keyup</code>，<br>每次鍵盤輸入時都會觸發<code>displeyMatches()</code>來處理比對，<br>將比對結果用map來return 組合的HTML的<code>&lt;li&gt;</code>資料，</p>
<h2 id="Javascript語法-amp-備註"><a href="#Javascript語法-amp-備註" class="headerlink" title="Javascript語法&amp;備註"></a>Javascript語法&amp;備註</h2><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch()"></a>fetch()</h3><p>fetch透過 url 會回傳一個包含 response 的 promise,回傳的 response 需要透過 json()</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fetch(endpoint)</span><br><span class="line">.then(res =&gt; res.json())</span><br><span class="line">.then(data =&gt; cities.push(…data))</span><br></pre></td></tr></table></figure>

<p><code>json()</code>後可對資料再作處理</p>
<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/zh-TW/docs/Web/API/Fetch_API/Using_Fetch" >MDN-fetch<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp()"></a>RegExp()</h3><p>我有做紀錄的就是參數後面<code>g</code>代表全部, <code>i</code>代表不分大小寫..</p>
<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp" >MDN-RegExp<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://regex101.com/" >正規表達式練習<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="join"><a href="#join" class="headerlink" title=".join()"></a>.join()</h3><p>將陣列資料用參數內的字串連接轉為一個字串(限定陣列才能用)，<br>範例中上了<code>join(&#39;&#39;)</code>來避免map回傳的陣列有,產生。</p>
<h3 id="replace"><a href="#replace" class="headerlink" title=".replace()"></a>.replace()</h3><p>第一個參數必須用上RegExp,第二個參數為取代後的字符串</p>
<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/String/replace" >MDN-replace<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="CSS語法-amp-備註"><a href="#CSS語法-amp-備註" class="headerlink" title="CSS語法&amp;備註"></a>CSS語法&amp;備註</h2><h3 id="nth-child"><a href="#nth-child" class="headerlink" title="nth-child()"></a>nth-child()</h3><p>範例中利用<code>nth-child(odd)</code>與<code>nth-child(even)</code>來抓<code>li</code>的奇偶數</p>
<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-child" >MDN-nth-child<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Webcam Fun</title>
    <url>/2019/05/26/JS30/JS30-webcam-fun/</url>
    <content><![CDATA[<h1 id="19-—-Webcam-Fun"><a href="#19-—-Webcam-Fun" class="headerlink" title="19 — Webcam Fun"></a>19 — Webcam Fun</h1><p><a href="https://des86532.github.io/javascript-30/19_Webcam-Fun/index.html">webcam_fun</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/19_Webcam-Fun" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>利用<code>navigator.mediaDevices.getUserMedia</code>來取得視訊鏡頭影像，並透過<code>cavas</code>來達到拍照與濾鏡的效果。</p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-啟動Local-Server"><a href="#Step1-啟動Local-Server" class="headerlink" title="Step1. 啟動Local Server"></a>Step1. 啟動Local Server</h3><p>這個練習需要使用到<code>local server</code>，<br>如果你已經有一個可在本機run起來的server可以直接使用，<br>或在這層資料夾底下運行<code>npm install</code>來安裝<code>browser-sync</code>，<br>安裝完成後可以透過指令<code>npm start</code>來啟動<code>localserver(預設port3000)</code>，<br>npm指令需要下載<code>node.js</code>來使用</p>
<h3 id="Step2-取得影像"><a href="#Step2-取得影像" class="headerlink" title="Step2. 取得影像"></a>Step2. 取得影像</h3><p>透過<code>navigator.mediaDevices.getUserMedia</code>來取得視訊影像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function getVideo() &#123;</span><br><span class="line">  // 取得user的視訊裝置，回傳Promise狀態</span><br><span class="line">  navigator.mediaDevices.getUserMedia(&#123;</span><br><span class="line">      video: true,</span><br><span class="line">      audio: false</span><br><span class="line">    &#125;)</span><br><span class="line">    // 如果允許則把回傳的MediaStream寫進html的video tag中並播放</span><br><span class="line">    .then(localMediaStream =&gt; &#123;</span><br><span class="line">      /* console.log(localMediaStream); */</span><br><span class="line">      /*video.src = window.URL.createObjectURL(localMediaStream); */</span><br><span class="line">      /* 2017.11更新為以下寫法URL.creatrObjectURL寫法被移除*/</span><br><span class="line">      video.srcObject = localMediaStream;</span><br><span class="line">      video.play();</span><br><span class="line">    &#125;)</span><br><span class="line">    // 當失敗時印出錯誤結果</span><br><span class="line">    .catch(err =&gt; &#123;</span><br><span class="line">      console.error(`ERROR: `, err);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia" >MDN-MediaDevices.getUserMedia()<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/srcObject#Syntax" >HTMLMediaElement.srcObject<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="Step3-取得視訊資料並輸出在cavas區塊中"><a href="#Step3-取得視訊資料並輸出在cavas區塊中" class="headerlink" title="Step3. 取得視訊資料並輸出在cavas區塊中"></a>Step3. 取得視訊資料並輸出在cavas區塊中</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function paintToCanavas() &#123;</span><br><span class="line">  // 設置寬高</span><br><span class="line">  const width = video.videoWidth;</span><br><span class="line">  const height = video.videoHeight;</span><br><span class="line">  canvas.width = width;</span><br><span class="line">  canvas.height = height;</span><br><span class="line">  // 用setInterval來持續取得目前的影像資訊</span><br><span class="line">  return setInterval(() =&gt; &#123;</span><br><span class="line">    // 在canvas中設置內容來源與video相同，並且X、Ｙ軸及長寬與video相同</span><br><span class="line">    //context.drawImage(img,x,y,width,height);</span><br><span class="line">    //x,y為position,width,height為圖的長寬</span><br><span class="line">    ctx.drawImage(video, 0, 0, width, height);</span><br><span class="line">  &#125;, 16)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a class="link"   href="https://www.w3schools.com/Tags/canvas_drawimage.asp" >MDN-CanvasRenderingContext2D.drawImage<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://ithelp.ithome.com.tw/articles/10055442" >HTML5-video<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="Step4-製作拍照功能！"><a href="#Step4-製作拍照功能！" class="headerlink" title="Step4. 製作拍照功能！"></a>Step4. 製作拍照功能！</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function takePhoto() &#123;</span><br><span class="line">  // 拍照的音效-&gt;把音效切到第0秒並播放</span><br><span class="line">  //音檔來源好像掛了</span><br><span class="line">  snap.currentTime = 0;</span><br><span class="line">  snap.play();</span><br><span class="line">  // 利用toDataURL把canvas的內容轉為base64的圖檔資訊</span><br><span class="line">  const data = canvas.toDataURL(&#x27;image/jpeg&#x27;);</span><br><span class="line">  // 用createElemamnt來建立一個新的a元素</span><br><span class="line">  const link = document.createElement(&#x27;a&#x27;);</span><br><span class="line">  // 設置連結位置為轉圖檔後的base64位置</span><br><span class="line">  link.href = data;</span><br><span class="line">  // 設置連結為下載</span><br><span class="line">  link.setAttribute(&#x27;download&#x27;, &#x27;photo&#x27;);</span><br><span class="line">  // 內部新增一個預覽圖</span><br><span class="line">  link.innerHTML = `&lt;img src=&quot;$&#123;data&#125;&quot; alt=&quot;photo&quot; /&gt;`;</span><br><span class="line">  // 在圖片區塞入新圖片（在第一筆的位置）</span><br><span class="line">  strip.insertBefore(link, strip.firstChild);</span><br><span class="line">  //補充</span><br><span class="line">  //&lt;img alt&gt;當圖片失效時，會顯示的文字 </span><br><span class="line">  //&lt;img title&gt; 當滑鼠移動到圖片上會出現的說明文字</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/zh-TW/docs/Web/API/HTMLCanvasElement/toDataURL" >MDN-HTMLCanvasElement.toDataURL<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://www.w3school.com.cn/jsref/met_node_insertbefore.asp" >html dom insert before<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="Step5-濾鏡效果（紅色）"><a href="#Step5-濾鏡效果（紅色）" class="headerlink" title="Step5. 濾鏡效果（紅色）"></a>Step5. 濾鏡效果（紅色）</h3><p>再回到Step3的<code>paintToCanavas()</code>中新增：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function paintToCanavas() &#123;</span><br><span class="line">  // ...略</span><br><span class="line">  return setInterval(() =&gt; &#123;</span><br><span class="line">    ctx.drawImage(video, 0, 0, width, height);</span><br><span class="line">    // 透過getImageData取得當前canvans中所有的像素點(r,g,b,alpha的資訊)</span><br><span class="line">    let pixels = ctx.getImageData(0, 0, width, height);</span><br><span class="line">    // console.log(pixels)</span><br><span class="line">    //輸入debugger可以把網頁動作停下來</span><br><span class="line">    // debugger;</span><br><span class="line">    // 製作效果</span><br><span class="line">    pixels = redEffect(pixels); // 紅色濾鏡效果</span><br><span class="line">    // ctx.globalAlpha = 0.8;</span><br><span class="line">    // pixels = greenScreen(pixels);</span><br><span class="line">    // 置入效果</span><br><span class="line">    ctx.putImageData(pixels, 0, 0);</span><br><span class="line">  &#125;, 16)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>並新增一個對應的濾鏡<code>functionredEffect()</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function redEffect(pixels) &#123;</span><br><span class="line">  // 透過迴圈將取回的所有像素資料跑一次，i +=4 是因為四個一組(r,g,b,alpha）</span><br><span class="line">  //aplph -&gt; (0-255; 0 是透明的，255 是完全可见的)</span><br><span class="line">  //這個是每個像素點的紅色的顏色深度，console.log(pxels)可以看見每個像素點的分配</span><br><span class="line">  for (let i = 0; i &lt; pixels.data.length; i += 4) &#123;</span><br><span class="line">    // 下面組合就是單純把R(紅色)增強達到紅色濾鏡的效果</span><br><span class="line">    pixels.data[i + 0] = pixels.data[i + 0] + 100;</span><br><span class="line">    pixels.data[i + 1] = pixels.data[i + 1] - 50;</span><br><span class="line">    pixels.data[i + 2] = pixels.data[i + 2] * 0.5;</span><br><span class="line">  &#125;</span><br><span class="line">  return pixels;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getImageData" >MDN-CanvasRenderingContext2D.getImageData<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/putImageData" >MDN-putImageData<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://www.w3school.com.cn/html5/canvas_getimagedata.asp" >W3school-getImageData<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【Javascript】Array-methods</title>
    <url>/2019/11/19/Javascript/array-methods/</url>
    <content><![CDATA[<p><img src="20106426psTRBiwFBt.png" alt="array-methods"></p>
<h2 id="預設資料"><a href="#預設資料" class="headerlink" title="預設資料"></a>預設資料</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> temp = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<h3 id="Array-prototype-push-elementN"><a href="#Array-prototype-push-elementN" class="headerlink" title="Array.prototype.push(elementN)"></a>Array.prototype.push(elementN)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newArray = temp.push(<span class="number">6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(temp);  	   <span class="comment">// [1, 2, 3, 6]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArray);  <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<p><code>push</code> 後會回傳 <code>length</code></p>
<h3 id="Array-prototype-unshift-elementN"><a href="#Array-prototype-unshift-elementN" class="headerlink" title="Array.prototype.unshift(elementN)"></a>Array.prototype.unshift(elementN)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newArray = temp.unshift(<span class="number">6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(temp);      <span class="comment">// [6, 1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArray);  <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<p><code>unshift</code> 後會回傳 <code>length</code></p>
<h3 id="Array-prototype-pop"><a href="#Array-prototype-pop" class="headerlink" title="Array.prototype.pop()"></a>Array.prototype.pop()</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newArray = temp.pop();</span><br><span class="line"><span class="built_in">console</span>.log(temp);   <span class="comment">// [1, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArray);  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>移除原本陣列<code>最後面</code>的第一個值，回傳被移除掉的那個值</p>
<h3 id="Array-prototype-shift"><a href="#Array-prototype-shift" class="headerlink" title="Array.prototype.shift()"></a>Array.prototype.shift()</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newArray = temp.shift();</span><br><span class="line"><span class="built_in">console</span>.log(temp);  <span class="comment">// [2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArray);  <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>移除原本陣列<code>最前面</code>的第一個值，回傳被移除掉的那個值</p>
<h3 id="Array-prototype-concat"><a href="#Array-prototype-concat" class="headerlink" title="Array.prototype.concat()"></a>Array.prototype.concat()</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newArray = temp.concat([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="built_in">console</span>.log(temp);  <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArray);  <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<p>把兩個陣列合併在一起，並回傳新陣列</p>
<h2 id="預設資料-1"><a href="#預設資料-1" class="headerlink" title="預設資料"></a>預設資料</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> inventors = [</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">&#x27;Albert&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;Einstein&#x27;</span>, <span class="attr">year</span>: <span class="number">1879</span>, <span class="attr">passed</span>: <span class="number">1955</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: ‘Isaac’, <span class="attr">last</span>: <span class="string">&#x27;Newton&#x27;</span>, <span class="attr">year</span>: <span class="number">1643</span>, <span class="attr">passed</span>: <span class="number">1727</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">&#x27;Galileo&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;Galilei&#x27;</span>, <span class="attr">year</span>: <span class="number">1564</span>, <span class="attr">passed</span>: <span class="number">1642</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">&#x27;Marie&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;Curie&#x27;</span>, <span class="attr">year</span>: <span class="number">1867</span>, <span class="attr">passed</span>: <span class="number">1934</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">&#x27;Johannes&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;Kepler&#x27;</span>, <span class="attr">year</span>: <span class="number">1571</span>, <span class="attr">passed</span>: <span class="number">1630</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">&#x27;Nicolaus&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;Copernicus&#x27;</span>, <span class="attr">year</span>: <span class="number">1473</span>, <span class="attr">passed</span>: <span class="number">1543</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">&#x27;Max&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;Planck&#x27;</span>, <span class="attr">year</span>: <span class="number">1858</span>, <span class="attr">passed</span>: <span class="number">1947</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">&#x27;Katherine&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;Blodgett&#x27;</span>, <span class="attr">year</span>: <span class="number">1898</span>, <span class="attr">passed</span>: <span class="number">1979</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">&#x27;Ada&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;Lovelace&#x27;</span>, <span class="attr">year</span>: <span class="number">1815</span>, <span class="attr">passed</span>: <span class="number">1852</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">&#x27;Sarah E.&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;Goode&#x27;</span>, <span class="attr">year</span>: <span class="number">1855</span>, <span class="attr">passed</span>: <span class="number">1905</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: <span class="string">&#x27;Lise&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;Meitner&#x27;</span>, <span class="attr">year</span>: <span class="number">1878</span>, <span class="attr">passed</span>: <span class="number">1968</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">first</span>: ‘Hanna’, <span class="attr">last</span>: <span class="string">&#x27;Hammarström&#x27;</span>, <span class="attr">year</span>: <span class="number">1829</span>, <span class="attr">passed</span>: <span class="number">1909</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>

<h3 id="Array-prototype-findIndex-item-index-array"><a href="#Array-prototype-findIndex-item-index-array" class="headerlink" title="Array.prototype.findIndex(item, index, array)"></a>Array.prototype.findIndex(item, index, array)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = inventors.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> item.year &gt; <span class="number">1870</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result1 = inventors.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> item.year &gt; <span class="number">2000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result);    <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(result1);   <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<p>回傳<code>第一個</code>符合條件的位置 index，若都找不到則回傳 <code>-1</code></p>
<h3 id="Array-prototype-find-item-index-array"><a href="#Array-prototype-find-item-index-array" class="headerlink" title="Array.prototype.find(item, index, array)"></a>Array.prototype.find(item, index, array)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = inventors.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> item.year &gt; <span class="number">1870</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result1 = inventors.find(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> item.year &gt; <span class="number">2000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result);    <span class="comment">// &#123; first: ‘Albert&#x27;, last: &#x27;Einstein&#x27;, year: 1879, passed: 1955 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(result1);   <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>回傳一個值，且是<code>第一個</code>抓到條件為 true 的值，若都找不到則回傳 <code>undefined</code></p>
<h3 id="Array-prototype-filter-item-index-array"><a href="#Array-prototype-filter-item-index-array" class="headerlink" title="Array.prototype.filter(item, index, array)"></a>Array.prototype.filter(item, index, array)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> result = inventors.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> item.year &gt; <span class="number">1870</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result1 = inventors.filter(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> item.year &gt; <span class="number">2000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result);    </span><br><span class="line"><span class="comment">// &#123; first: ‘Albert&#x27;, last: &#x27;Einstein&#x27;, year: 1879, passed: 1955 &#125;</span></span><br><span class="line"><span class="comment">// &#123;first: &quot;Katherine”, last: “Blodgett&quot;, year: 1898, passed: 1979&#125;</span></span><br><span class="line"><span class="comment">// &#123;first: &quot;Lise&quot;, last: “Meitner”, year: 1878, passed: 1968&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(result1);   <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<p>回傳一個陣列，只要條件為 true 的就會包含在此陣列，適合拿來搜尋</p>
<h3 id="Array-prototype-forEach-item-index-array"><a href="#Array-prototype-forEach-item-index-array" class="headerlink" title="Array.prototype.forEach(item, index, array)"></a>Array.prototype.forEach(item, index, array)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> forEachInventors = inventors.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item.year &gt; <span class="number">1870</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(forEachInventors) <span class="comment">// undefined, 不會 return 東西</span></span><br><span class="line"> </span><br><span class="line">inventors.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    item.year =  <span class="number">1870</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(inventors) <span class="comment">// 全部 12 個的 year = 1870</span></span><br></pre></td></tr></table></figure>

<p>forEach 不會回傳任何東西，單純只執行原本陣列裡的事</p>
<h3 id="Array-prototype-map-item-index-array"><a href="#Array-prototype-map-item-index-array" class="headerlink" title="Array.prototype.map(item, index, array)"></a>Array.prototype.map(item, index, array)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mapInventors = inventors.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> item.year &gt; <span class="number">1870</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(mapInventors)</span><br><span class="line"><span class="comment">//  [true, false, false, false, false, false, false, true, false, false, true, false]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapInventors2 = inventors.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(item.year &gt; <span class="number">1870</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;item.year&#125;</span>歲`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(mapInventors2) <span class="comment">// [&quot;1879歲&quot;, false, false....]</span></span><br><span class="line"><span class="comment">// 不論是空的或是 false，都會回傳</span></span><br></pre></td></tr></table></figure>

<p>將條件運算後重新組合回傳一個數量等於 array.length 的陣列，陣列內容只有 true &amp; false</p>
<h2 id="Array-prototype-some-item-index-array"><a href="#Array-prototype-some-item-index-array" class="headerlink" title="Array.prototype.some(item, index, array)"></a>Array.prototype.some(item, index, array)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> someInventors = inventors.some(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item.year &gt; <span class="number">1870</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(someInventors)  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>回傳一個 Boolean，只要部分符合就回傳 true。它不會 Array 全部找完，只要一找到相符的直就跳出</p>
<h2 id="Array-prototype-every-item-index-array"><a href="#Array-prototype-every-item-index-array" class="headerlink" title="Array.prototype.every(item, index, array)"></a>Array.prototype.every(item, index, array)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> everyInventors = inventors.every(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item.year &gt; <span class="number">1870</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(everyInventors)  <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>回傳一個 Boolean，需要全部符合才回傳 true，部分符合會回傳 false</p>
<h2 id="Array-prototype-reduce-accumulator-currentValue-currentIndex-array-initialValue"><a href="#Array-prototype-reduce-accumulator-currentValue-currentIndex-array-initialValue" class="headerlink" title="Array.prototype.reduce(accumulator, currentValue, currentIndex, array [, initialValue])"></a>Array.prototype.reduce(accumulator, currentValue, currentIndex, array [, initialValue])</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> special = [<span class="number">8</span>, <span class="number">0</span>, <span class="number">14</span>];</span><br><span class="line"><span class="keyword">const</span> reduceArray = special.reduce(</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">accumulator, currentValue, currentIndex</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;accumulator&#x27;</span>, accumulator);  <span class="comment">// 下圖</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;currentValue&#x27;</span>, currentValue);  <span class="comment">// 下圖</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;currentIndex&#x27;</span>, currentIndex);  <span class="comment">// 下圖</span></span><br><span class="line">    <span class="keyword">return</span> accumulator + currentValue;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(reduceArray) <span class="comment">// 22</span></span><br><span class="line"><span class="built_in">console</span>.log(special) <span class="comment">// 原本的 array</span></span><br></pre></td></tr></table></figure>

<p><img src="625D851B-F6CE-4577-AC39-C0874332080E.png" alt="methods-reduce"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> special = [<span class="number">8</span>, <span class="number">0</span>, <span class="number">14</span>];</span><br><span class="line"><span class="keyword">const</span> reduceArray = special.reduce(</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">accumulator, currentValue, currentIndex, initialValue</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;accumulator&#x27;</span>, accumulator);  <span class="comment">// 下圖</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;currentValue&#x27;</span>, currentValue);  <span class="comment">// 下圖</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;currentIndex&#x27;</span>, currentIndex);  <span class="comment">// 下圖</span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;initialValue&#x27;</span>, initialValue);  <span class="comment">// 下圖</span></span><br><span class="line">    <span class="keyword">return</span> accumulator + currentValue;</span><br><span class="line">&#125;, <span class="number">30</span>)</span><br><span class="line"><span class="built_in">console</span>.log(reduceArray) <span class="comment">// 52</span></span><br><span class="line"><span class="built_in">console</span>.log(special) <span class="comment">// 原本的 array</span></span><br></pre></td></tr></table></figure>

<p><img src="C7FCB7BD-93A8-4151-9A98-59FD4C90A0E4.png" alt="methods-reduce"></p>
<h2 id="Array-prototype-sort-compareFunction"><a href="#Array-prototype-sort-compareFunction" class="headerlink" title="Array.prototype.sort(compareFunction)"></a>Array.prototype.sort(compareFunction)</h2><p>特別要提得是，&lt; 10 的 array 會是 stable 排序法， &gt; 10 會是不穩定的排序法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fruit = [<span class="string">&#x27;cherries&#x27;</span>, <span class="string">&#x27;apples&#x27;</span>, <span class="string">&#x27;bananas&#x27;</span>];</span><br><span class="line">fruit.sort(); <span class="comment">// [&#x27;apples&#x27;, ‘bananas’, ‘cherries’]</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> scores = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">2</span>];</span><br><span class="line">scores.sort(); <span class="comment">// [1, 10, 2, 21]</span></span><br><span class="line"><span class="comment">// 在 unicode 裡 32(數字2） &gt; 31(1 開頭的任何數字)</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> things = [<span class="string">&#x27;word&#x27;</span>, <span class="string">&#x27;Word&#x27;</span>, <span class="string">&#x27;1 Word&#x27;</span>, <span class="string">&#x27;2 Words&#x27;</span>];</span><br><span class="line">things.sort(); <span class="comment">// [&#x27;1 Word&#x27;, &#x27;2 Words&#x27;, &#x27;Word&#x27;, &#x27;word&#x27;]</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 若 a 比較小 排序就是 a, b</span></span><br><span class="line">  <span class="keyword">if</span> (a is less than b by some ordering criterion) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 若 a 比較大 排序就是 b, a  就是位置會對調</span></span><br><span class="line">  <span class="keyword">if</span> (a is greater than b by the ordering criterion) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 若一樣</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a  = [<span class="number">2</span>, <span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">75</span>,<span class="number">33</span>,<span class="number">64</span>,<span class="number">356</span>,<span class="number">86</span>] ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = a.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> a - b</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// [2, 4, 6, 7, 11, 33, 64, 75, 86, 356]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result1 = a.sort(<span class="function">(<span class="params">a,b</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> b - a</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result1);  <span class="comment">// [356, 86, 75, 64, 33, 11, 7, 6, 4, 2]</span></span><br></pre></td></tr></table></figure>

<h2 id="Array-prototype-reverse"><a href="#Array-prototype-reverse" class="headerlink" title="Array.prototype.reverse()"></a>Array.prototype.reverse()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a.reverse()); <span class="comment">// [‘three&#x27;, &#x27;two&#x27;, ‘one&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// [‘three&#x27;, &#x27;two&#x27;, ‘one&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>會改變原來的陣列 !!</p>
<h2 id="Array-prototype-slice-start-end"><a href="#Array-prototype-slice-start-end" class="headerlink" title="Array.prototype.slice(start, end)"></a>Array.prototype.slice(start, end)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> my_array = [<span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">0</span>]</span><br><span class="line"><span class="keyword">const</span> sliceArray = my_array.slice(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sliceArray); <span class="comment">// [3, 8, 6]</span></span><br><span class="line"><span class="built_in">console</span>.log(my_array); <span class="comment">// [5, 1, 3, 8, 6, 0] 不會變</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sliceArray1 = my_array.slice(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sliceArray1); <span class="comment">// [3, 8, 6, 0]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sliceNegativeArray = my_array.slice(-<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sliceNegativeArray); <span class="comment">// [0]</span></span><br></pre></td></tr></table></figure>

<p>Slice 就是切，把 array 頭尾切兩刀。回傳在 start(包含) 跟 end 之間的陣列。經過 slice 後原本陣列不會改變</p>
<h2 id="Array-prototype-splice-start-deleteCount-item1-item2-…"><a href="#Array-prototype-splice-start-deleteCount-item1-item2-…" class="headerlink" title="Array.prototype.splice(start, deleteCount, item1, item2, …)"></a>Array.prototype.splice(start, deleteCount, item1, item2, …)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假如只有 splice(start)，這時會跟 slice 行為一樣</span></span><br><span class="line"><span class="keyword">const</span> spliceArray1 = my_array.splice(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(spliceArray1); <span class="comment">// [8, 6, 0] 被移掉的值</span></span><br><span class="line"><span class="built_in">console</span>.log(my_array); <span class="comment">// [5, 1, 3]，index 3 後面都移掉</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//一樣可以接受負數</span></span><br><span class="line"><span class="keyword">const</span> spliceArray2 = my_array.splice(-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(spliceArray2); <span class="comment">// [0]</span></span><br><span class="line"><span class="built_in">console</span>.log(my_array); <span class="comment">// [5, 1, 3, 8, 6] 倒數 1 個後面都移掉</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// splice(start, deleteCount 抓幾個)</span></span><br><span class="line"><span class="keyword">const</span> spliceArray3 = my_array.splice(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(spliceArray3); <span class="comment">// [1, 3, 8]</span></span><br><span class="line"><span class="built_in">console</span>.log(my_array); <span class="comment">// [5, 6, 0]</span></span><br><span class="line"><span class="comment">// 從 index 1 開始抓 3 個 把中間值移掉</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// splice(start, deleteCount 抓幾個, 插入 item)</span></span><br><span class="line"><span class="keyword">const</span> spliceArray4 = my_array.splice(<span class="number">1</span>, <span class="number">3</span>, ‘Hana’, ‘Mike’)</span><br><span class="line"><span class="built_in">console</span>.log(spliceArray4); <span class="comment">// [1, 3, 8]</span></span><br><span class="line"><span class="comment">// 不會有 &#x27;Hana&#x27;, &#x27;Mike&#x27; 字眼出現</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(my_array); <span class="comment">// [5, &quot;Hana&quot;, &quot;Mike&quot;, 6, 0]</span></span><br><span class="line"><span class="comment">// 從 index 1 開始抓 3 個 把中間值移掉 並塞進 “Hana”, “Mike”</span></span><br></pre></td></tr></table></figure>

<p>回傳被移掉的值放在陣列裡。</p>
<p>splice 乍看下跟 slice 有點像，但其實幾乎完全相反(驚)。slice 是取 start end 裡的東西，而 splice 是 return 中間被移掉的東西， splice 會影響原本陣列。</p>
<p>新增的 item1、item2 只會影響本來陣列，並不會回傳到新的陣列裡</p>
<p>Splice 是拼接的意思你不但可以切掉某塊還可以塞東西進去。</p>
<h2 id="Array-prototype-indexOf-searchElement"><a href="#Array-prototype-indexOf-searchElement" class="headerlink" title="Array.prototype.indexOf(searchElement)"></a>Array.prototype.indexOf(searchElement)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> indexArray = my_array.indexOf(<span class="number">3</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(indexArray) <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(my_array) <span class="comment">// [5, 1, 3, 8, 6, 0]</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> indexArray2 = my_array.indexOf(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">console</span>.log(indexArray) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>

<p>回傳所在位置的 index，如果找不到會回傳 -1，不會改變原陣列</p>
<h2 id="Array-prototype-join-separator"><a href="#Array-prototype-join-separator" class="headerlink" title="Array.prototype.join(separator)"></a>Array.prototype.join(separator)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> joinArray = my_array.join(‘-<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">console.log(joinArray) // ‘5-1-3-8-6-0’</span></span><br><span class="line"><span class="string">console.log(my_array) // [5, 1, 3, 8, 6, 0]</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">const joinArray2 = my_array.join(‘&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(joinArray2) <span class="comment">// &#x27;513860&#x27;</span></span><br></pre></td></tr></table></figure>

<p>把所有陣列裡的值加上 separator，回傳一個字串，不會改變原陣列</p>
<h2 id="Array-prototype-includes-searchElement-fromIndex"><a href="#Array-prototype-includes-searchElement-fromIndex" class="headerlink" title="Array.prototype.includes(searchElement, fromIndex)"></a>Array.prototype.includes(searchElement, fromIndex)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> my_array = [<span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">0</span>]</span><br><span class="line"><span class="keyword">const</span> includesArray = my_array.includes(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(includesArray) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(my_array) <span class="comment">// [5, 1, 3, 8, 6, 0]</span></span><br><span class="line"> </span><br><span class="line">my_array.includes(<span class="number">5</span>,<span class="number">3</span>) <span class="comment">// false 從 index 第三個之後找 5</span></span><br></pre></td></tr></table></figure>

<p>看 searchElement 有沒有在 array 裡，回傳 Boolean，不會改變原陣列</p>
<h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p><img src="6ACAAF72-B003-46F6-B7AB-DC848B382AEE.png" alt="result"></p>
<h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><blockquote>
<p><a class="link"   href="https://ithelp.ithome.com.tw/articles/10213787" >陣列 Array - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://github.com/tooto1985/js-array-operations" >GitHub - tooto1985/js-array-operations: 20 kinds of methods to get to know a JavaScript array operations.<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>【課程紀錄】克服 JS 奇怪的地方- 閉包與 IIFEs</title>
    <url>/2019/06/23/Javascript/Closure-and-IIFEs/</url>
    <content><![CDATA[<h2 id="Closure-閉包"><a href="#Closure-閉包" class="headerlink" title="Closure (閉包)"></a>Closure (閉包)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function greet(whattosay) &#123;</span><br><span class="line">    return function(name) &#123;</span><br><span class="line">        console.log(whattosay + &#x27; &#x27; + name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var sayHi = greet(&#x27;Hi&#x27;);</span><br><span class="line">sayHi(&#x27;Tony&#x27;)  // Hi Tony</span><br><span class="line">// 為何仍然可以取到 whattosay 的值</span><br></pre></td></tr></table></figure>

<p>執行環境 greet 移除後，記憶體內的變數 whattosay 還會暫存，新的執行環境 sayHi 找不到 whattosay 就會往上一層找，這個包住所有可以取用的變數的現象，稱為 <code>閉包</code></p>
<p><img src="0_f-r3q3tHo_swfuMc.png" alt="closure"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function buildFunctions() &#123;</span><br><span class="line">	var arr = [];</span><br><span class="line">	for (var i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">		arr.push(function() &#123;</span><br><span class="line">			console.log(i)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	return arr;</span><br><span class="line">&#125;</span><br><span class="line">var fs = buildFunctions();</span><br><span class="line">fs[0]();  // 3</span><br><span class="line">fs[1]();  // 3</span><br><span class="line">fs[2]();  // 3</span><br></pre></td></tr></table></figure>

<p><img src="0_wTC3NxZIJffcQ-X6.png" alt="closure"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fs[0]</span><br><span class="line">// function() &#123;</span><br><span class="line">//    console.log(i)</span><br><span class="line">//&#125;</span><br><span class="line">fs[1]</span><br><span class="line">// function() &#123;</span><br><span class="line">//    console.log(i)</span><br><span class="line">//&#125;</span><br><span class="line">fs[2]</span><br><span class="line">// function() &#123;</span><br><span class="line">//    console.log(i)</span><br><span class="line">//&#125;</span><br></pre></td></tr></table></figure>

<p>存在 fs 裡面的 function i 並沒有帶入 0,1,2，所以當呼叫到 function 時，會找到現有的 i</p>
<p><img src="0_ugDh065BmIkmeD9b.png" alt="closure"></p>
<p>console.log() 不是在他所在的地方執行，而是當我們呼叫函數才執行</p>
<p>如果要讓輸出結果為 0,1,2 ，可以用下面兩個方法</p>
<p><img src="0_N9_h3Xm1Uew6qPdr.png" alt="closure"></p>
<h2 id="使用-Let"><a href="#使用-Let" class="headerlink" title="使用 Let"></a>使用 Let</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function buildFunctions() &#123;</span><br><span class="line">	var arr = [];</span><br><span class="line">	for (var i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">	let j = i</span><br><span class="line">		arr.push(function() &#123;</span><br><span class="line">			console.log(j)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	return arr;</span><br><span class="line">&#125;</span><br><span class="line">var fs = buildFunctions();</span><br><span class="line">fs[0]();  // 0</span><br><span class="line">fs[1]();  // 1</span><br><span class="line">fs[2]();  // 2</span><br></pre></td></tr></table></figure>

<p>透過let，可以讓每次跑的迴圈都建立到一個新的記憶體位置，因此最後指稱到的地方會是不一樣的，於是可以輸出0, 1, 2的結果。</p>
<h2 id="使用-IIFEs"><a href="#使用-IIFEs" class="headerlink" title="使用 IIFEs"></a>使用 IIFEs</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function buildFunctions() &#123;</span><br><span class="line">	var arr = [];</span><br><span class="line">	for (var i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">		arr.push(</span><br><span class="line">			(function(j) &#123;</span><br><span class="line">			    return function() &#123;</span><br><span class="line">				    console.log(j)</span><br><span class="line">		    	&#125;</span><br><span class="line">		    &#125;(i))</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">	return arr;</span><br><span class="line">&#125;</span><br><span class="line">var fs = buildFunctions();</span><br><span class="line">fs[0]();  // 0</span><br><span class="line">fs[1]();  // 1</span><br><span class="line">fs[2]();  // 2</span><br></pre></td></tr></table></figure>
<p>執行 <code>buildFunctions</code> 的時候，陣列裡面的匿名函式 <code>function(j)&#123;…&#125;</code> 會直接被執行，創造新的執行環境，並且帶入變數 i ，所以每次迴圈都是新的執行環境，變數 j 會被存在不同的執行環境中，在呼叫 <code>fs[0]()</code> 的時候，也可以找到該執行環境中的變數 j</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function makeGreeting(language) &#123;</span><br><span class="line">    return function(firstname, lastname) &#123;</span><br><span class="line">        if (language === &#x27;en&#x27;) &#123;</span><br><span class="line">            console.log(&#x27;Hello &#x27; + firstname + &#x27; &#x27; + lastname);</span><br><span class="line">        &#125;</span><br><span class="line">        if (language === &#x27;es&#x27;) &#123;</span><br><span class="line">            console.log(&#x27;Hola &#x27; + firstname + &#x27; &#x27; + lastname);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var greetEnglish = makeGreeting(&#x27;en&#x27;);</span><br><span class="line">var greetSpanlish = makeGreeting(&#x27;es&#x27;);</span><br><span class="line">greetEnglish(&#x27;John&#x27;, &#x27;Doe&#x27;);</span><br><span class="line">greetSpanlish(&#x27;John&#x27;, &#x27;Doe&#x27;);</span><br></pre></td></tr></table></figure>
<p><img src="0_yGN21FjIY8sGgFmd.png" alt="closure"></p>
<h2 id="CALLBACK-FUNCTION-回呼函數"><a href="#CALLBACK-FUNCTION-回呼函數" class="headerlink" title="CALLBACK FUNCTION (回呼函數)"></a>CALLBACK FUNCTION (回呼函數)</h2><p>a function you give to another function, to be run when the other function is finished</p>
<p>我呼叫函數 a ，然後給他函數 b ，當 a 結束，他呼叫函數 b</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function tellMeWhenDone(callback) &#123;</span><br><span class="line">    var a = 1000;</span><br><span class="line">    var b = 2000;</span><br><span class="line"></span><br><span class="line">    callback();</span><br><span class="line">&#125;</span><br><span class="line">tellMeWhenDone(function() &#123;</span><br><span class="line">    console.log(&#x27;I am done!&#x27;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>【課程紀錄】克服 JS 奇怪的地方 — bind call apply</title>
    <url>/2019/06/24/Javascript/bind-call-apply/</url>
    <content><![CDATA[<h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>複製一個新函數，不會呼叫</p>
<p>第一個參數：設定 this 指向的物件<br>第二個參數: 會帶入複製 function 的第一個參數(當作固定值，不能被改變的預設參數)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    firstname: &#x27;John&#x27;,</span><br><span class="line">    lastname: &#x27;Doe&#x27;,</span><br><span class="line">    getFullName: function() &#123;</span><br><span class="line">        var fullname = this.firstname + &#x27; &#x27; + this.lastname;</span><br><span class="line">        return fullname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var logName = function(lang1, lang2) &#123;</span><br><span class="line">    console.log(&#x27;Logged: &#x27; + this.getFullName());</span><br><span class="line">    console.log(&#x27;Arguments: &#x27; + lang1 + &#x27; &#x27; + lang2)</span><br><span class="line">&#125;</span><br><span class="line">var logPersonName = logName.bind(person);</span><br><span class="line">logName(); // this.getFullName is not a function</span><br><span class="line">logPersonName(); </span><br><span class="line">// Logged: John Doe</span><br><span class="line">// Arguemnts: undefined undefined</span><br><span class="line">logPersonName(&#x27;en&#x27;);</span><br><span class="line">// Logged: John Doe</span><br><span class="line">// Arguemnts: en undefined</span><br></pre></td></tr></table></figure>

<h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><p>會直接呼叫 function</p>
<p>第一個參數：設定this指向的物件<br>第二個參數：會帶入function的第一個參數</p>
<h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><p>會直接呼叫 function，只接受陣列作為參數</p>
<p>call &amp; apply 差別只有在後面的參數， apply 要用陣列</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    firstname: &#x27;John&#x27;,</span><br><span class="line">    lastname: &#x27;Doe&#x27;,</span><br><span class="line">    getFullName: function() &#123;</span><br><span class="line">        var fullname = this.firstname + &#x27; &#x27; + this.lastname;</span><br><span class="line">        return fullname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var logName = function(lang1, lang2) &#123;</span><br><span class="line">    console.log(&#x27;Logged: &#x27; + this.getFullName());</span><br><span class="line">    console.log(&#x27;Arguments: &#x27; + lang1 + &#x27; &#x27; + lang2)</span><br><span class="line">&#125;</span><br><span class="line">logName.call(person, &#x27;en&#x27;, &#x27;es&#x27;)</span><br><span class="line">// Logged: John Doe</span><br><span class="line">// Arguemnts: en es</span><br><span class="line">logName.apply(person, [&#x27;en&#x27;, &#x27;es&#x27;]);</span><br><span class="line">// Logged: John Doe</span><br><span class="line">// Arguemnts: en es</span><br></pre></td></tr></table></figure>

<h2 id="function-borrowing"><a href="#function-borrowing" class="headerlink" title="function borrowing"></a>function borrowing</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var person2 = &#123;</span><br><span class="line">    firstname: &#x27;Jane&#x27;,</span><br><span class="line">    lastname: &#x27;Doe&#x27;</span><br><span class="line">&#125;</span><br><span class="line">console.log(person.getFullName.call(person2)) // Jane Doe</span><br><span class="line">console.log(person.getFullName.apply(person2)) // Jane Doe</span><br><span class="line">// 後面沒有預設參數的時候，call &amp; apply 是一樣的</span><br></pre></td></tr></table></figure>

<h2 id="function-currying"><a href="#function-currying" class="headerlink" title="function currying"></a>function currying</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function multiply(a,b) &#123;</span><br><span class="line">    return a*b;</span><br><span class="line">&#125;</span><br><span class="line">function multipleByTwo(b) &#123;</span><br><span class="line">    var a = 2;</span><br><span class="line">    return a*b</span><br><span class="line">&#125;</span><br><span class="line">var multipleByTwo = multiply.bind(this,2)</span><br><span class="line">// 如果這樣設定，multipleByTwo 這個 function的 a 就永遠會是 2，與上面的 function 意思是一樣的</span><br><span class="line">console.log(multipleByTwo(3))  // 6</span><br><span class="line">console.log(multipleByTwo(9))  // 18</span><br><span class="line">var multipleByTwo = multiply.bind(this,2,3)</span><br><span class="line">// 這樣設定的話，a = 2 b = 3 永遠不變</span><br><span class="line">console.log(multipleByTwo(3))    // 6</span><br><span class="line">console.log(multipleByTwo(9))    // 6</span><br><span class="line">console.log(multipleByTwo(100))  // 6</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>【課程紀錄】克服 JS 奇怪的地方 — 函數程式設計</title>
    <url>/2019/06/25/Javascript/function/</url>
    <content><![CDATA[<h2 id="建立一個-function，可以帶入其他-function-改變-array"><a href="#建立一個-function，可以帶入其他-function-改變-array" class="headerlink" title="建立一個 function，可以帶入其他 function 改變 array"></a>建立一個 function，可以帶入其他 function 改變 array</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function mapForEach(arr, fn) &#123;</span><br><span class="line">    </span><br><span class="line">    var newArr = [];</span><br><span class="line">    for (var i=0; i &lt; arr.length; i++) &#123;</span><br><span class="line">        newArr.push(</span><br><span class="line">            fn(arr[i])   </span><br><span class="line">        )</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    return newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="利用mapForEach-function-回傳-array-兩倍大"><a href="#利用mapForEach-function-回傳-array-兩倍大" class="headerlink" title="利用mapForEach function 回傳 array 兩倍大"></a>利用mapForEach function 回傳 array 兩倍大</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var arr1 = [1,2,3];</span><br><span class="line">var arr2 = mapForEach(arr1, function(item) &#123;</span><br><span class="line">   return item * 2; </span><br><span class="line">&#125;);</span><br><span class="line">console.log(arr2);  // [2,4,6]</span><br></pre></td></tr></table></figure>

<h2 id="建立一個-function-檢驗-array-內的值"><a href="#建立一個-function-檢驗-array-內的值" class="headerlink" title="建立一個 function 檢驗 array 內的值"></a>建立一個 function 檢驗 array 內的值</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var checkPastLimit = function(limiter, item) &#123;</span><br><span class="line">    return item &gt; limiter;   </span><br><span class="line">&#125;</span><br><span class="line">var arr4 = mapForEach(arr1, checkPastLimit.bind(this,1));</span><br><span class="line">console.log(arr4);   // [false, true, true]</span><br></pre></td></tr></table></figure>

<h2 id="將-function-重構，checkPastLimit-精簡化只需要帶入一個值"><a href="#將-function-重構，checkPastLimit-精簡化只需要帶入一個值" class="headerlink" title="將 function 重構，checkPastLimit 精簡化只需要帶入一個值"></a>將 function 重構，checkPastLimit 精簡化只需要帶入一個值</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var checkPastLimitSimple = function(limiter) &#123;</span><br><span class="line">    return function(limiter, item) &#123;</span><br><span class="line">        return item &gt; limiter</span><br><span class="line">    &#125;.bind(this,limiter)</span><br><span class="line">&#125;</span><br><span class="line">var arr5 = mapForEach(arr1, checkPastLimitSimple(1));</span><br><span class="line">console.log(arr5);  // [false, true, true]</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>【課程紀錄】克服 JS 的奇怪部分 — 執行環境與詞彙環境</title>
    <url>/2019/06/20/Javascript/execution-content-and-lexical-environment/</url>
    <content><![CDATA[<h2 id="SYNTAX-PARSER-語法解析器"><a href="#SYNTAX-PARSER-語法解析器" class="headerlink" title="SYNTAX PARSER(語法解析器)"></a>SYNTAX PARSER(語法解析器)</h2><p>a program that reads your code and determines that it does and if its grammar is valid</p>
<p>一個程式，能夠讀取程式碼並決定做何動作，如果你的語法是有效的</p>
<p>Your code isn’t magic.Someone else wrote a program to translate it for the computer.</p>
<p><img src="0_ukJnFyNRsFFBszcq.png" alt="complier"></p>
<p>你的程式碼(人類看得懂)經過編譯器變成電腦看得懂的指令</p>
<h2 id="LEXICAL-ENVIRONMENT-詞彙環境"><a href="#LEXICAL-ENVIRONMENT-詞彙環境" class="headerlink" title="LEXICAL ENVIRONMENT(詞彙環境)"></a>LEXICAL ENVIRONMENT(詞彙環境)</h2><p>where something sits physically in the code you write<br>‘Lexical’ means ‘having to do with words or grammar’. A lexical environment exists in programming languages in which where you write something is important.</p>
<p>主要討論：程式碼被寫在哪裡？他的周圍環境是甚麼？</p>
<h2 id="EXECUTION-CONTEXT-執行環境"><a href="#EXECUTION-CONTEXT-執行環境" class="headerlink" title="EXECUTION CONTEXT(執行環境)"></a>EXECUTION CONTEXT(執行環境)</h2><p>a wrapper to help manage the code that is running</p>
<p>一個包裹，幫助管理正在執行的程式</p>
<p>There are lots of lexicak environments. Which one is currently running is managed via execution contexts. It can contain things beyond what you’ve wriiten in your code.</p>
<p>包含正在執行的程式以及正在被轉換的程式</p>
<p>Javascript執行後，執行環境建立，執行環境是在全域等級被創造的，Javascript 會自動建立兩個全域物件：window、this，沒有任何程式碼也會自動建立</p>
<p>全域的定義：</p>
<p><strong>不在函式內的變數以及物件，他們就屬於全域</strong></p>
<p><img src="0_Ao57we2G-PJxywLM.png" alt="global_var"></p>
<h2 id="執行環境-分為兩個階段"><a href="#執行環境-分為兩個階段" class="headerlink" title="執行環境 分為兩個階段"></a>執行環境 分為兩個階段</h2><ul>
<li>創造</li>
<li>執行</li>
</ul>
<h3 id="創造-Hoisting"><a href="#創造-Hoisting" class="headerlink" title="創造(Hoisting)"></a>創造(Hoisting)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">執行環境在創造的階段，設定變數以及函數在記憶體內，這個步驟叫做提升(Hoisting)</span><br></pre></td></tr></table></figure>

<p>他並不是將程式碼移到最上面，在執行程式碼前，Javascript 已經為變數和函數在記憶體內建立一個空間了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b();    // call b</span><br><span class="line">console.log(a);  // undefined</span><br><span class="line">var a = &#x27;Hello world&#x27;;</span><br><span class="line">function b() &#123;</span><br><span class="line">    console.log(&#x27;call b&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是變數比較不一樣， Javascript 變數建立空間時並不知道他是什麼值，只知道有這個變數，直到他被執行才會知道，所以先放上 undefined 代替</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b();    // call b</span><br><span class="line">console.log(a);  // error : not defined</span><br><span class="line">function b() &#123;</span><br><span class="line">    console.log(&#x27;call b&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>undefined 在 Javascript 中是一個值，不是 string</p>
<h3 id="執行"><a href="#執行" class="headerlink" title="執行"></a>執行</h3><p>Javascript 為 單執行緒 以及 同步執行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function a() &#123;</span><br><span class="line">    b();</span><br><span class="line">    var c;</span><br><span class="line">&#125;</span><br><span class="line">function b() &#123;</span><br><span class="line">    var e;</span><br><span class="line">&#125;</span><br><span class="line">a();</span><br><span class="line">var d;</span><br></pre></td></tr></table></figure>

<p><img src="0_G9qgUWv39SygmJLQ.png" alt="execution_content"></p>
<h4 id="執行順序："><a href="#執行順序：" class="headerlink" title="執行順序："></a>執行順序：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a() -&gt; b() -&gt; var e -&gt; var c -&gt; var d</span><br></pre></td></tr></table></figure>

<p>呼叫新函數會創造新的執行環境，並堆在執行堆的最上方，然後逐行執行，函數執行結束後，該函數的執行環境就會離開執行堆，接著繼續執行執行堆最上方的執行環境</p>
<h2 id="VARIABLE-ENVIRONMENT-變數環境"><a href="#VARIABLE-ENVIRONMENT-變數環境" class="headerlink" title="VARIABLE ENVIRONMENT(變數環境)"></a>VARIABLE ENVIRONMENT(變數環境)</h2><p>變數環境只是在描述你創造變數的位置，還有他在記憶體中與其他變數的關係</p>
<p>變數在哪裡？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">funtcion b() &#123;</span><br><span class="line">    var myVar;</span><br><span class="line">    console.log(myVar);  // undefined</span><br><span class="line">&#125;</span><br><span class="line">function a() &#123;</span><br><span class="line">    var myVar = 2;</span><br><span class="line">    console.log(myVar);  // 2</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br><span class="line">var myVar = 1;</span><br><span class="line">console.log(myVar);  // 1</span><br><span class="line">a();</span><br></pre></td></tr></table></figure>

<p><img src="0_4Dw330nMuSRGtZpv.png" alt="var"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">funtcion b() &#123;</span><br><span class="line">    console.log(myVar);  // 1</span><br><span class="line">&#125;</span><br><span class="line">function a() &#123;</span><br><span class="line">    var myVar = 2;</span><br><span class="line">    console.log(myVar);  // 2</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br><span class="line">var myVar = 1;</span><br><span class="line">console.log(myVar);  // 1</span><br><span class="line">a();</span><br></pre></td></tr></table></figure>
<p><img src="0_vWx0zFBx4pt9UEJG.png" alt="var"></p>
<p><code>作用域內 (function) 找不到就往外部環境 (window) 尋找</code></p>
<h2 id="Scope-Chain-範圍鏈"><a href="#Scope-Chain-範圍鏈" class="headerlink" title="Scope Chain(範圍鏈)"></a>Scope Chain(範圍鏈)</h2><p>根據程式碼的物理位置決定外部環境</p>
<h3 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h3><p>範圍是變數可以被取用的區域</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function a() &#123;</span><br><span class="line">    function b() &#123;</span><br><span class="line">        console.log(myVar)    // 1</span><br><span class="line">    &#125;</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br><span class="line">var myVar = 1;</span><br><span class="line">a();</span><br><span class="line">function a() &#123;</span><br><span class="line">    function b() &#123;</span><br><span class="line">        console.log(myVar)    // 2</span><br><span class="line">    &#125;</span><br><span class="line">    var myVar = 2;</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br><span class="line">var myVar = 1;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure>
<p><code>function b 的外部環境為 fuction a</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function b() &#123;</span><br><span class="line">    console.log(myVar)    // 1</span><br><span class="line">&#125;</span><br><span class="line">function a() &#123;</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br><span class="line">var myVar = 1;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure>
<p><code>function b 的外部環境為 global</code></p>
<h2 id="ASYNCHRONOUS-非同步"><a href="#ASYNCHRONOUS-非同步" class="headerlink" title="ASYNCHRONOUS(非同步)"></a>ASYNCHRONOUS(非同步)</h2><p>more than one at a time</p>
<p>Javascript 用同步的方式處理非同步事件</p>
<p>當執行堆空的後才會執行事件佇列，所以這不是真的非同步，而是瀏覽器非同步的把東西放到事件佇列，但原本的程式仍然繼續一行行執行，當執行完後，執行堆空了，執行環境清除了，都結束後才會處理事件佇列</p>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p><img src="0_pItH2HeSypX5gwSS.png" alt="exmaple"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function waitThreeSeconds() &#123;</span><br><span class="line">	var ms = 3000 + new Date().getTime();</span><br><span class="line">	while (new Date() &lt; ms) &#123;&#125;</span><br><span class="line">	console.log(&#x27;finished function&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">function clickHandler() &#123;</span><br><span class="line">	console.log(&#x27;click event!&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">document.addEventListener(&#x27;click&#x27;, clickHandler);</span><br><span class="line">waitThreeSeconds();</span><br><span class="line">console.log(&#x27;finish execution&#x27;);</span><br></pre></td></tr></table></figure>
<h4 id="沒點擊畫面"><a href="#沒點擊畫面" class="headerlink" title="沒點擊畫面 :"></a>沒點擊畫面 :</h4><p>結果: (3秒後)<br>finished function<br>finish execution</p>
<h4 id="有點擊畫面"><a href="#有點擊畫面" class="headerlink" title="有點擊畫面 :"></a>有點擊畫面 :</h4><p>結果: (3秒後)<br>finished function<br>finish execution<br>click event!</p>
<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p><strong>優先處理執行堆，結束後才處理事件佇列</strong></p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>【課程紀錄】克服 JS 奇怪的地方 — 物件</title>
    <url>/2019/06/22/Javascript/object/</url>
    <content><![CDATA[<h2 id="NAMESPACE-命名空間"><a href="#NAMESPACE-命名空間" class="headerlink" title="NAMESPACE (命名空間)"></a>NAMESPACE (命名空間)</h2><p>a container for variables and functions<br>typically to keep variables and functions with the same name separate</p>
<p>Javascript 沒有命名空間，也不需要，物件可以代替命名空間</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var objectLiteral = &#123;</span><br><span class="line">    firstname: &#x27;Mary&#x27;,</span><br><span class="line">    isAProgrammer: true</span><br><span class="line">&#125;</span><br><span class="line">console.log(JSON.stringify(objectLiteral));   // json</span><br><span class="line">var jsonValue = JSON.parse(&#x27;&#123; &quot;firstname&quot;: &quot;Mary&quot;, &quot;isAProgrammer&quot;: true&#125;&#x27;);</span><br><span class="line">console.log(jsonValue)  // object</span><br></pre></td></tr></table></figure>

<h2 id="FIRST-CALSS-FUNCTION-一級函數"><a href="#FIRST-CALSS-FUNCTION-一級函數" class="headerlink" title="FIRST CALSS FUNCTION (一級函數)"></a>FIRST CALSS FUNCTION (一級函數)</h2><p>EVERYTHING YOU CAN DO WITH OTHER TYPES YOU CAN DO WITH FUNCTION<br>assign them to variables, pass them around, create them on the fly.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function greet() &#123;</span><br><span class="line">    console.log(&#x27;hi&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">greet.language = &#x27;english&#x27;;</span><br><span class="line">console.log(greet)  // function</span><br><span class="line">console.log(greet.language) // english</span><br></pre></td></tr></table></figure>

<p><strong>function 也是 object</strong></p>
<p><img src="0_HCdP2iVGbMKN8Mhh.png" alt="object"></p>
<h2 id="EXPRESSION-表示式"><a href="#EXPRESSION-表示式" class="headerlink" title="EXPRESSION (表示式)"></a>EXPRESSION (表示式)</h2><p>A UNIT OF CODE THAT RESULTS IN A VALUE<br>it doesn’t have to save to a variable.</p>
<p>表示式會回傳一個值，不需要存在變數中也可以得到結果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(1+2)  // 3</span><br></pre></td></tr></table></figure>

<h2 id="statement-陳述式"><a href="#statement-陳述式" class="headerlink" title="statement (陳述式)"></a>statement (陳述式)</h2><p>陳述句不會回傳任何值， if 就是陳述句</p>
<h3 id="函數陳述句"><a href="#函數陳述句" class="headerlink" title="函數陳述句"></a>函數陳述句</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function greet() &#123;</span><br><span class="line">    console.log(&#x27;h1&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函數表示式"><a href="#函數表示式" class="headerlink" title="函數表示式"></a>函數表示式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var anonymousGreet = function() &#123;</span><br><span class="line">    console.log(&#x27;h1&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">anonymousGreet(); // h1</span><br></pre></td></tr></table></figure>

<h3 id="By-value-amp-By-reference"><a href="#By-value-amp-By-reference" class="headerlink" title="By value &amp; By reference"></a>By value &amp; By reference</h3><p><img src="0_g6T4wq59aBld1ufc.png" alt="object"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// by value (primitives)</span><br><span class="line">var a = 3;</span><br><span class="line">var b;</span><br><span class="line">b = a;</span><br><span class="line">a = 2;</span><br><span class="line">console.log(a);  // 2</span><br><span class="line">console.log(b);  // 3</span><br><span class="line">// by reference (all objects (including functions))</span><br><span class="line">var c = &#123; greeting: &#x27;hi&#x27; &#125;;</span><br><span class="line">var d;</span><br><span class="line">d = c;</span><br><span class="line">c.greeting = &#x27;hello&#x27;; // mutate</span><br><span class="line">console.log(c);  // Hola</span><br><span class="line">console.log(d);  // Hola</span><br><span class="line">// by reference (even as parameters)</span><br><span class="line">function changeGreeting(obj) &#123;</span><br><span class="line">    obj.greeting = &#x27;Hola&#x27;; // mutate   </span><br><span class="line">&#125;</span><br><span class="line">changeGreeting(d);</span><br><span class="line">console.log(c);  // Hola</span><br><span class="line">console.log(d);  // Hola</span><br><span class="line">// equals operator sets up new memory space (new address)</span><br><span class="line">c = &#123; greeting: &#x27;howdy&#x27; &#125;;</span><br><span class="line">console.log(c);  // howdy</span><br><span class="line">console.log(d);  // Hola</span><br></pre></td></tr></table></figure>

<h2 id="argument-參數"><a href="#argument-參數" class="headerlink" title="argument(參數)"></a>argument(參數)</h2><p><code>arguments</code>其實就是<code>parameters</code>的意思，也就是說，arguments會包含所有你放入function中的參數值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function person(name, age, sex, ...other) &#123;</span><br><span class="line">		console.log(arguments)</span><br><span class="line">		console.log(other)</span><br><span class="line">		console.log(arguments[0])</span><br><span class="line">	&#125;</span><br><span class="line">	person(&#x27;Mike&#x27;, 123, &#x27;male&#x27;, &#x27;para1&#x27;, &#x27;para2&#x27;)</span><br></pre></td></tr></table></figure>

<p><img src="0_ODiFG8b03q4iEG_E.png" alt="object"></p>
<p><code>arguments回傳的值是斜體的 [ ]</code> ，看起來很像陣列(array-like)，但它並不是真的陣列！所以arguments回傳的值並不具備所有陣列所具有的特徵。</p>
<h2 id="展開運算子-spread-…"><a href="#展開運算子-spread-…" class="headerlink" title="展開運算子 spread(…)"></a>展開運算子 spread(…)</h2><p>把函數中許多的參數 (arguments) 或陣列中許多的元素 (elements) 形成一個新的變數。也不是真的陣列 (array-like)，斜體的 [ ]<br>傳入非預設的參數也可以取得，存放在變數中 (array-like)</p>
<h2 id="立即呼叫的函數表示式-IIFEs"><a href="#立即呼叫的函數表示式-IIFEs" class="headerlink" title="立即呼叫的函數表示式(IIFEs)"></a>立即呼叫的函數表示式(IIFEs)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// using an Immediately Invoked Function Expression (IIFE)</span><br><span class="line">var greeting = function(name) &#123;</span><br><span class="line">    return &#x27;Hello &#x27; + name;</span><br><span class="line">&#125;(&#x27;John&#x27;);</span><br><span class="line">console.log(greeting);   // Hello John</span><br><span class="line">console.log(greeting()); // error greeting is not a function</span><br><span class="line">var firstname = &#x27;John&#x27;;</span><br><span class="line">(function(name) &#123;</span><br><span class="line">    var greeting = &#x27;Inside IIFE: Hello&#x27;;</span><br><span class="line">    console.log(greeting + &#x27; &#x27; + name);</span><br><span class="line">&#125;(firstname));</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>【課程紀錄】克服 JS 奇怪的地方 — 建立物件</title>
    <url>/2019/06/27/Javascript/make-object/</url>
    <content><![CDATA[<h2 id="函數建構子"><a href="#函數建構子" class="headerlink" title="函數建構子"></a>函數建構子</h2><p>一個正常的函數用來建立物件，當你在呼叫函數前面放了new，在執行環境的創造階段被產生的this變數，會指向新的空物件，當函數執行結束時，會回<br>傳該物件</p>
<h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><p>是一個運算子，用來建立新物件，this 會指向新物件</p>
<h3 id="使用new時，發生的事"><a href="#使用new時，發生的事" class="headerlink" title="使用new時，發生的事"></a>使用new時，發生的事</h3><p><strong>空物件被建立 -&gt; 呼叫函數 -&gt; 產生this -&gt; this指向新的空物件 -&gt; Javascript 回傳被new運算子所建立的新物件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Person(firstname, lastname) &#123;</span><br><span class="line">    console.log(this)  // Person &#123;&#125;</span><br><span class="line">    this.firstname = firstname;</span><br><span class="line">    this.lastname = lastname;</span><br><span class="line">    console.log(&#x27;This function is invoked&#x27;);  // This function is invoked</span><br><span class="line">&#125;</span><br><span class="line">var john = new Person(&#x27;John&#x27;, &#x27;Doe&#x27;);</span><br><span class="line">console.log(john);  // Person &#123;firstname: &quot;John&quot;, lastname: &quot;Doe&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>使用 new 會呼叫後面的函數</p>
<h3 id="如果沒有使用-new"><a href="#如果沒有使用-new" class="headerlink" title="如果沒有使用 new"></a>如果沒有使用 new</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Person(firstname, lastname) &#123;</span><br><span class="line">    console.log(this)  // window &#123;&#125;</span><br><span class="line">    this.firstname = firstname;</span><br><span class="line">    this.lastname = lastname;</span><br><span class="line">    console.log(&#x27;This function is invoked&#x27;);  // This function is invoked</span><br><span class="line">&#125;</span><br><span class="line">var john = Person(&#x27;John&#x27;, &#x27;Doe&#x27;);</span><br><span class="line">console.log(john);  // undefined</span><br></pre></td></tr></table></figure>

<p>沒有使用 new 的話，function Person 不會回傳任何東西，所以會是 undefined</p>
<h2 id="用函數和函數建構子設定原型"><a href="#用函數和函數建構子設定原型" class="headerlink" title="用函數和函數建構子設定原型"></a>用函數和函數建構子設定原型</h2><h3 id="使用-prototype"><a href="#使用-prototype" class="headerlink" title="使用 prototype"></a>使用 prototype</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Person(firstname, lastname) &#123;</span><br><span class="line">    this.firstname = firstname;</span><br><span class="line">    this.lastname = lastname;</span><br><span class="line">&#125;</span><br><span class="line">// 添加 getFullName 到 Person 的原型上</span><br><span class="line">Person.prototype.getFullName = function() &#123;</span><br><span class="line">    return this.firstname + &#x27; &#x27; + this.lastname; </span><br><span class="line">&#125;</span><br><span class="line">var john = new Person(&#x27;John&#x27;, &#x27;Doe&#x27;);</span><br></pre></td></tr></table></figure>

<h3 id="為何要這樣做，不直接加到-function-Person-裡面就好？"><a href="#為何要這樣做，不直接加到-function-Person-裡面就好？" class="headerlink" title="為何要這樣做，不直接加到 function Person 裡面就好？"></a>為何要這樣做，不直接加到 function Person 裡面就好？</h3><p><code>因為會佔據記憶體空間</code>，如果加在 Person 裡面，我們新增 1000 個物件，就會有 1000個 getFullName 方法，function 就是物件，也會佔據記憶體空間，但如果是加在原型鍊上，就只會有一個，雖然有 1000 個物件，但只有一個 getFullName 方法</p>
<h3 id="內建的函數建構子"><a href="#內建的函數建構子" class="headerlink" title="內建的函數建構子"></a>內建的函數建構子</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let a = new String(&#x27;john&#x27;)</span><br><span class="line">console.log(a)  // String &#123;&quot;john&quot;&#125; -&gt; 是個物件，不是字串</span><br><span class="line">&#x27;john&#x27;.length  === a.length  //true</span><br><span class="line">// &#x27;john&#x27; Javascript 會自動判定你要的是物件不是純值，所以將字串轉換，便可以取用到 length 方法，但不會自動轉換數值為物件</span><br></pre></td></tr></table></figure>

<p>a. 可以取用到一堆能夠在字串上用的方法，這些方法沒有在 a 上，而是在 <code>String.prototype上</code></p>
<h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h2><p>透過 <code>Object.create()</code> 可以建立一個空物件，同時可以將你帶入 <code>Object.create()</code> 的參數內容變成該物件的原型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var Person = &#123;</span><br><span class="line">  firstName: &#x27;Default&#x27;,</span><br><span class="line">  lastName: &#x27;Default&#x27;,</span><br><span class="line">  getFullName: function () &#123;</span><br><span class="line">    return this.firstName + &quot; &quot; + this.lastName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">var john = Object.create(Person);</span><br><span class="line">console.log(john.getFullName());   // Default Default</span><br><span class="line">john.firstName = &#x27;John&#x27;;</span><br><span class="line">john.lastName = &#x27;Doe&#x27;;</span><br><span class="line">console.log(john.getFullName());  // John Doe</span><br></pre></td></tr></table></figure>

<h2 id="function-繼承"><a href="#function-繼承" class="headerlink" title="function 繼承"></a>function 繼承</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Person(firstname, lastname) &#123;</span><br><span class="line">	this.firstname = firstname;</span><br><span class="line">	this.lastname = lastname;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getFullName = function() &#123;</span><br><span class="line">	return this.firstname + &#x27; &#x27; + this.lastname;</span><br><span class="line">&#125;</span><br><span class="line">function newPerson(height, weight, sex) &#123;</span><br><span class="line">	this.height = height;</span><br><span class="line">	this.weight = weight;</span><br><span class="line">	this.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line">newPerson.prototype = Object.create(Person.prototype)</span><br><span class="line">// newPerson 的原型變成 Person</span><br><span class="line">let John = new newPerson(175,60,&#x27;male&#x27;)</span><br><span class="line">// 原型為 Person</span><br><span class="line">John.getFullName()   //  undefined undefined</span><br><span class="line">John.firstname = &#x27;John&#x27;;</span><br><span class="line">John.lastname = &#x27;Doe&#x27;;</span><br><span class="line">John.getFullName()   // John Doe</span><br></pre></td></tr></table></figure>

<p>當使用 Object.create 會創造一個新的空物件，在執行時會先找到物件中的屬性，找不到才會往原型找</p>
<h2 id="如果瀏覽器不支援-Object-create"><a href="#如果瀏覽器不支援-Object-create" class="headerlink" title="如果瀏覽器不支援 Object.create()"></a>如果瀏覽器不支援 Object.create()</h2><p>我們會寫一些程式來填補某些瀏覽器不支援的情況，我們把這些程式稱做 polyfill。<br>如果我們不確定瀏覽器是不是有支援 Object.create() 的話，我們可以寫如下的 polyfill：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// polyfill for Object.create()</span><br><span class="line">if (!Object.create) &#123;</span><br><span class="line">  Object.create = function (o) &#123;</span><br><span class="line">    if (arguments.length &gt; 1) &#123;</span><br><span class="line">      throw new Error(&#x27;Object.create implementation only accepts the first parameter&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    function F() &#123;&#125;;</span><br><span class="line">    F.prototype = o;</span><br><span class="line">    return new F();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先，<code>if(!Object.create)</code> 是用來判斷瀏覽器中是否有內建 <code>Object.create()</code> 的函式，如果沒有的話就會回傳 undefined ，在前面加一個 ! 這個邏輯運算子，則會把 undefined轉換成布林值，所以這段程式碼轉成中文的話，意思就是「如果 Object.create 不存在的話，則執行… 」。<br>當 Object.create 不存在的時候，接著會建立 Object.create 這個 function。 <code>if(arguments.length &gt; 1)</code> 是說明如果所代入的參數超過一個的話，會在 console.log中回傳錯誤訊息。<br>最後會去執行 Object.create 這個函式原本會執行的內容，也就是先建立一個空的函式 <code>F()&#123; &#125;</code>，然後把原本基礎物件的內容放入 F.prototype 中，最後再用函式建構式（function constructors）的方式，回傳 <code>new F( )</code> ，如此，就能夠達到 <code>Object.create()</code> 原本的效果</p>
<h2 id="Class-類別"><a href="#Class-類別" class="headerlink" title="Class(類別)"></a>Class(類別)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line">    constructor(firstname, lastname)&#123;</span><br><span class="line">        this.firstname = firstname;</span><br><span class="line">        this.lastname = lastname;</span><br><span class="line">    &#125;</span><br><span class="line">    getFullName()&#123;</span><br><span class="line">        return &quot;Hello &quot;+ this.firstname + &quot; &quot; + this.lastname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var john = new Person(&quot;John&quot;,&quot;Doe&quot;);</span><br><span class="line">console.log(john);  // Person &#123;firstname: &#x27;John&#x27;, lastname: &#x27;Doe&#x27;&#125;</span><br></pre></td></tr></table></figure>

<p>在 JavaScript 中雖然和其他程式一樣使用了 class 這個關鍵字，但要注意的是 class 裡面所建立的內容仍然是個物件</p>
<p>在class中，我們可以使用 constructor 來建立物件，同時，我們也可以在class中放入方法，最後一樣透過 new 這個關鍵字，我們就可以建立john這個物件。要注意的是，在一個class中，只能有一個constructor</p>
<h2 id="建立子類別-—-extends"><a href="#建立子類別-—-extends" class="headerlink" title="建立子類別 — extends"></a>建立子類別 — extends</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//  code from MDN</span><br><span class="line">class Animal &#123;</span><br><span class="line">    constructor(name)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    speak()&#123;</span><br><span class="line">        return this.name + &#x27; makes a noise&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Dog extends Animal&#123;</span><br><span class="line">    speak()&#123;</span><br><span class="line">        return this.name + &#x27; makes a bark&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var ruby = new Dog(&quot;Ruby&quot;);</span><br><span class="line">console.log(ruby);  // Dog &#123;name: &#x27;Ruby&#x27;&#125;</span><br><span class="line">ruby.speak();  // ruby makes a bark</span><br></pre></td></tr></table></figure>

<h2 id="呼叫父類別-—-super"><a href="#呼叫父類別-—-super" class="headerlink" title="呼叫父類別 — super"></a>呼叫父類別 — super</h2><p>如果我們想要在子類別中，呼叫父類別的方法來使用，可以透過 super 這個關鍵字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//  modify code from MDN</span><br><span class="line">class Animal&#123;</span><br><span class="line">    constructor(name)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    speak()&#123;</span><br><span class="line">        return this.name + &#x27; makes a noise&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Dog extends Animal&#123;</span><br><span class="line">    speak()&#123;</span><br><span class="line">        return this.name + &#x27; makes a bark&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    speakAnimal()&#123;</span><br><span class="line">        return super.speak();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var ruby = new Dog(&quot;Ruby&quot;);</span><br><span class="line">console.log(ruby.speak());    //    Ruby makes a bark</span><br><span class="line">console.log(ruby.speakAnimal();    //    Ruby makes a noise</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Whack A Mole</title>
    <url>/2019/06/05/JS30/JS30-whack-a-mole/</url>
    <content><![CDATA[<h1 id="30-—-Whack-A-Mole"><a href="#30-—-Whack-A-Mole" class="headerlink" title="30 — Whack A Mole"></a>30 — Whack A Mole</h1><p><img src="0_3_pU30Luq942--g8.png" alt="Whack A Mole"></p>
<h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>JS30的最終篇啦！這次要來做一個打地鼠的小遊戲:D</p>
<p><a href="https://des86532.github.io/javascript-30/30_Whack-A-Mole/index.html">Whack A Mole</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/30_Whack-A-Mole" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-取得頁面元素並設定預設變數"><a href="#Step1-取得頁面元素並設定預設變數" class="headerlink" title="Step1. 取得頁面元素並設定預設變數"></a>Step1. 取得頁面元素並設定預設變數</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**  取得頁面元素 */</span><br><span class="line">const holes = document.querySelectorAll(&#x27;.hole&#x27;);</span><br><span class="line">const scoreBoard = document.querySelector(&#x27;.score&#x27;);</span><br><span class="line">const moles = document.querySelectorAll(&#x27;.mole&#x27;);</span><br><span class="line">/** 預設變數設定 */</span><br><span class="line">let lastHole; // 最後一次出現的地鼠洞</span><br><span class="line">let timeUP = false; // 遊戲時間是否結束戳記</span><br><span class="line">let score = 0; // 分數</span><br></pre></td></tr></table></figure>
<h3 id="Step2-亂數決定地鼠出現後存在的時間-amp-地鼠出現的洞"><a href="#Step2-亂數決定地鼠出現後存在的時間-amp-地鼠出現的洞" class="headerlink" title="Step2. 亂數決定地鼠出現後存在的時間&amp;地鼠出現的洞"></a>Step2. 亂數決定地鼠出現後存在的時間&amp;地鼠出現的洞</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/** 地鼠出現後存在時間，傳入最小&amp;最大值，回傳一個區間亂數 */</span><br><span class="line">function randomTime(min, max) &#123;</span><br><span class="line">  return Math.round(Math.random() * (max - min) + min);</span><br><span class="line">&#125;</span><br><span class="line">/** 地鼠出現的洞 */</span><br><span class="line">function randomHole(holes) &#123;</span><br><span class="line">  // 取得地鼠洞數量區間內隨機一個洞</span><br><span class="line">  const idx = Math.floor(Math.random() * holes.length);</span><br><span class="line">  const hole = holes[idx];</span><br><span class="line">  // 避免骰到相同的</span><br><span class="line">  if (hole === lastHole) &#123;</span><br><span class="line">    return randomHole(holes);</span><br><span class="line">  &#125;</span><br><span class="line">  // 紀錄最後一個出現的地鼠洞</span><br><span class="line">  lastHole = hole;</span><br><span class="line">  return hole;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Step3-地鼠出現的主程式"><a href="#Step3-地鼠出現的主程式" class="headerlink" title="Step3. 地鼠出現的主程式"></a>Step3. 地鼠出現的主程式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**  地鼠出現 */</span><br><span class="line">function peep() &#123;</span><br><span class="line">  // 取得存在時間</span><br><span class="line">  const time = randomTime(300, 1000);</span><br><span class="line">  // 取得出現的洞</span><br><span class="line">  const hole = randomHole(holes);</span><br><span class="line">  // 移除已槌標記</span><br><span class="line">  hole.querySelector(&#x27;.mole&#x27;).classList.remove(&#x27;bonked&#x27;);</span><br><span class="line">  // 增加出現的動畫class</span><br><span class="line">  hole.classList.add(&#x27;up&#x27;);</span><br><span class="line">  // 設定存在時間到的時候移除出現動畫，且若遊戲時間未結束就繼續跑下一run</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    hole.classList.remove(&#x27;up&#x27;);</span><br><span class="line">    if (!timeUP) peep();</span><br><span class="line">  &#125;, time)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Step4-打地鼠"><a href="#Step4-打地鼠" class="headerlink" title="Step4. 打地鼠"></a>Step4. 打地鼠</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/** 打地鼠 */</span><br><span class="line">function bonk(e) &#123;</span><br><span class="line">  // isTrusted防止腳本操作，class有bonked代表已被搥過，若符合上述兩者則不進行</span><br><span class="line">  if(!e.isTrusted || this.classList.contains(&#x27;bonked&#x27;)) return;</span><br><span class="line">  // 替被打到的地鼠加上bonked的樣式避免連續點擊得分</span><br><span class="line">  this.classList.add(&#x27;bonked&#x27;); </span><br><span class="line">  // 打到就移除出現的動畫</span><br><span class="line">  this.classList.remove(&#x27;up&#x27;);</span><br><span class="line">  // 加分</span><br><span class="line">  score++;</span><br><span class="line">  // 更新顯示分數</span><br><span class="line">  scoreBoard.textContent = score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Step5-開始遊戲設定，並綁定打地鼠動作到每個地鼠身上"><a href="#Step5-開始遊戲設定，並綁定打地鼠動作到每個地鼠身上" class="headerlink" title="Step5. 開始遊戲設定，並綁定打地鼠動作到每個地鼠身上"></a>Step5. 開始遊戲設定，並綁定打地鼠動作到每個地鼠身上</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/** 開始遊戲 */</span><br><span class="line">function startGame() &#123;</span><br><span class="line">  // 時間重置</span><br><span class="line">  timeUP = false;</span><br><span class="line">  // 分數歸零</span><br><span class="line">  scoreBoard.textContent = 0;</span><br><span class="line">  score = 0;</span><br><span class="line">  // 執行地鼠出現函式</span><br><span class="line">  peep();</span><br><span class="line">  // 設定十秒後把時間押為結束</span><br><span class="line">  setTimeout(() =&gt; timeUP = true, 10000);</span><br><span class="line">&#125;</span><br><span class="line">// 替每個地鼠加上click事件綁定bonk（打地鼠）</span><br><span class="line">moles.forEach(mole =&gt; mole.addEventListener(&#x27;click&#x27;, bonk));</span><br></pre></td></tr></table></figure>
<h2 id="補充-自己的寫法"><a href="#補充-自己的寫法" class="headerlink" title="補充 自己的寫法"></a>補充 自己的寫法</h2><h3 id="變數"><a href="#變數" class="headerlink" title="變數"></a>變數</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const holes = document.querySelectorAll(&#x27;.hole&#x27;);</span><br><span class="line">const scoreBoard = document.querySelector(&#x27;.score&#x27;);</span><br><span class="line">const moles = document.querySelectorAll(&#x27;.mole&#x27;);</span><br><span class="line">const time = document.querySelector(&#x27;.time&#x27;);  //倒數計時</span><br><span class="line">let tem;</span><br></pre></td></tr></table></figure>
<h3 id="function"><a href="#function" class="headerlink" title="function"></a>function</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//地鼠要隨機跑出來 -&gt; 隨機時間</span><br><span class="line">function randomtime(min,max) &#123;</span><br><span class="line">  return min + Math.random() * (max - min)</span><br><span class="line">&#125;</span><br><span class="line">// 隨機地鼠</span><br><span class="line">function randomhole() &#123;</span><br><span class="line">  let x = setInterval(molesup,randomtime(200,2000))</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">      clearInterval(x)</span><br><span class="line">  &#125;,30000)</span><br><span class="line">&#125;</span><br><span class="line">// 隨機地鼠上升</span><br><span class="line">function molesup() &#123;</span><br><span class="line">  const num = Math.floor(Math.random() * holes.length)</span><br><span class="line">  if(tem !== num) &#123;</span><br><span class="line">    tem = num</span><br><span class="line">    holes[num].classList.add(&#x27;up&#x27;)</span><br><span class="line">    //setTimeout 時間到後自動執行，不會重複執行</span><br><span class="line">    //如果地鼠還在上升的狀態才執行，有可能因為點到地鼠的關係已經下降了</span><br><span class="line">    if(holes[num].classList.contains(&#x27;up&#x27;)) &#123;</span><br><span class="line">      setTimeout(() =&gt; &#123;holes[num].classList.remove(&#x27;up&#x27;)&#125;, randomtime(500, 2000))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    console.log(&#x27;haha&#x27;)</span><br><span class="line">    molesup()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//開始遊戲以及歸零記分板</span><br><span class="line">function startGame() &#123;</span><br><span class="line">    //清除所有setTimeout &amp;&amp; setInterval</span><br><span class="line">    stopgame()</span><br><span class="line">    //記分板歸零</span><br><span class="line">    scoreBoard.innerHTML = Number(0)</span><br><span class="line">    //秒數初始化</span><br><span class="line">    time.innerHTML = 30</span><br><span class="line">    //地鼠全部下降</span><br><span class="line">    holes.forEach(hole =&gt; &#123;</span><br><span class="line">      if(hole.classList.contains(&#x27;up&#x27;)) &#123;</span><br><span class="line">          hole.classList.remove(&#x27;up&#x27;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    //開始倒數計時</span><br><span class="line">    let countdown = setInterval(() =&gt; &#123;</span><br><span class="line">      time.innerHTML = time.innerHTML - 1</span><br><span class="line">      //當時間為0，停止倒數</span><br><span class="line">      if(time.innerHTML == 0) &#123;</span><br><span class="line">        clearInterval(countdown)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,1000)</span><br><span class="line">    //開始遊戲</span><br><span class="line">    randomhole()</span><br><span class="line">&#125;</span><br><span class="line">//清除所有setTimeout &amp;&amp; setInterval</span><br><span class="line">function stopgame() &#123;</span><br><span class="line">  let highestIntervalId = setInterval(&quot;;&quot;);</span><br><span class="line">  for (let i = 0 ; i &lt; highestIntervalId ; i++) &#123;</span><br><span class="line">      clearInterval(i); </span><br><span class="line">  &#125;</span><br><span class="line">  let highestTimeoutId = setTimeout(&quot;;&quot;);</span><br><span class="line">  for (let i = 0 ; i &lt; highestTimeoutId ; i++) &#123;</span><br><span class="line">      clearTimeout(i); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 點擊地鼠更新計分板</span><br><span class="line">// 有點到地鼠時，地鼠會馬上下降，並出現另一個新地鼠</span><br><span class="line">holes.forEach(hole =&gt; &#123;</span><br><span class="line">    hole.addEventListener(&#x27;click&#x27;, () =&gt; &#123;</span><br><span class="line">      if(hole.classList.contains(&#x27;up&#x27;)) &#123;</span><br><span class="line">        scoreBoard.innerHTML = Number(scoreBoard.innerHTML) + 1</span><br><span class="line">        hole.classList.remove(&#x27;up&#x27;)</span><br><span class="line">        molesup()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="程式備註"><a href="#程式備註" class="headerlink" title="程式備註"></a>程式備註</h2><h3 id="Event-isTrusted"><a href="#Event-isTrusted" class="headerlink" title="Event.isTrusted"></a>Event.isTrusted</h3><p>可以透過此屬性來判斷事件物件是否由使用者操作來產生，而非透過程式觸發的操作。</p>
<p><a class="link"   href="https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted" >MDN-Event.isTrusted<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
  <entry>
    <title>【課程紀錄】克服 JS 奇怪的地方 — 原型</title>
    <url>/2019/06/26/Javascript/prototype/</url>
    <content><![CDATA[<h2 id="inheritance-繼承"><a href="#inheritance-繼承" class="headerlink" title="inheritance (繼承)"></a>inheritance (繼承)</h2><p>繼承的意思其實不用想得太複雜，簡單來說就是指一個物件可以提取到其他物件中的屬性（property）或方法（method）。</p>
<h2 id="prototype-chain-原型鍊"><a href="#prototype-chain-原型鍊" class="headerlink" title="prototype chain (原型鍊)"></a>prototype chain (原型鍊)</h2><p><img src="0_jeJNJq2_pmPoM1YK.png" alt="prototype"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    firstname: &#x27;Default&#x27;,</span><br><span class="line">    lastname: &#x27;Default&#x27;,</span><br><span class="line">    getFullName: function() &#123;</span><br><span class="line">        return this.firstname + &#x27; &#x27; + this.lastname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var john = &#123;</span><br><span class="line">    firstname: &#x27;John&#x27;,</span><br><span class="line">    lastname: &#x27;Doe&#x27;</span><br><span class="line">&#125;</span><br><span class="line">// don&#x27;t do this EVER! for demo purposes only !!!!!!</span><br><span class="line">john.__proto__ = person;  </span><br><span class="line">console.log(john.getFullName());  // John Doe</span><br><span class="line">console.log(john.firstname);  // John</span><br></pre></td></tr></table></figure>

<p>一個物件裡面除了所給予的屬性值外，另外也包含原型 prototype。</p>
<p>找不到時就會往上層找，obj -&gt; proto -&gt; proto</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// string</span><br><span class="line">const a = &#x27;123&#x27;;</span><br><span class="line">// number</span><br><span class="line">const b = 123;</span><br><span class="line">// array</span><br><span class="line">const c = [1,2,3];</span><br><span class="line">// function</span><br><span class="line">const d = function() &#123;</span><br><span class="line">	console.log(&#x27;this is function&#x27;)</span><br><span class="line">&#125;;</span><br><span class="line">// object</span><br><span class="line">const e = &#123;</span><br><span class="line">	&#x27;test&#x27;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="以下分別列出各型別的原型"><a href="#以下分別列出各型別的原型" class="headerlink" title="以下分別列出各型別的原型"></a>以下分別列出各型別的原型</h2><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const a = &#x27;123&#x27;;  // string</span><br><span class="line">a.__proto__;  // string</span><br><span class="line">a.__proto__.__proto__;  // object</span><br><span class="line">a.__proto__.__proto__.__proto__;  // null</span><br><span class="line">string -&gt; string -&gt; object -&gt; null</span><br></pre></td></tr></table></figure>

<h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><p>number -&gt; number -&gt; object -&gt; null</p>
<h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><p>array -&gt; array -&gt; object -&gt; null</p>
<h3 id="function"><a href="#function" class="headerlink" title="function"></a>function</h3><p>function -&gt; function -&gt; object -&gt; null</p>
<h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><p>object -&gt; object -&gt; null</p>
<h2 id="reflection"><a href="#reflection" class="headerlink" title="reflection"></a>reflection</h2><p>一個物件可以看到自己的東西，然後改變自己的屬性和方法</p>
<h2 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h2><p><code>for…in</code> 用法和 <code>Array.prototype.forEach</code> 很像，但他可以針對物件 (object) 或陣列 (array) 使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var john = &#123;</span><br><span class="line">    firstName: &#x27;John&#x27;,</span><br><span class="line">    lastName: &#x27;Doe&#x27;</span><br><span class="line">&#125;;</span><br><span class="line">for (var prop in john) &#123;</span><br><span class="line">    console.log(prop + &#x27;:&#x27; + john[prop]);</span><br><span class="line">&#125;</span><br><span class="line">// firstName:John</span><br><span class="line">// lastName:Doe</span><br></pre></td></tr></table></figure>

<p>prop 是自訂的變數，會重複把 john 物件的屬性存在變數中，直到沒有屬性為止</p>
<h2 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h2><p>用來區分屬性是既有的還是本來就有的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//  function constructor</span><br><span class="line">var Person = function (firstName, lastName) &#123;</span><br><span class="line">  this.firstName = firstName</span><br><span class="line">  this.lastName = lastName</span><br><span class="line">&#125;</span><br><span class="line">//  function constructor 的 prototype</span><br><span class="line">Person.prototype.getFullName = function () &#123;</span><br><span class="line">  return this.firstName + &#x27; &#x27; + this.lastName</span><br><span class="line">&#125;</span><br><span class="line">//  根據 function constructor 所建立的物件 Customer1</span><br><span class="line">var Customer1 = new Person(&#x27;John&#x27;, &#x27;Doe&#x27;)</span><br><span class="line">//  透過for...in輸出</span><br><span class="line">for (var prop in Customer1) &#123;</span><br><span class="line">  console.log(prop + &#x27;: &#x27; + Customer1[prop])</span><br><span class="line">&#125;</span><br><span class="line">// firstName:John</span><br><span class="line">// lastName:Doe</span><br><span class="line">// getFullName: function () &#123;return this.firstname + &#x27;&#x27; + this.lastname&#125;</span><br></pre></td></tr></table></figure>

<p>這裡可以發現，連繼承的屬性也一併顯示出來了</p>
<p>使用以下的方法就可以區分是不是繼承來的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (var prop in Customer1) &#123;</span><br><span class="line">    if(Customer1.hasOwnProperty(prop) &#123;</span><br><span class="line">        console.log(prop + &#x27;: &#x27; + Customer1[prop])</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">// firstName:John</span><br><span class="line">// lastName:Doe</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>【Markdown】語法整理</title>
    <url>/2019/06/19/Markdown/markdown/</url>
    <content><![CDATA[<h2 id="標題"><a href="#標題" class="headerlink" title="標題"></a>標題</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># H1</span><br><span class="line">## H2</span><br><span class="line">### H3</span><br><span class="line">#### H4</span><br><span class="line">##### H5</span><br><span class="line">###### H6</span><br><span class="line">最常使用的 H1 與 H2 標題，還有更鮮明的另一種寫法：</span><br><span class="line">Alt-H1</span><br><span class="line">======</span><br><span class="line">Alt-H2</span><br><span class="line">------</span><br></pre></td></tr></table></figure>

<h2 id="強調語法"><a href="#強調語法" class="headerlink" title="強調語法"></a>強調語法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*asterisks*  //斜體</span><br><span class="line">**asterisks** //粗體</span><br></pre></td></tr></table></figure>

<h2 id="清單"><a href="#清單" class="headerlink" title="清單"></a>清單</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 无序列表一  //可以使用星號建立無序清單</span><br><span class="line">- 无序列表二  //或是短橫線（負號）</span><br><span class="line">+ 无序列表三  //使用半形加號也可以</span><br><span class="line">1. 有序列表一</span><br><span class="line">2. 有序列表二</span><br><span class="line">3. 有序列表三</span><br></pre></td></tr></table></figure>

<h2 id="連結設定"><a href="#連結設定" class="headerlink" title="連結設定"></a>連結設定</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[這是一個行內連結](https://www.google.com)</span><br><span class="line">[這是一個帶有標題的行內連結](https://www.google.com &quot;Google&#x27;s Homepage&quot;)</span><br><span class="line">//滑鼠放在連結上會顯示 Google&#x27;s Homepage</span><br><span class="line">[這是一個參考連結][Arbitrary case-insensitive reference text</span><br><span class="line">[參考標的物也可以使用數字][1]</span><br><span class="line">直接使用文字對應也可以 [這段文字連到參考項目]</span><br><span class="line">[arbitrary case-insensitive reference text]: https://www.mozilla.org</span><br><span class="line">[1]: http://slashdot.org</span><br><span class="line">[這段文字連到參考項目]: http://www.reddit.com</span><br></pre></td></tr></table></figure>

<h2 id="圖片"><a href="#圖片" class="headerlink" title="圖片"></a>圖片</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">行內格式：</span><br><span class="line">![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png &quot;Logo 標題文字範例一&quot;)</span><br><span class="line">參考連結格式：</span><br><span class="line">![alt text][logo]</span><br><span class="line">[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png &quot;Logo 標題文字範例二&quot;</span><br></pre></td></tr></table></figure>

<h2 id="程式代碼與語法高亮標示"><a href="#程式代碼與語法高亮標示" class="headerlink" title="程式代碼與語法高亮標示"></a>程式代碼與語法高亮標示</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">行內 `code` 必須使用 `back-ticks` 將文字包起來（一般鍵盤左上方的第一個鍵）。</span><br></pre></td></tr></table></figure>

<p>整段獨立呈現的代碼必須使用成對的三個 back-ticks ``` 包裹起來，或是使用四個空格縮排。建議使用第一種方法，因為那能讓代碼顯著標示。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```javascript</span><br><span class="line">var s = &quot;JavaScript syntax highlighting&quot;;</span><br><span class="line">alert(s);</span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```python</span><br><span class="line">s = &quot;Python syntax highlighting&quot;</span><br><span class="line">print s</span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">No language indicated, so no syntax highlighting.</span><br><span class="line">But let&#x27;s throw in a &lt;b&gt;tag&lt;/b&gt;.</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">冒號（Colons）是用來對齊的（擺左齊左、擺右齊右，都擺就置中）。</span><br><span class="line">| Tables        | Are           | Cool  |</span><br><span class="line">| ------------- |:-------------:| -----:|</span><br><span class="line">| col 3 is      | right-aligned | $1600 |</span><br><span class="line">| col 2 is      | centered      |   $12 |</span><br><span class="line">| zebra stripes | are neat      |    $1 |</span><br><span class="line">最外圍的豎線（|）不是絕對需要，在原始文檔中你可以不要太在意美觀，實際轉成網頁或電子書時會呈現得很好。你也可以在表格內使用行內格式。</span><br><span class="line">Markdown | Less | Pretty</span><br><span class="line">--- | --- | ---</span><br><span class="line">*Still* | `renders` | **nicely**</span><br><span class="line">1 | 2 | 3</span><br></pre></td></tr></table></figure>

<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 引言（Blockquotes）常常出現在電子郵件中，表示摘錄來信原句並回覆。</span><br><span class="line">&gt; 這一行是引言的一部分。</span><br><span class="line">Quote break.</span><br><span class="line">&gt; 這是一段非常長的引言區塊，只要在句首使用了正確的符號與空格，你可以持續不間斷的撰寫，整段文字都還是會被包含在引言區塊中。當然你依舊可以在引言區塊中 *使用* **Markdown** 的行內格式標記語法。</span><br></pre></td></tr></table></figure>

<h2 id="行內-HTML"><a href="#行內-HTML" class="headerlink" title="行內 HTML"></a>行內 HTML</h2><p>因為 Markdown 本來就預設要轉換成 HTML 網頁格式，所以你當然可以直接寫入正確的 HTML 代碼，看起來都蠻正常的。（是的，電子書就是一種經過打包的 HTML 網頁組合，很像一個獨立的微型網站。）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">  &lt;dt&gt;Definition list&lt;/dt&gt;</span><br><span class="line">  &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt;</span><br><span class="line">  &lt;dt&gt;Markdown in HTML&lt;/dt&gt;</span><br><span class="line">  &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br></pre></td></tr></table></figure>

<h2 id="水平分隔線"><a href="#水平分隔線" class="headerlink" title="水平分隔線"></a>水平分隔線</h2><p>三個或三個以上的符號，必須在獨立的一行，前後不能有其他文字。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">短橫線（Hyphens）</span><br><span class="line">***</span><br><span class="line">半形星號（Asterisks）</span><br><span class="line">___</span><br><span class="line">下底線（Underscores）</span><br></pre></td></tr></table></figure>

<h2 id="空行分隔段落"><a href="#空行分隔段落" class="headerlink" title="空行分隔段落"></a>空行分隔段落</h2><p>習慣或熟悉 Markdown 如何進行分段是很重要的，基本上空行代表前後的文字都會是段落（在 HTML 中以 <code>&lt;p&gt;</code> 與 <code>&lt;/p&gt;</code> 包裹起來）。</p>
<h2 id="代辦事項"><a href="#代辦事項" class="headerlink" title="代辦事項"></a>代辦事項</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- [ ] 代辦事項</span><br><span class="line">- [x] 已完成事項</span><br></pre></td></tr></table></figure>

<h2 id="列表縮進"><a href="#列表縮進" class="headerlink" title="列表縮進"></a>列表縮進</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文章</span><br><span class="line">: 轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。</span><br><span class="line">  那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。</span><br><span class="line">  软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！</span><br></pre></td></tr></table></figure>

<h2 id="跳脫字元"><a href="#跳脫字元" class="headerlink" title="跳脫字元"></a>跳脫字元</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">加上反引號 (\)</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a class="link"   href="https://wastemobile.gitbooks.io/gitbook-chinese/content/format/markdown.html" >gitbook Markdown<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://guo365.github.io/study/Markdown.html#10" >Markdown 整理<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://github.com/riku/Markdown-Syntax-CN/blob/master/syntax.md#p" >Markdown 整理2<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>【npm】解決安裝權限不足</title>
    <url>/2019/06/14/Npm/npm-install/</url>
    <content><![CDATA[<h2 id="npm-全域安裝提示權限不足的錯誤"><a href="#npm-全域安裝提示權限不足的錯誤" class="headerlink" title="npm 全域安裝提示權限不足的錯誤"></a>npm 全域安裝提示權限不足的錯誤</h2><p>npm WARN checkPermissions Missing write access to /user/local/lib/node_modules</p>
<p><img src="0_tVAi3-9yDw0lRh8S.png" alt="npm-解決安裝權限不足"></p>
<h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>修改 npm 所安裝目錄的權限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chown -R $USER /usr/local</span><br></pre></td></tr></table></figure>
<p>會要求輸入密碼，登入密碼</p>
<h2 id="查看目錄是否已經切換權限"><a href="#查看目錄是否已經切換權限" class="headerlink" title="查看目錄是否已經切換權限"></a>查看目錄是否已經切換權限</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l /usr/local</span><br></pre></td></tr></table></figure>

<p><img src="0_Mru0X6_uz2gDKV6U.png" alt="npm-解決安裝權限不足"></p>
<p>紅色區域本來會是 root ，切換權限後會變為自己主機的名稱</p>
]]></content>
      <categories>
        <category>Npm</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>【npm】管理套件工具</title>
    <url>/2019/06/13/Npm/npm/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol>
<li>使用 Homebrew 安裝 nvm</li>
<li>使用 nvm 安裝 Node.js</li>
<li>使用 nvm 無痛切換 Node.js 版本</li>
</ol>
<h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><p>Homebrew 是 OS X 上強大的包管理器，為系統軟件提供了非常方便的安裝方式，獨特式的解決了包的依賴問題，並不再需要 sudo，一鍵式編譯，無參數困擾。</p>
<h3 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure>

<h3 id="卸載"><a href="#卸載" class="headerlink" title="卸載"></a>卸載</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)&quot;</span><br></pre></td></tr></table></figure>

<h3 id="補充語法"><a href="#補充語法" class="headerlink" title="補充語法"></a>補充語法</h3><ul>
<li>brew install git ## 安裝軟件</li>
<li>brew uninstall git ## 卸載軟件</li>
<li>brew search git ## 搜索軟件</li>
<li>brew upgrade git ## 更新軟件</li>
<li>brew cleanup git ## 刪除軟件</li>
<li>brew outdated ## 查看哪些軟件需要更新</li>
<li>brew upgrade ## 更新所有軟件，把所有的 Formula 目錄更新，並且會對本機已經安裝並有更新的軟件用 * 標明</li>
<li>brew list ## 顯示已經安裝的軟件列表</li>
</ul>
<h3 id="Homebrew-的安裝路徑及文件夾"><a href="#Homebrew-的安裝路徑及文件夾" class="headerlink" title="Homebrew 的安裝路徑及文件夾"></a>Homebrew 的安裝路徑及文件夾</h3><p>Homebrew 將本地的 /user/local 初始化為 git 的工作樹，並將目錄所有變更為當前所操作的用戶，以後的操作將不需要 sudo</p>
<blockquote>
<p><a class="link"   href="https://www.jianshu.com/p/b30878748567" >Homebrew 的作用<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://brew.sh/index_zh-tw" >官方 Homebrew<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p><img src="1_18v8t406MBGIYkvwCvS1Ug.png" alt="nvm"></p>
<h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><p>Node.js 版本管理工具，管理 Node.js 版本和 npm 版本</p>
<h3 id="安裝-1"><a href="#安裝-1" class="headerlink" title="安裝"></a>安裝</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install nvm</span><br></pre></td></tr></table></figure>
<p>安裝完後，為了讓你可以直接在 shell 使用 nvm 指令，必須在你的 <code>.bash_profile</code> 加入以下這行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;source $(brew --prefix nvm)/nvm.sh&quot; &gt;&gt; .bash_profile</span><br></pre></td></tr></table></figure>
<p>重新 source 你的 <code>.bash_profile</code> 來讓設定生效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">. ~/.bash_profile</span><br></pre></td></tr></table></figure>

<h3 id="卸載-1"><a href="#卸載-1" class="headerlink" title="卸載"></a>卸載</h3><p>第一步先移除掉相關目錄：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf ~/.nvm</span><br><span class="line">rm -rf ~/.npm</span><br><span class="line">rm -rf ~/.bower</span><br></pre></td></tr></table></figure>
<p>接著再到你的<code>~/.bash_profile</code>（ <code>~/.zshrc</code>, <code>~/.profile</code>, or <code>~/.bashrc</code> ），把 source line 砍掉：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 砍掉下面的東西</span><br><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; . &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</span><br></pre></td></tr></table></figure>

<p>重啟 terminal，查詢以下指令，應該都沒有東西了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm</span><br><span class="line">node</span><br><span class="line">npm</span><br></pre></td></tr></table></figure>

<h3 id="如果是用-Homebrew…"><a href="#如果是用-Homebrew…" class="headerlink" title="如果是用 Homebrew…"></a>如果是用 Homebrew…</h3><p>如果你碰巧之前是用 Homebrew 安裝 Node.js，先深吸一口氣，然後使用：</p>
<p>一般來說 <code>node</code> 套件會預設裝在 <code>/usr/local/bin</code>，所以請將以下的目錄都要砍掉：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf /usr/local/bin/node</span><br><span class="line">rm -rf /usr/local/bin/npm</span><br><span class="line">rm -rf /usr/local/bin/node_modules</span><br></pre></td></tr></table></figure>

<p>如果你想確認路徑到底是不是正確的可以用 <code>which node</code> 查一下。</p>
<h2 id="切換-Node-js-版本"><a href="#切換-Node-js-版本" class="headerlink" title="切換 Node.js 版本"></a>切換 Node.js 版本</h2><ul>
<li>nvm ls ## 查看可以使用的版本</li>
<li>nvm use <code>&lt;version&gt;</code></li>
</ul>
<h2 id="補充語法-1"><a href="#補充語法-1" class="headerlink" title="補充語法"></a>補充語法</h2><ul>
<li>nvm install stable ## 安装最新稳定版 node</li>
<li>nvm install <code>&lt;version&gt;</code> ## 安装指定版本，可模糊安装，如：安装v4.4.0，既可nvm install v4.4.0，又可 nvm install 4.4</li>
<li>nvm uninstall <code>&lt;version&gt;</code> ## 删除已安装的指定版本</li>
<li>nvm use <code>&lt;version&gt;</code> ## 切换使用指定的版本 node</li>
<li>nvm ls ## 列出所有安装的版本</li>
<li>nvm ls-remote ## 列出所有遠程服務器的版本（官方node version list）</li>
<li>nvm current ## 顯示當前的版本</li>
<li>nvm alias <code>&lt;name&gt; &lt;version&gt;</code> ## 给不同的版本號添加别名</li>
<li>nvm unalias <code>&lt;name&gt;</code> ## 删除已定義的别名</li>
<li>nvm reinstall-packages <code>&lt;version&gt;</code> ## 在當前版本 node 环境下，重新全局安装指定版本號的 npm 包</li>
</ul>
<blockquote>
<p><a class="link"   href="http://icarus4.logdown.com/posts/175092-nodejs-installation-guide" >Node.js 安裝與版本切換教學 (for MAC)<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://medium.com/@toumasaya/node-js-%E7%92%B0%E5%A2%83%E8%A8%AD%E5%AE%9A-for-mac-a2628836feaf" >Node.js 環境設定-for mac<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://www.jianshu.com/p/622ad36ee020" >Mac OS 下 NVM 的安装与使用<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>Node.js 是一個能夠在伺服器端運行JavaScript的開放原始碼、跨平台JavaScript 執行環境</p>
<h3 id="安裝-2"><a href="#安裝-2" class="headerlink" title="安裝"></a>安裝</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install --lts  //安裝最多人使用的版本</span><br><span class="line">nvm install &lt;version&gt;  //可以自己選擇版本</span><br><span class="line">nvm install stable  //安裝穩定版本</span><br></pre></td></tr></table></figure>

<h3 id="官方網站"><a href="#官方網站" class="headerlink" title="官方網站"></a>官方網站</h3><p><a class="link"   href="https://nodejs.org/en/download/" >Node.js 官方網站<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Homebrew-安裝"><a href="#Homebrew-安裝" class="headerlink" title="Homebrew 安裝"></a>Homebrew 安裝</h3><p>不建議使用此方法，Homebrew 不支援 ！！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure>

<h3 id="卸載-2"><a href="#卸載-2" class="headerlink" title="卸載"></a>卸載</h3><h4 id="NVM（Node-Version-Manager）安装"><a href="#NVM（Node-Version-Manager）安装" class="headerlink" title="NVM（Node Version Manager）安装"></a>NVM（Node Version Manager）安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm uninstall &lt;version&gt;</span><br></pre></td></tr></table></figure>

<h4 id="通过-Homebrew-安装"><a href="#通过-Homebrew-安装" class="headerlink" title="通过 Homebrew 安装"></a>通过 Homebrew 安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew uninstall node</span><br></pre></td></tr></table></figure>

<h4 id="未知安装方法"><a href="#未知安装方法" class="headerlink" title="未知安装方法"></a>未知安装方法</h4><p>如果這台電腦來自別人，你也不知道之前究竟通過什麼方式安裝的 Node，那麼我們只能靠猜了，但是也不能瞎猜，這裡需要用到命令行指令 <code>which</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ which node</span><br><span class="line">/Users/scott/.nvm/versions/node/v4.1.2/bin/node</span><br></pre></td></tr></table></figure>
<p>例如這樣的一條命令可以讓我們猜測出 Node 是通過 nvm 安裝的，然後我們就可以對症下藥按照上面介紹的方式刪除了。</p>
<blockquote>
<p><a class="link"   href="http://phoeshow.github.io/2017/05/15/Mac%E5%88%A0%E9%99%A4nodejs%E7%9A%84%E6%96%B9%E6%B3%95/" >Mac删除nodejs的方法<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="Node-js-使用方法"><a href="#Node-js-使用方法" class="headerlink" title="Node.js 使用方法"></a>Node.js 使用方法</h3><blockquote>
<p><a class="link"   href="http://www.runoob.com/nodejs/nodejs-tutorial.html" >Node.js 使用教程<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>在安装的 Node.js 的时候，npm 也会跟着一起安装，它是包管理工具。<br>npm 管理 Node.js 中的第三方插件</p>
<h4 id="安裝-3"><a href="#安裝-3" class="headerlink" title="安裝"></a>安裝</h4><p>安裝 Node.js 時，就會被安裝</p>
<h4 id="卸載-3"><a href="#卸載-3" class="headerlink" title="卸載"></a>卸載</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo npm uninstall npm -g</span><br></pre></td></tr></table></figure>
<p>如果上面卸不掉 npm<br>進到 npm 的安裝目錄 /usr/local/lib/node_modules/npm/</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo make uninstall</span><br></pre></td></tr></table></figure>
<h2 id="補充語法-2"><a href="#補充語法-2" class="headerlink" title="補充語法"></a>補充語法</h2><ul>
<li><p>npm init/ yarn init ## 初始化，會產生 package.json</p>
</li>
<li><p>npm install / yarn install ## 安裝 package.json 設定的 packages</p>
</li>
<li><p>npm install <code>[package]</code>/ yarn add <code>[package]</code> ## 安裝 package</p>
</li>
<li><p>npm uninstall [package]/ yarn remove [package] ## 移除 [package] ，後面一樣可以加 –save 、 –save-dev 、 -g</p>
</li>
<li><p>npm update / yarn upgrade ## 更新 Local 的所有 Packages</p>
</li>
</ul>
<p>npm 後面加 –save ( Yarn 不必加 ) 會存入 dependencies and devDependencies<br><code> npm install [package] --save</code><br>npm 後面加 –save-dev ( Yarn 是 –dev ) 僅存入 devDependencies<br><code> npm install [package] --save--dev</code><br>加 -g則安裝到全域 ( Yarn 則是 yarn global add [package] )<br><code> npm install -g [package]</code></p>
<blockquote>
<p><a class="link"   href="https://ithelp.ithome.com.tw/articles/10184980" >Node.js 必備工具 — NVM 、 NPM<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h2><p>前面加上 sudo 為以系統管理員身份執行的意思</p>
<p><code>--save-dev</code> 是你開發時候依賴的東西，<code>--save</code> 是你發佈後還依賴的東西。</p>
<p>比如，你寫 ES6 代碼，如果你想編譯成 <code>ES5</code> 發布那么 <code>babel</code> 就是<code>devDependencies</code>。</p>
<p>如果你用了 <code>jQuery</code>，由於發佈之後還是依赖jQuery，所以是<code>dependencies</code>。<br>當你為你的專案安裝一個套件時，正常情況下你必須先安裝他們 (在專案根目錄下 <code>npm install module-name</code>)，然後連同版本號手動將它們添加到專案配置文件 package.json 中的依賴裡（<code>dependencies</code>）。</p>
<p>-save和save-dev可以省掉你手動修改 package.json 文件的步驟。<br><code>npm install module-name -save</code> 自動把套件和版本號添加到<code>dependencies</code> 部分<br><code>npm install module-name -save-dev</code> 自動把套件和版本號添加到<code>devdependencies</code> 部分</p>
<p>至於配置文件區分這兩個部分，適用於區別開發依賴套件和產品依賴套件， devDepandencies主要是配置测试框架， 例如 jshint、mocha。</p>
]]></content>
      <categories>
        <category>Npm</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>node</tag>
        <tag>nvm</tag>
        <tag>homebrew</tag>
      </tags>
  </entry>
  <entry>
    <title>【npm】package.json</title>
    <url>/2020/07/03/Npm/package/</url>
    <content><![CDATA[<h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>我們建議每一個項目都要有一個 <code>package.json</code> 文件(包描述文件，就像產品說明書一樣)<br>這個文件可以透過 <code>npm init</code> 來自動初始化出來</p>
<p><code>npm install</code> 簡寫 <code>npm i</code><br><code>npm install &lt;包名&gt;</code> 簡寫 <code>npm i &lt;包名&gt;</code><br><code>npm install —save</code> 簡寫 <code>npm i -S</code><br><code>npm uninstall &lt;包名&gt;</code> 簡寫 <code>npm un &lt;包名&gt;</code><br><code>npm uninstall &lt;包名&gt; —save</code> 簡寫 <code>npm un &lt;包名&gt; -S</code></p>
<h3 id="下載第三方套件時，透過後面附加的地址下載"><a href="#下載第三方套件時，透過後面附加的地址下載" class="headerlink" title="下載第三方套件時，透過後面附加的地址下載"></a>下載第三方套件時，透過後面附加的地址下載</h3><p><code>npm install query —-registry=https://registry.npm.taobao.org</code></p>
<h3 id="將npm下載地址更改為https-registry-npm-taobao-org"><a href="#將npm下載地址更改為https-registry-npm-taobao-org" class="headerlink" title="將npm下載地址更改為https://registry.npm.taobao.org"></a>將npm下載地址更改為<code>https://registry.npm.taobao.org</code></h3><p><code>npm config set registry https://registry.npm.taobao.org</code></p>
<blockquote>
<p><a class="link"   href="https://www.npmjs.com/" >npm | build amazing things<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><ul>
<li>建議每個項目的跟目錄下都有一個 <code>package.json</code> 文件</li>
<li>建議執行 <code>npm install &lt;包名&gt;</code> 的時候都加上 <code>--save</code>這個選項，目的是用來保存依賴項信息<ul>
<li><code>npm install &lt;包名&gt;</code> 不會記錄在 <code>package.json</code></li>
<li><code>npm install &lt;包名&gt; --save</code> 會記錄在 <code>package.json</code> 的 <code>dependencies</code></li>
<li><pre><code>`npm install &lt;包名&gt; --save-dev` 不會記錄在 `package.json` 的 `devDependencies`
</code></pre>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Npm</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>【課程紀錄】克服 JS 的奇怪部分 — 型別與運算子</title>
    <url>/2019/06/21/Javascript/type-and-operator/</url>
    <content><![CDATA[<h1 id="Javascript-處理型別的方式：動態型別"><a href="#Javascript-處理型別的方式：動態型別" class="headerlink" title="Javascript 處理型別的方式：動態型別"></a>Javascript 處理型別的方式：動態型別</h1><p>你不需要在設定變數時告訴 Javascript 你的變數是甚麼型別，他會在運行程式時自動知道</p>
<h2 id="PRIMITIVE-TYPE-純值"><a href="#PRIMITIVE-TYPE-純值" class="headerlink" title="PRIMITIVE TYPE(純值)"></a>PRIMITIVE TYPE(純值)</h2><p>a type of data that represents a single value, not an object</p>
<ul>
<li><p>undefined<br>javascript 所有變數的初始值，表示尚未存在<br>不應該設定任何一個變數等於 undefined</p>
</li>
<li><p>null<br>也表示不存在，但比較適合來表示一個東西不存在，變數沒有值</p>
</li>
<li><p>Boolean<br>true or false</p>
</li>
<li><p>Number<br>他是浮點數</p>
</li>
<li><p>String<br>雙引號以及單引號都可以表示字串</p>
</li>
<li><p>symbol<br>之後的章節會說明</p>
</li>
</ul>
<h2 id="運算子"><a href="#運算子" class="headerlink" title="運算子"></a>運算子</h2><p>運算子都是函數</p>
<h3 id="OPERATOR-PRECEDDENCE-運算子的優先性"><a href="#OPERATOR-PRECEDDENCE-運算子的優先性" class="headerlink" title="OPERATOR PRECEDDENCE(運算子的優先性)"></a>OPERATOR PRECEDDENCE(運算子的優先性)</h3><p>具有高優先性的運算子會先計算</p>
<h3 id="ASSOCIATIVITY-相依性"><a href="#ASSOCIATIVITY-相依性" class="headerlink" title="ASSOCIATIVITY(相依性)"></a>ASSOCIATIVITY(相依性)</h3><p>代表運算子被計算的順序</p>
<p>左到右的相依性，稱作 “左相依性”<br>右到左的相依性，稱作 “右相依性”</p>
<p>當兩個運算子有相同的優先性，就由相依性判斷</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = 2, b = 3, c = 4;</span><br><span class="line">a = b = c;</span><br><span class="line">console.log(a); // 4</span><br><span class="line">console.log(b); // 4</span><br><span class="line">console.log(b); // 4</span><br></pre></td></tr></table></figure>
<p>= 為右相依性</p>
<blockquote>
<p><a href="Operator-Precedence-In-Javascript.pdf">Operator-Precedence-In-Javascript</a></p>
</blockquote>
<h3 id="COERCION-強制型轉"><a href="#COERCION-強制型轉" class="headerlink" title="COERCION(強制型轉)"></a>COERCION(強制型轉)</h3><p>轉換一個值的型別</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = 1 + &#x27;2&#x27;;</span><br><span class="line">console.log(a) // 12 (string)</span><br></pre></td></tr></table></figure>

<p>Javascript 會自動將數字 1 轉為字串 1</p>
<h3 id="比較運算子"><a href="#比較運算子" class="headerlink" title="比較運算子"></a>比較運算子</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(3 &lt; 2 &lt; 1);</span><br><span class="line">console.log(false &lt; 1);</span><br><span class="line">console.log(0 &lt; 1); // true</span><br><span class="line">console.log(1 &lt; 2 &lt; 3);</span><br><span class="line">console.log(true &lt; 3);</span><br><span class="line">console.log(1 &lt; 3); // true</span><br></pre></td></tr></table></figure>

<p>false 被強制型轉為 0<br>true 被強制型轉為 1<br>== 在比較時接受強制型轉<br>=== 不接收強制型轉(完全相同)</p>
<h2 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Number(undefined) // NaN</span><br><span class="line">Number(null) // 0</span><br><span class="line">false == 0 // true</span><br><span class="line">null == 0 // false</span><br><span class="line">null &lt; 1 // true</span><br><span class="line">&quot;&quot; == 0 // true</span><br><span class="line">&quot;&quot; == false // true</span><br></pre></td></tr></table></figure>
<p>null 在比較時不會型轉為 Number</p>
<blockquote>
<p><a href="Equalty-Comparison-And-Sameness.pdf">Equalty-Comparison-And-Sameness</a></p>
</blockquote>
<h2 id="EXEISTENCE-存在-amp-BOOLEAN-布林"><a href="#EXEISTENCE-存在-amp-BOOLEAN-布林" class="headerlink" title="EXEISTENCE(存在) &amp; BOOLEAN(布林)"></a>EXEISTENCE(存在) &amp; BOOLEAN(布林)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a;</span><br><span class="line">// undefined 被強制型轉為 false</span><br><span class="line">if(a) &#123;  </span><br><span class="line">    console.log(&#x27;something is there&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="數字-0"><a href="#數字-0" class="headerlink" title="數字 0"></a>數字 0</h3><p>0 並不是不存在，但強制型轉會轉為 false</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = 0;</span><br><span class="line">// 0 被強制型轉為 false</span><br><span class="line">if(a) &#123;</span><br><span class="line">    console.log(&#x27;something is there&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">// 建議改用</span><br><span class="line">if(a || a === 0) &#123;</span><br><span class="line">    console.log(&#x27;something is there&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="預設值"><a href="#預設值" class="headerlink" title="預設值"></a>預設值</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function greet(name) &#123;</span><br><span class="line">    console.log(name)             // undefined</span><br><span class="line">    console.log(&#x27;Hello &#x27; + name); // Hello undefined</span><br><span class="line">&#125;</span><br><span class="line">greet();</span><br><span class="line">function greet(name = &#x27;Rick&#x27;) &#123;</span><br><span class="line">    console.log(name)             // Rick</span><br><span class="line">    console.log(&#x27;Hello &#x27; + name); // Hello Rick</span><br><span class="line">&#125;</span><br><span class="line">greet();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>【Project】Vue-Car-Shop</title>
    <url>/2020/05/17/Project/Vue-Car-Shop/</url>
    <content><![CDATA[<h1 id="Vue-專案"><a href="#Vue-專案" class="headerlink" title="Vue 專案"></a>Vue 專案</h1><blockquote>
<p>自己的第一個專案，不管好與壞我都將他留下，讓以後的自己看看從前的我有多廢ＸＤ</p>
</blockquote>
<p>專案連結: <a href="https://des86532.github.io/Vue-Car-Shop/#/products">vue-car-shop</a></p>
<h2 id="使用技術"><a href="#使用技術" class="headerlink" title="使用技術"></a>使用技術</h2><ul>
<li>axios</li>
<li>jquery</li>
<li>vee-validate</li>
<li>vue-router</li>
<li>vuex</li>
<li>scss</li>
</ul>
<p>並未使用 axios 攔截器，也沒做錯誤提示和成功提示</p>
]]></content>
      <categories>
        <category>Project</category>
      </categories>
  </entry>
  <entry>
    <title>【SEO】語意化標籤&amp;結構化資料</title>
    <url>/2019/06/08/SEO/SEO-tag-and-data/</url>
    <content><![CDATA[<h1 id="【SEO】語意化標籤-amp-結構化資料"><a href="#【SEO】語意化標籤-amp-結構化資料" class="headerlink" title="【SEO】語意化標籤&amp;結構化資料"></a>【SEO】語意化標籤&amp;結構化資料</h1><p><img src="1_E_KjW9-Tpp9rm-fCt79oGQ.png" alt="SEO-語意化標籤&amp;結構化資料"></p>
<p>語意化標籤就是將我們人類所讀取的資料換成另一種方式顯示給電腦讀取</p>
<p>Micordate 是由 Google, Microsoft, Yandex, Yahoo 共同制定的規則，需要標記在網頁HTML內，主要有三種屬性</p>
<ul>
<li>itemscope : 用來標記內容，標記為讀取表頭資訊的對象</li>
<li>itemtype : 用來分類，分類此網站為甚麼樣的內容。例如: Product, Article</li>
<li>itemprop : 為分類底下的屬性</li>
</ul>
<blockquote>
<p>屬性總表：<a class="link"   href="https://schema.org/docs/full.html" >schema.org<i class="fas fa-external-link-alt"></i></a><br>快速入門文檔：<a class="link"   href="https://schema.org/docs/gs.html" >schema.org<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="使用範例："><a href="#使用範例：" class="headerlink" title="使用範例："></a>使用範例：</h2><p>我們可以給這個事物定義一個類型，比如一本書，這時就需要用到 <strong>itemtype</strong>，它的值是一個或多個 URL：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div itemscope itemtype=&quot;http://example.com/Book&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>如上的代碼片斷，我們知道它是一本書了，但是它還缺少書的信息，需要用 <strong>itemprop</strong> 來標示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div itemscope itemtype=&quot;http://example.com/Book&quot;&gt;</span><br><span class="line">  &lt;div&gt;書名：&lt;span itemprop=&quot;name&quot;&gt;改革歷程&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;作者：&lt;span itemprop=&quot;author&quot;&gt;趙紫陽&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>也許因為奇怪的設計方案，也許因為 PM 的無理取鬧，也許就是因為代碼不太好寫，佈局並不能輕易合乎要求，<strong>itemprop</strong> 可能散落於其它地方，這時可以使用 itemref 將它們連接起來：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div itemscope itemtype=&quot;http://example.com/Book&quot; itemref=&quot;a b&quot;&gt;</span><br><span class="line">  &lt;div&gt;作者：&lt;span itemprop=&quot;author&quot;&gt;趙紫陽&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 因為某些原因，書名與價格不在 scope 裡面 --&gt;</span><br><span class="line">&lt;div id=&quot;a&quot;&gt;書名：&lt;span itemprop=&quot;name&quot;&gt;改革歷程&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;b&quot;&gt;價格：&lt;span itemprop=&quot;price&quot;&gt;$12&lt;/span&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>實例： <a class="link"   href="https://schema.org/Car" >http://schema.org/Car<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div itemscope itemtype=&quot;http://schema.org/Car&quot;&gt;</span><br><span class="line">  &lt;h2 itemprop=&quot;name&quot;&gt;奇瑞QQ&lt;/h2&gt;</span><br><span class="line">  &lt;p itemprop=&quot;description&quot;&gt;中國汽車製造商奇瑞汽車公司於2003年推出的一款微型車(...)&lt;/p&gt;</span><br><span class="line">  &lt;img itemprop=&quot;image&quot; href=&quot;2003_qq.png&quot; /&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;strong&gt;顏色&lt;/strong&gt;</span><br><span class="line">    &lt;span itemprop=&quot;color&quot;&gt;黑色&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;strong&gt;齒輪數&lt;/strong&gt;</span><br><span class="line">    &lt;span itemprop=&quot;numberOfForwardGears&quot;&gt;6&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div itemprop=&quot;vehicleEngine&quot; itemscope itemtype=&quot;http://schema.org/EngineSpecification&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;strong&gt;引擎&lt;/strong&gt;</span><br><span class="line">      &lt;span itemprop=&quot;name&quot;&gt;1.1 L SQR472F I4 DOHC 16v — 50 kW at 6000 rpm, 90 N·m at 3500 rpm&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;strong&gt;氣囊數&lt;/strong&gt;</span><br><span class="line">    &lt;span itemprop=&quot;airbags&quot;&gt;4&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<h2 id="表頭範例模板"><a href="#表頭範例模板" class="headerlink" title="表頭範例模板"></a>表頭範例模板</h2><h3 id="1-The-Minimal-Template"><a href="#1-The-Minimal-Template" class="headerlink" title="1. The Minimal Template"></a>1. The Minimal Template</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Minimum Social Media Tag Template: Article</span><br><span class="line">&lt;!-- Place this data between the &lt;head&gt; tags of your website --&gt;</span><br><span class="line">&lt;title&gt;Page Title. Maximum length 60-70 characters&lt;/title&gt;</span><br><span class="line">&lt;meta name=&quot;description&quot; content=&quot;Page description. No longer than 155 characters.&quot; /&gt;</span><br><span class="line">&lt;!-- Twitter Card data --&gt;</span><br><span class="line">&lt;meta name=&quot;twitter:card&quot; value=&quot;summary&quot;&gt;</span><br><span class="line">&lt;!-- Open Graph data --&gt;</span><br><span class="line">&lt;meta property=&quot;og:title&quot; content=&quot;Title Here&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:type&quot; content=&quot;article&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:url&quot; content=&quot;http://www.example.com/&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:image&quot; content=&quot;http://example.com/image.jpg&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:description&quot; content=&quot;Description Here&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-The-Standard-Template"><a href="#2-The-Standard-Template" class="headerlink" title="2: The Standard Template"></a>2: The Standard Template</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Standard Social Media Tag Template: Article</span><br><span class="line">&lt;!-- Place this data between the &lt;head&gt; tags of your website --&gt;</span><br><span class="line">&lt;title&gt;Page Title. Maximum length 60-70 characters&lt;/title&gt;</span><br><span class="line">&lt;meta name=&quot;description&quot; content=&quot;Page description. No longer than 155 characters.&quot; /&gt;</span><br><span class="line">&lt;!-- Twitter Card data --&gt;</span><br><span class="line">&lt;meta name=&quot;twitter:card&quot; content=&quot;summary&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;twitter:site&quot; content=&quot;@publisher_handle&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;twitter:title&quot; content=&quot;Page Title&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;twitter:description&quot; content=&quot;Page description less than 200 characters&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;twitter:creator&quot; content=&quot;@author_handle&quot;&gt;</span><br><span class="line">&lt;-- Twitter Summary card images must be at least 120x120px --&gt;</span><br><span class="line">&lt;meta name=&quot;twitter:image&quot; content=&quot;http://www.example.com/image.jpg&quot;&gt;</span><br><span class="line">&lt;!-- Open Graph data --&gt;</span><br><span class="line">&lt;meta property=&quot;og:title&quot; content=&quot;Title Here&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:type&quot; content=&quot;article&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:url&quot; content=&quot;http://www.example.com/&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:image&quot; content=&quot;http://example.com/image.jpg&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:description&quot; content=&quot;Description Here&quot; /&gt; </span><br><span class="line">&lt;meta property=&quot;og:site_name&quot; content=&quot;Site Name, i.e. Moz&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;fb:admins&quot; content=&quot;Facebook numeric ID&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-The-Full-Monty"><a href="#3-The-Full-Monty" class="headerlink" title="3: The Full Monty"></a>3: The Full Monty</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Full Social Media Tag Template: Article</span><br><span class="line">&lt;!-- Update your html tag to include the itemscope and itemtype attributes. --&gt;</span><br><span class="line">&lt;html itemscope itemtype=&quot;http://schema.org/Article&quot;&gt;</span><br><span class="line">&lt;!-- Place this data between the &lt;head&gt; tags of your website --&gt;</span><br><span class="line">&lt;title&gt;Page Title. Maximum length 60-70 characters&lt;/title&gt;</span><br><span class="line">&lt;meta name=&quot;description&quot; content=&quot;Page description. No longer than 155 characters.&quot; /&gt;</span><br><span class="line">&lt;!-- Schema.org markup for Google+ --&gt;</span><br><span class="line">&lt;meta itemprop=&quot;name&quot; content=&quot;The Name or Title Here&quot;&gt;</span><br><span class="line">&lt;meta itemprop=&quot;description&quot; content=&quot;This is the page description&quot;&gt;</span><br><span class="line">&lt;meta itemprop=&quot;image&quot; content=&quot;http://www.example.com/image.jpg&quot;&gt;</span><br><span class="line">&lt;!-- Twitter Card data --&gt;</span><br><span class="line">&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;twitter:site&quot; content=&quot;@publisher_handle&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;twitter:title&quot; content=&quot;Page Title&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;twitter:description&quot; content=&quot;Page description less than 200 characters&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;twitter:creator&quot; content=&quot;@author_handle&quot;&gt;</span><br><span class="line">&lt;!-- Twitter summary card with large image must be at least 280x150px --&gt;</span><br><span class="line">&lt;meta name=&quot;twitter:image:src&quot; content=&quot;http://www.example.com/image.jpg&quot;&gt;</span><br><span class="line">&lt;!-- Open Graph data --&gt;</span><br><span class="line">&lt;meta property=&quot;og:title&quot; content=&quot;Title Here&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:type&quot; content=&quot;article&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:url&quot; content=&quot;http://www.example.com/&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:image&quot; content=&quot;http://example.com/image.jpg&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:description&quot; content=&quot;Description Here&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:site_name&quot; content=&quot;Site Name, i.e. Moz&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;article:published_time&quot; content=&quot;2013-09-17T05:59:00+01:00&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;article:modified_time&quot; content=&quot;2013-09-16T19:08:47+01:00&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;article:section&quot; content=&quot;Article Section&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;article:tag&quot; content=&quot;Article Tag&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;fb:admins&quot; content=&quot;Facebook numberic ID&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Bonus-The-Product-Template"><a href="#Bonus-The-Product-Template" class="headerlink" title="Bonus: The Product Template"></a>Bonus: The Product Template</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Product Social Media Tag Template</span><br><span class="line">&lt;!-- Update your html tag to include the itemscope and itemtype attributes. --&gt;</span><br><span class="line">&lt;html itemscope itemtype=&quot;http://schema.org/Product&quot;&gt;</span><br><span class="line">&lt;!-- Place this data between the &lt;head&gt; tags of your website --&gt;</span><br><span class="line">&lt;title&gt;Page Title. Maximum length 60-70 characters&lt;/title&gt;</span><br><span class="line">&lt;meta name=&quot;description&quot; content=&quot;Page description. No longer than 155 characters.&quot; /&gt;</span><br><span class="line">&lt;!-- Schema.org markup for Google+ --&gt;</span><br><span class="line">&lt;meta itemprop=&quot;name&quot; content=&quot;The Name or Title Here&quot;&gt;</span><br><span class="line">&lt;meta itemprop=&quot;description&quot; content=&quot;This is the page description&quot;&gt;</span><br><span class="line">&lt;meta itemprop=&quot;image&quot; content=&quot;http://www.example.com/image.jpg&quot;&gt;</span><br><span class="line">&lt;!-- Twitter Card data --&gt;</span><br><span class="line">&lt;meta name=&quot;twitter:card&quot; content=&quot;product&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;twitter:site&quot; content=&quot;@publisher_handle&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;twitter:title&quot; content=&quot;Page Title&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;twitter:description&quot; content=&quot;Page description less than 200 characters&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;twitter:creator&quot; content=&quot;@author_handle&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;twitter:image&quot; content=&quot;http://www.example.com/image.jpg&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;twitter:data1&quot; content=&quot;$3&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;twitter:label1&quot; content=&quot;Price&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;twitter:data2&quot; content=&quot;Black&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;twitter:label2&quot; content=&quot;Color&quot;&gt;</span><br><span class="line">&lt;!-- Open Graph data --&gt;</span><br><span class="line">&lt;meta property=&quot;og:title&quot; content=&quot;Title Here&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:type&quot; content=&quot;article&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:url&quot; content=&quot;http://www.example.com/&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:image&quot; content=&quot;http://example.com/image.jpg&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:description&quot; content=&quot;Description Here&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:site_name&quot; content=&quot;Site Name, i.e. Moz&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:price:amount&quot; content=&quot;15.00&quot; /&gt;</span><br><span class="line">&lt;meta property=&quot;og:price:currency&quot; content=&quot;USD&quot; /&gt;</span><br></pre></td></tr></table></figure>
<h2 id="小工具"><a href="#小工具" class="headerlink" title="小工具 :"></a>小工具 :</h2><p><a class="link"   href="https://search.google.com/structured-data/testing-tool/u/0/" >結構化資料測試工具<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://www.google.com/webmasters/markup-helper/u/0/" >結構化資料標記協助工具<i class="fas fa-external-link-alt"></i></a></p>
<blockquote>
<p><a class="link"   href="https://lepture.com/zh/2015/fe-microdata" >前端的基礎修養：Microdata<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://blog.user.today/html5-semantic-tag-and-microdata-seo/" >要改的地方太多了，那就改天吧<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://moz.com/blog/meta-data-templates-123" >moz-Must have social meta tags<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://www.seoseo.com.tw/article_detail_208.html" >奇寶網路：結構化資料標記<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>SEO</category>
      </categories>
      <tags>
        <tag>seo</tag>
        <tag>meta</tag>
      </tags>
  </entry>
  <entry>
    <title>【SEO】SPA、SSR 差別</title>
    <url>/2019/06/29/SEO/spa-and-ssr/</url>
    <content><![CDATA[<h2 id="server-side-render"><a href="#server-side-render" class="headerlink" title="server side render"></a>server side render</h2><p><img src="0_lwjYL2hvqzBcujPs.png" alt="server side render"></p>
<p>由伺服器端的 CPU 收到請求後，解析完整的 HTML 返回到使用者接收端，然後呈現網頁。</p>
<h2 id="client-side-render"><a href="#client-side-render" class="headerlink" title="client side render"></a>client side render</h2><p><img src="0_BUlGTWkEM2AU9oTp.png" alt="client side render"></p>
<p>由伺服器端回傳資料，再由前端利用 Javascript 產生 HTML<br>我們是在執行期間「動態」去跟後端伺服器拿資料，再動態產生你看到的那些元素。</p>
<h2 id="SSR-Server-Side-Rendering"><a href="#SSR-Server-Side-Rendering" class="headerlink" title="SSR(Server Side Rendering)"></a>SSR(Server Side Rendering)</h2><p>每一個不同頁面就回傳一份不同的 html 檔案</p>
<h3 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h3><ul>
<li>SEO</li>
<li>不需要先下載一堆 JS 和 CSS 後才能看到頁面（首屏加載速度快）</li>
<li>對於設備性能較弱的手機或平版，減少 client side 的電量消耗</li>
<li>我们可以将SEO的关键信息直接在后台就渲染成HTML，而保证搜索引擎的爬虫都能爬取到关键数据。</li>
</ul>
<h3 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h3><ul>
<li>不論點擊什麼網頁上什麼功能，每一次都是將整個畫面重新繪製，如果在頻寬網路較差的情況下，會是一個較不好的體驗，因為要一直重新 loading 整個頁面。</li>
<li>伺服器 loading 較大</li>
</ul>
<h2 id="SPA-Single-Page-Application"><a href="#SPA-Single-Page-Application" class="headerlink" title="SPA(Single Page Application)"></a>SPA(Single Page Application)</h2><p>主要是運用 client side render<br>畫面需要變更時，會向後端發出 request，server 回傳資料以後 client 端再用 JavaScript 把畫面 render 出來，不會載入新的 HTML 檔案。</p>
<h3 id="優點-1"><a href="#優點-1" class="headerlink" title="優點"></a>優點</h3><ul>
<li>页面之间的切换非常快，較好的使用體驗(不需重新渲染整個頁面，局部刷新）</li>
<li>一定程度上减少了后端服务器的压力（不用管页面逻辑和渲染）</li>
<li>后端程序只需要提供API，完全不用管客户端到底是Web界面还是手机等</li>
</ul>
<h3 id="缺點-1"><a href="#缺點-1" class="headerlink" title="缺點"></a>缺點</h3><ul>
<li>首屏打开速度很慢，因为用户首次加载需要先下载SPA框架及应用程序的代码(JS)，然后瀏覽器再渲染页面。</li>
<li>不利于SEO，打開網頁原始碼觀看會是空的，因為 html 都是由 Javascript 生成(不過目前 Google 也可以爬 JS 生成完後的 html)</li>
</ul>
<h2 id="混合-SSR-SPA"><a href="#混合-SSR-SPA" class="headerlink" title="混合 SSR + SPA"></a>混合 SSR + SPA</h2><p>第一個頁面由Server side render，之後的操作還是由Client side render，就可以保證搜尋引擎也能爬到完整的 HTML。</p>
<blockquote>
<p><a class="link"   href="https://blog.techbridge.cc/2017/09/16/frontend-backend-mvc/" >前後端分離與 SPA<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://blog.niclin.tw/2019/01/06/%E6%B7%BA%E8%BF%B0-ssr-spa-%E5%84%AA%E7%BC%BA%E9%BB%9E/" >淺述 SSR SPA 優缺點<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://medium.com/@hulitw/introduction-mvc-spa-and-ssr-545c941669e9" >跟著小明一起搞懂技術名詞：MVC、SPA 與 SSR<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>SEO</category>
      </categories>
      <tags>
        <tag>seo</tag>
        <tag>spa</tag>
        <tag>ssr</tag>
      </tags>
  </entry>
  <entry>
    <title>【Terminal】權限</title>
    <url>/2020/07/03/Terminal/authority/</url>
    <content><![CDATA[<h2 id="更改檔案權限"><a href="#更改檔案權限" class="headerlink" title="更改檔案權限"></a>更改檔案權限</h2><p><code>chmod 777 &lt;檔案名稱&gt;</code><br><code>chmod +x &lt;檔案名稱&gt;</code>: 將每種身份都添加 execute 權限<br><code>chmod -x &lt;檔案名稱&gt;</code>: 將每種身份都取消 execute 權限</p>
<h3 id="權限表示"><a href="#權限表示" class="headerlink" title="權限表示"></a>權限表示</h3><p>Linux檔案的基本權限就有九個，分別是owner/group/others三種身份各有自己的read/write/execute權限<br>第一個字:</p>
<ul>
<li><code>-</code>：表示檔案</li>
<li><code>d</code>：表示資料夾</li>
</ul>
<p>第一個字以後：</p>
<ul>
<li>r:4</li>
<li>w:2</li>
<li>x:1<br>每種身份的權限是累加的，所以 <code>chmod 777</code> 表示 owner/group/other <strong>皆可以</strong> read/write/execute</li>
</ul>
<h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p><code>chmod 774 &lt;檔案名稱&gt;</code><br><code>-rwxr—-r--</code>：744<br>owner 可 read/write/execute = 4+2+1 = 7<br>group 可 read 不可 write/execute = 4 + 0 + 0 = 4<br>others 可 read 不可 write/execute = 4 + 0 + 0 = 4</p>
<h3 id="執行補充"><a href="#執行補充" class="headerlink" title="執行補充"></a>執行補充</h3><p>將檔案 execute 權限調整為可以後，即可以在該檔案父目錄下，在 <code>terminal</code> 輸入該檔案名字，會直接執行該檔案</p>
<h4 id="hello-sh"><a href="#hello-sh" class="headerlink" title="hello.sh"></a>hello.sh</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo hello world</span><br></pre></td></tr></table></figure>
<h4 id="hello-sh-的父目錄"><a href="#hello-sh-的父目錄" class="headerlink" title="hello.sh 的父目錄"></a>hello.sh 的父目錄</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sh hello.sh  // hello world</span><br><span class="line">chmod +x hello.sh</span><br><span class="line">hello  // hello world</span><br></pre></td></tr></table></figure>


<blockquote>
<p><a class="link"   href="http://linux.vbird.org/linux_basic/0210filepermission.php" >鳥哥的 Linux 私房菜 – 第五章、Linux 的檔案權限與目錄配置<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>Terminal</category>
      </categories>
      <tags>
        <tag>terminal</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Terminal】shell-script</title>
    <url>/2020/07/03/Terminal/shell-script/</url>
    <content><![CDATA[<blockquote>
<p>Shell Script主要用途就是用來協助使用者在UNIX or Linux環境上, 以更方便, 更自動化的方式來執行想要執行的指令</p>
</blockquote>
<h2 id="Vue-專案內"><a href="#Vue-專案內" class="headerlink" title="Vue 專案內"></a>Vue 專案內</h2><p><code>shell script</code> 預設有些參數可以使用：</p>
<ul>
<li>$?：表示你輸入的上個指令的狀態，一般情況下為 0，表示成功，不正常離開的不會是 0</li>
<li>$0：shell script的檔名</li>
<li>$1：表示輸入的第一個參數</li>
<li>$2：表示第二個參數</li>
</ul>
<p><code>npm run BUILD_DEV</code>：<br><code>echo $0</code>：<code>./deploy.sh</code><br><code>echo $1</code>：<code>dev</code></p>
<p><code>sh deploy.sh dev</code>：<br><code>echo $0</code>：<code>deploy.sh</code><br><code>echo $1</code>：<code>dev</code></p>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>這邊先將 <code>command line</code> 環境更改為 <code>bash</code>，才開始執行 <code>shell script</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">“BUILD_DEV”: “bash ./deploy.sh dev<span class="string">&quot;,</span></span><br><span class="line"><span class="string">“BUILD_STAGE”: “bash ./deploy.sh stage”,</span></span><br><span class="line"><span class="string">“BUILD_MASTER”: “bash ./deploy.sh master”</span></span><br></pre></td></tr></table></figure>
<h3 id="deploy-sh"><a href="#deploy-sh" class="headerlink" title="deploy.sh"></a>deploy.sh</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/zsh</span></span><br><span class="line">BuildFolderName=dw_front_bo_ag</span><br><span class="line"></span><br><span class="line">SourceFolder=$(pwd) // $() 可以執行裡面指令</span><br><span class="line">BuildFolder=$(cd ..;cd $BuildFolderName; pwd)</span><br><span class="line"></span><br><span class="line">npmDev=dev</span><br><span class="line">npmStage=Stage</span><br><span class="line">npmMaster=build</span><br><span class="line"></span><br><span class="line">branchDev=Develop</span><br><span class="line">branchStage=Stage</span><br><span class="line">branchMaster=master</span><br><span class="line"></span><br><span class="line">function Building() &#123;</span><br><span class="line">  echo &quot;building...&quot;</span><br><span class="line">  npm run $1</span><br><span class="line"><span class="meta">  #</span><span class="bash"> <span class="built_in">command</span> line status code === 0 的時候，即為成功</span></span><br><span class="line">  if [ &quot;$?&quot; != 0 ];</span><br><span class="line">  then</span><br><span class="line">    echo &quot;ERROR!!! 打包失敗！發布已中斷！&quot;</span><br><span class="line">    exit</span><br><span class="line">  fi</span><br><span class="line">  echo “change to buildFloder...&quot;</span><br><span class="line">  cd $BuildFolder</span><br><span class="line">  echo “checkout branch $2…”</span><br><span class="line">  git checkout $2</span><br><span class="line">  echo “remove all files...&quot;</span><br><span class="line">  rm -rf $BuildFolder/*</span><br><span class="line">  echo &quot;copying files to building folder...&quot;</span><br><span class="line">  cp -R $SourceFolder/output/$1/* $BuildFolder</span><br><span class="line">  echo &quot;git add...&quot;</span><br><span class="line">  git add .</span><br><span class="line">  echo &quot;git commit...&quot;</span><br><span class="line">  git commit -m &quot;$(date +&quot;%D %T&quot;)&quot;</span><br><span class="line">  echo &quot;git pull...&quot;</span><br><span class="line">  git pull</span><br><span class="line">  echo &quot;git push...&quot;</span><br><span class="line">  git push origin $2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if [ &quot;$1&quot; = &quot;$npmDev&quot; ];</span><br><span class="line">then</span><br><span class="line">  Building $npmDev $branchDev</span><br><span class="line">elif [ &quot;$1&quot; = &quot;$npmStage&quot; ];</span><br><span class="line">then</span><br><span class="line">  Building $npmStage $branchStage</span><br><span class="line">elif [ &quot;$1&quot; = &quot;$npmMaster&quot; ];</span><br><span class="line">then</span><br><span class="line">  Building $npmMaster $branchMaster</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<blockquote>
<p><a class="link"   href="http://linux.vbird.org/linux_basic/0340bashshell-scripts.php" >鳥哥的 Linux 私房菜 – 第十二章、學習 Shell Scripts<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<h2 id="寫入檔案"><a href="#寫入檔案" class="headerlink" title="寫入檔案"></a>寫入檔案</h2><p><code>-p</code> 表示後面為提示字<br>最後面的 <code>firstname</code>, <code>lastname</code> 為變數名字</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">read -p “Please input your first name: &quot; firstname      # 提示使用者輸入</span><br><span class="line">read -p “Please input your last name:  “ lastname       # 提示使用者輸入</span><br><span class="line">echo -e “\nYour full name is: $&#123;firstname&#125; $&#123;lastname&#125;” # 結果由螢幕輸出</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Terminal</category>
      </categories>
      <tags>
        <tag>terminal</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【Vue】用 Vue-cli 建立新專案</title>
    <url>/2019/06/16/Vue/vue-cli-new-project/</url>
    <content><![CDATA[<h2 id="Vue-cli-是什麼？"><a href="#Vue-cli-是什麼？" class="headerlink" title="Vue-cli 是什麼？"></a>Vue-cli 是什麼？</h2><p>簡單來說它是 Vue.js 官方提供的開發工具，可用於快速開發大型單頁應用程式 (SPA)，更具體來說像是前端在開發時，常會搭配一些前端管理工具 (Gulp、Webpack…) 來處理瑣碎又重複性的工作，但往往需要大量時間去自行配置開發環境，而 Vue-cli 就像開發懶人包，可透過指令快速地建立一個立即可用的 Vue 開發環境。</p>
<p>目前 Vue-cli 提供了六種基本樣板，如下：</p>
<ul>
<li><a class="link"   href="https://github.com/vuejs-templates/webpack" >webpack<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/vuejs-templates/webpack-simple" >webpack-simple<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/vuejs-templates/browserify" >browserify<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/vuejs-templates/browserify-simple" >browserify-simple<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/vuejs-templates/pwa" >pwa<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/vuejs-templates/simple" >simple<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<h3 id="查詢所有樣板指令"><a href="#查詢所有樣板指令" class="headerlink" title="查詢所有樣板指令"></a>查詢所有樣板指令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vue list</span><br></pre></td></tr></table></figure>
<p>大部分都是使用 webpack 樣板</p>
<h3 id="安裝-Vue-cli-套件"><a href="#安裝-Vue-cli-套件" class="headerlink" title="安裝 Vue-cli 套件"></a>安裝 Vue-cli 套件</h3><p>Vue cli 的名稱由 <code>vue-cli</code> 改成了 <code>@vue/cli</code>。 如果你已经全局安装了舊版本的 <code>vue-cli(1.x 或 2.x)</code>，你需要通過 <code>npm uninstall vue-cli -g</code> 或 <code>yarn global remove vue-cli</code> 卸载它。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install -g vue-cli   //vue-cli 2.xx</span><br><span class="line">$ npm install -g @vue/cli  //vue-cli 3.xx</span><br></pre></td></tr></table></figure>

<p>安裝 Vue cli 要求 Node.js 版本在 8.9以上</p>
<h3 id="建立-Vue-專案"><a href="#建立-Vue-專案" class="headerlink" title="建立 Vue 專案"></a>建立 Vue 專案</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vue init &lt;樣板名稱&gt; &lt;專案名稱&gt;  //vue-cli 2 </span><br><span class="line">$ vue create &lt;專案名稱&gt;  //vue-cli 3</span><br></pre></td></tr></table></figure>

<p>ex: vue init webpack my-project</p>
<h3 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h3><ul>
<li>Project name：專案名稱</li>
<li>Project description：專案描述</li>
<li>Author：作者</li>
<li>Vue build：Runtime + Compiler 及 Runtime-only 兩種</li>
<li>Install vue-router：是否安裝 vue-router</li>
<li>Use ESLint to lint your code：是否使用 ESLint 來規範程式碼</li>
<li>Pick an ESLint preset：Standard、Airbnb 及 none 三種</li>
<li>Set up unit tests：是否加入單元測試</li>
<li>Setup e2e tests with Nightwatch：是否加入 e2e 測試</li>
<li>Should we run <code>npm install</code> for you after the project has been created：完成後是否自動執行 npm install</li>
</ul>
<p>依個人需求調整</p>
<h3 id="執行專案"><a href="#執行專案" class="headerlink" title="執行專案"></a>執行專案</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm run dev //vue-cli 2.xx</span><br><span class="line">$ npm run serve //vue-cli 3.xx</span><br><span class="line">$ npm run build //生成 dist 資料夾 vue-cli 2 and 3 皆可使用</span><br></pre></td></tr></table></figure>

<h2 id="Vue-cli-3-專用"><a href="#Vue-cli-3-專用" class="headerlink" title="Vue cli 3 專用"></a>Vue cli 3 專用</h2><h3 id="使用圖形化介面"><a href="#使用圖形化介面" class="headerlink" title="使用圖形化介面"></a>使用圖形化介面</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vue ui</span><br></pre></td></tr></table></figure>

<p>輸入指令後，會開啟一個網頁，基本上可以做到指令能做的大部分的事情</p>
<blockquote>
<p><a class="link"   href="https://qq7886.gitbooks.io/vue-cli-2018/content/structure/" >Vue-cli 基礎入門 — 2018<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://cli.vuejs.org/zh/guide/installation.html" >vue-cli 3 文檔<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>【Vue】slot 介紹</title>
    <url>/2019/06/18/Vue/vue-slot/</url>
    <content><![CDATA[<h2 id="沒有插槽"><a href="#沒有插槽" class="headerlink" title="沒有插槽"></a>沒有插槽</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;沒有插槽可替換的狀態&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;test&gt;</span><br><span class="line">  &lt;p&gt;這段訊息會消失。&lt;/p&gt;</span><br><span class="line">&lt;/test&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/x-template&quot; id=&quot;test&quot;&gt;</span><br><span class="line">&lt;div class=&quot;alert alert-warning&quot;&gt;</span><br><span class="line">  &lt;h6&gt;我是一個元件&lt;/h6&gt;</span><br><span class="line">  &lt;p&gt;這沒有插槽。&lt;/p&gt;</span><br><span class="line">  //如果這裡 p 標籤改為 slot 標籤，訊息就會被取代為 &quot;這段訊息會消失&quot;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>元件中沒有 slot 標籤，所以傳入此元件的<code>&lt;p&gt;這段訊息會消失。&lt;/p&gt;</code> 就不見了，因為沒地方可以插入。</p>
<h2 id="有插槽"><a href="#有插槽" class="headerlink" title="有插槽"></a>有插槽</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;Slot 基礎範例&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">  &lt;test&gt;&lt;/test&gt;   //這段會顯示slot預設的內容，&quot;如果沒有內容，則會顯示此段落&quot;</span><br><span class="line"></span><br><span class="line">  &lt;test&gt;</span><br><span class="line">    &lt;p&gt;這段會取代原本的 Slot。&lt;/p&gt;</span><br><span class="line">  &lt;/test&gt;</span><br><span class="line">//p標籤，會取代 template 中 slot 的內容</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/x-template&quot; id=&quot;test&quot;&gt; // 引入組件</span><br><span class="line">&lt;div class=&quot;alert alert-warning&quot;&gt;</span><br><span class="line">  &lt;h6&gt;我是一個元件&lt;/h6&gt;</span><br><span class="line">  &lt;slot&gt;</span><br><span class="line">    如果沒有內容，則會顯示此段落。</span><br><span class="line">  &lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>元件中有 slot 標籤，且有預設的內容，所以如果沒有傳入任何東西，就會顯示<code>slot標籤</code>預設的 <code>如果沒有內容，則會顯示此段落。</code>，<br>有傳入的話 slot標籤內的預設內容就會被取代，顯示 <code>這段會取代原本的 Slot。</code>。</p>
<h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;具名插槽&lt;/h2&gt;</span><br><span class="line">  &lt;named-slot-component&gt;&lt;/named-slot-component&gt;</span><br><span class="line"></span><br><span class="line">  &lt;named-slot-component&gt;</span><br><span class="line">    &lt;header slot=&quot;header&quot;&gt;替換的 Header&lt;/header&gt;  //slot header</span><br><span class="line">    &lt;template slot=&quot;footer&quot;&gt;替換的 Footer&lt;/template&gt;  //slot footer</span><br><span class="line">    &lt;template slot=&quot;btnString&quot;&gt;按鈕內容&lt;/template&gt;  //slot btnString</span><br><span class="line">    &lt;p slot&gt;其餘的內容&lt;/p&gt;</span><br><span class="line">  &lt;/named-slot-component&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/x-template&quot; id=&quot;namedSlotComponent&quot;&gt;</span><br><span class="line">&lt;div class=&quot;card my-3&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;card-header&quot;&gt;</span><br><span class="line">    &lt;slot name=&quot;header&quot;&gt;這段是預設的文字&lt;/slot&gt;  //name header</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class=&quot;card-body&quot;&gt;</span><br><span class="line">    &lt;slot&gt;</span><br><span class="line">      &lt;h5 class=&quot;card-title&quot;&gt;Special title treatment&lt;/h5&gt;</span><br><span class="line">      &lt;p class=&quot;card-text&quot;&gt;With supporting text below as a natural lead-in to additional content.&lt;/p&gt;</span><br><span class="line">    &lt;/slot&gt;</span><br><span class="line">    &lt;a href=&quot;#&quot; class=&quot;btn btn-primary&quot;&gt;</span><br><span class="line">      &lt;slot name=&quot;btnString&quot;&gt;spanGo somewhere&lt;/slot&gt;  //name btnString</span><br><span class="line">    &lt;/a&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class=&quot;card-footer&quot;&gt;</span><br><span class="line">    &lt;slot name=&quot;footer&quot;&gt;這是預設的 Footer&lt;/slot&gt;  //name footer</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>javascript 中 slot 的 name 屬性為自定義的名稱，ex: header、btnString、footer，但是需對應到元件標籤內的 slot 屬性，為指定替換的對象。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Example Post</title>
    <url>/2018/12/31/example/exmaple-post/</url>
    <content><![CDATA[<p>JavaScript 有着很奇怪的命名史。</p>
<p>1995 年，它作为网景浏览器（Netscape Navigator）的一部分首次发布，网景给这个新语言命名为 LiveScript。一年后，为了搭上当时媒体热炒 Java 的顺风车，临时改名为了 JavaScript <em>（当然，Java 和 JavaScript 的关系，就和雷锋和雷锋塔一样 —— 并没有什么关系）</em></p>
<p><img src="javascript-java.jpg" alt="java-javascript"><br><small class="img-hint">歪果仁的笑话怎么一点都不好笑</small></p>
<blockquote>
<p>译者注：<a class="link"   href="https://en.wikipedia.org/wiki/JavaScript#History" >wikipedia 的 JavaScript 词条<i class="fas fa-external-link-alt"></i></a> 更详细的叙述了这段历史</p>
</blockquote>
<p>1996 年，网景将 JavaScript 提交给 <a class="link"   href="http://www.ecma-international.org/" >ECMA International（欧洲计算机制造商协会）<i class="fas fa-external-link-alt"></i></a> 进行标准化，并最终确定出新的语言标准，它就是 ECMAScript。自此，ECMAScript 成为所有 JavaScript 实现的基础，不过，由于 JavaScript 名字的历史原因和市场原因（很显然 ECMAScript 这个名字并不令人喜欢……），现实中我们只用 ECMAScript 称呼标准，平时都还是使用 JavaScript 来称呼这个语言。</p>
<blockquote>
<p>术语（译者注）：</p>
<ul>
<li><em>标准（Standard）</em>： 用于定义与其他事物区别的一套规则</li>
<li><em>实现（Implementation）</em>： 某个标准的具体实施/真实实践</li>
</ul>
</blockquote>
<p>不过，JavaScript 开发者们并不怎么在乎这些，因为在诞生之后的 15 年里，ECMAScript 并没有多少变化，而且现实中的很多实现都已经和标准大相径庭。其实在第一版的 ECMAScript 发布后，很快又跟进发布了两个版本，但是自从 1999 年 ECMAScript 3 发布后，十年内都没有任何改动被成功添加到官方规范里。取而代之的，是各大浏览器厂商们争先进行自己的语言拓展，web 开发者们别无选择只能去尝试并且支持这些 API。即使是在 2009 年 ECMAScript 5 发布之后，仍然用了数年这些新规范才得到了浏览器的广泛支持，可是大部分开发者还是写着 ECMAScript 3 风格的代码，并不觉得有必要去了解这些规范。</p>
<blockquote>
<p>译者注：<a class="link"   href="https://en.wikipedia.org/wiki/ECMAScript#4th_Edition_.28abandoned.29" >ECMAScript 第四版草案<i class="fas fa-external-link-alt"></i></a>由于太过激进而被抛弃，Adobe 的 <a class="link"   href="https://en.wikipedia.org/wiki/ActionScript" >ActionScript 3.0<i class="fas fa-external-link-alt"></i></a> 是 ECMAScript edition 4 的唯一实现（ Flash 差点就统一 Web 了）</p>
</blockquote>
<p>到了 2012 年，事情突然开始有了转变。大家开始推动停止对旧版本 IE 浏览器的支持，用 ECMAScript 5 (ES5) 风格来编写代码也变得更加可行。与此同时，一个新的 ECMAScript 规范也开始启动。到了这时，大家开始逐渐习惯以对 ECMAScript 规范的版本支持程度来形容各种 JavaScript 实现。在正式被指名为 ECMAScript 第 6 版 (ES6) 之前，这个新的标准原本被称为 ES.Harmony（和谐）。2015 年，负责制定 ECMAScript 规范草案的委员会 TC39 决定将定义新标准的制度改为一年一次，这意味着每个新特性一旦被批准就可以添加，而不像以往一样，规范只有在整个草案完成，所有特性都没问题后才能被定稿。因此，ECMAScript 第 6 版在六月份公布之前，又被重命名为了 ECMAScript 2015（ES2015）</p>
<p>目前，仍然有很多新的 JavaScript 特性或语法正在提议中，包括 <a class="link"   href="https://github.com/wycats/javascript-decorators" >decorators（装饰者）<i class="fas fa-external-link-alt"></i></a>，<a class="link"   href="https://github.com/lukehoban/ecmascript-asyncawait" >async-await（async-await 异步编程模型）<i class="fas fa-external-link-alt"></i></a> 和 <a class="link"   href="https://github.com/jeffmo/es-class-properties" >static class properties（静态类属性）<i class="fas fa-external-link-alt"></i></a>。它们通常被称为 ES7，ES2016 或者 ES.Next 的特性，不过实际上它们只能被称作提案或者说可能性，毕竟 ES2016 的规范还没有完成，有可能全部都会引入，也有可能一个都没有。TC39 把一个提案分为 4 个阶段，你可以在 <a class="link"   href="https://babeljs.io/docs/usage/experimental/" >Babel 的官网<i class="fas fa-external-link-alt"></i></a> 上查看各个提案目前都在哪个阶段了。</p>
<p>所以，我们该如何使用这一大堆术语呢？下面的列表或许能帮助到你：</p>
<ul>
<li><strong>ECMAScript</strong>：一个由 ECMA International 进行标准化，TC39 委员会进行监督的语言。通常用于指代标准本身。</li>
<li><strong>JavaScript</strong>：ECMAScript 标准的各种实现的最常用称呼。这个术语并不局限于某个特定版本的 ECMAScript 规范，并且可能被用于任何不同程度的任意版本的 ECMAScript 的实现。</li>
<li>**ECMAScript 5 (ES5)**：ECMAScript 的第五版修订，于 2009 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。</li>
<li>**ECMAScript 6 (ES6) / ECMAScript 2015 (ES2015)**：ECMAScript 的第六版修订，于 2015 年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅<a class="link"   href="http://kangax.github.io/compat-table/es6/" >这张兼容性表<i class="fas fa-external-link-alt"></i></a>来查看不同浏览器和工具的实现情况。</li>
<li><strong>ECMAScript 2016</strong>：预计的第七版 ECMAScript 修订，计划于明年夏季发布。这份规范具体将包含哪些特性还没有最终确定</li>
<li><strong>ECMAScript Proposals</strong>：被考虑加入未来版本 ECMAScript 标准的特性与语法提案，他们需要经历五个阶段：Strawman（稻草人），Proposal（提议），Draft（草案），Candidate（候选）以及 Finished （完成）。</li>
</ul>
<p>在这整个 Blog 中，我将把目前的 ECMAScript 版本称作 ES6（因为这是大部分开发者最习以为常的），把明年的规范称作 ES2016（因为，与 ES6/ES2015 不同，这个名字将在整个标准化过程中沿用）并且将那些还没有成为 ECMAScript 定稿或草案的未来语言概念称为 ECMAScript 提案或者 JavaScript 提案。我将尽我所能在任何可能引起困惑的场合沿用这篇文章。</p>
<h4 id="一些资源"><a href="#一些资源" class="headerlink" title="一些资源"></a>一些资源</h4><ul>
<li>TC39 的 <a class="link"   href="https://github.com/tc39/ecma262" >Github 仓库<i class="fas fa-external-link-alt"></i></a>上可以看到所有目前公开的提案</li>
<li>如果你还不熟悉 ES6，Babel 有一个<a class="link"   href="https://babeljs.io/docs/learn-es2015/" >很不错的特性概览<i class="fas fa-external-link-alt"></i></a></li>
<li>如果你希望深入 ES6，这里有两本很不错的书： Axel Rauschmayer 的 <a class="link"   href="http://exploringjs.com/" >Exploring ES6<i class="fas fa-external-link-alt"></i></a>和 Nicholas Zakas 的 <a class="link"   href="https://leanpub.com/understandinges6" >Understanding ECMAScript 6<i class="fas fa-external-link-alt"></i></a>。Axel 的博客 <a class="link"   href="http://www.2ality.com/" >2ality<i class="fas fa-external-link-alt"></i></a> 也是很不错的 ES6 资源</li>
</ul>
<img class="shadow" width="320" src="keep-calm-and-learn-javascript.png" />
<small class="img-hint">来学 JavaScript 吧！</small>

<h4 id="著作权声明"><a href="#著作权声明" class="headerlink" title="著作权声明"></a>著作权声明</h4><p>本文译自 <a class="link"   href="http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/" >ES5, ES6, ES2016, ES.Next: What’s going on with JavaScript versioning?<i class="fas fa-external-link-alt"></i></a><br>译者 <a class="link"   href="http://weibo.com/huxpro" >黄玄<i class="fas fa-external-link-alt"></i></a>，首次发布于 <a class="link"   href="http://huangxuan.me/" >Hux Blog<i class="fas fa-external-link-alt"></i></a>，转载请保留以上链接</p>
]]></content>
      <categories>
        <category>Example</category>
      </categories>
      <tags>
        <tag>example</tag>
      </tags>
  </entry>
  <entry>
    <title>Example Post with Code Highlight</title>
    <url>/2018/12/31/example/example-code-highlight/</url>
    <content><![CDATA[<h2 id="Foreword"><a href="#Foreword" class="headerlink" title="Foreword"></a>Foreword</h2><blockquote>
<p>Here comes Module!</p>
</blockquote>
<p>随着网站逐渐变成「互联网应用程序」，嵌入网页的 JavaScript 代码越来越庞大，越来越复杂。网页越来越像桌面程序，需要一个团队分工协作、进度管理、单元测试……我们不得不使用软件工程的方法，来管理网页的业务逻辑。</p>
<p>于是，JavaScript 的模块化成为迫切需求。在 ES6 Module 来临之前，JavaScript 社区提供了强大支持，尝试在现有的运行环境下，实现模块的效果。</p>
<hr>
<h2 id="Catalog"><a href="#Catalog" class="headerlink" title="Catalog"></a>Catalog</h2><ol>
<li> <a href="#commonjs--node">CommonJS &amp; Node</a></li>
<li> <a href="#history">History</a></li>
<li> <a href="#requirejs--amd">RequireJS &amp; AMD</a></li>
<li> <a href="#seajs--cmd">SeaJS &amp; CMD</a></li>
<li> <a href="#amd-vs-cmd">AMD vs CMD</a></li>
<li> <a href="#webpack">WebPack</a></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function autoDetect()&#123;</span><br><span class="line">    console.log(&#x27;ye, it is written in JavaScript!&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CommonJS-amp-Node"><a href="#CommonJS-amp-Node" class="headerlink" title="CommonJS &amp; Node"></a>CommonJS &amp; Node</h2><blockquote>
<p>Javascript: not just for browsers any more! —— CommonJS Slogen</p>
</blockquote>
<p>前端模块化的事实标准之一，2009 年 8 月，<a class="link"   href="http://wiki.commonjs.org/wiki/CommonJS" >CommonJS<i class="fas fa-external-link-alt"></i></a> 诞生。</p>
<p>CommonJS 本质上只是一套规范（API 定义），而 Node.js 采用并实现了部分规范，CommonJS Module 的写法也因此广泛流行。</p>
<p>让我们看看 Node 中的实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 由于 Node 原生支持模块的作用域，并不需要额外的 wrapper</span></span><br><span class="line"><span class="comment">// &quot;as though the module was wrapped in a function&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">&#x27;./a&#x27;</span>)  <span class="comment">// 加载模块（同步加载）</span></span><br><span class="line">a.doSomething()         <span class="comment">// 等上一句执行完才会执行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 暴露 b 函数接口</span></span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>exports</code>是一个内置对象，就像<code>require</code>是一个内置加载函数一样。如果你希望直接赋值一个完整的对象或者构造函数，覆写<code>module.exports</code>就可以了。</p>
<p>CommonJS 前身叫 ServerJS ，<strong>后来希望能更加 COMMON，成为通吃各种环境的模块规范，改名为 CommonJS</strong> 。CommonJS 最初只专注于 Server-side 而非浏览器环境，因此它采用了同步加载的机制，这对服务器环境（硬盘 I/O 速度）不是问题，而对浏览器环境（网速）来说并不合适。</p>
<p>因此，各种适用于浏览器环境的模块框架与标准逐个诞生，他们的共同点是：</p>
<ul>
<li>采用异步加载（预先加载所有依赖的模块后回调执行，符合浏览器的网络环境）</li>
<li>虽然代码风格不同，但其实都可以看作 CommonJS Modules 语法的变体。</li>
<li>都在向着 <strong>COMMON</strong> 的方向进化：<strong>兼容不同风格，兼容浏览器和服务器两种环境</strong></li>
</ul>
<p>本文接下来要讨论的典例是：</p>
<ul>
<li>RequireJS &amp; AMD（异步加载，预执行，依赖前置。默认推荐 AMD 写法）</li>
<li>SeaJS &amp; CMD（异步加载，懒执行，依赖就近，默认推荐 CommonJS 写法）</li>
</ul>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><!--<h2 id="history"> History </h2>-->

<blockquote>
<p>此段落参考自玉伯的 <a class="link"   href="https://github.com/seajs/seajs/issues/588" >前端模块化开发那点历史<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p>09-10 年间，CommonJS（那时还叫 ServerJS） 社区推出 <a class="link"   href="http://wiki.commonjs.org/wiki/Modules" >Modules/1.0<i class="fas fa-external-link-alt"></i></a> 规范，并且在 Node.js 等环境下取得了很不错的实践。</p>
<p>09年下半年这帮充满干劲的小伙子们想把 ServerJS 的成功经验进一步推广到浏览器端，于是将社区改名叫 CommonJS，同时激烈争论 Modules 的下一版规范。分歧和冲突由此诞生，逐步形成了三大流派：</p>
<ol>
<li><strong>Modules/1.x</strong> 流派。这个观点觉得 1.x 规范已经够用，只要移植到浏览器端就好。要做的是新增 <a class="link"   href="http://wiki.commonjs.org/wiki/Modules/Transport" >Modules/Transport<i class="fas fa-external-link-alt"></i></a> 规范，即在浏览器上运行前，先通过转换工具将模块转换为符合 Transport 规范的代码。主流代表是服务端的开发人员。现在值得关注的有两个实现：越来越火的 component 和走在前沿的 es6 module transpiler。</li>
<li><strong>Modules/Async</strong> 流派。这个观点觉得浏览器有自身的特征，不应该直接用 Modules/1.x 规范。这个观点下的典型代表是 <a class="link"   href="http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition" >AMD<i class="fas fa-external-link-alt"></i></a> 规范及其实现 <a class="link"   href="http://requirejs.org/" >RequireJS<i class="fas fa-external-link-alt"></i></a>。这个稍后再细说。</li>
<li><strong>Modules/2.0</strong> 流派。这个观点觉得浏览器有自身的特征，不应该直接用 Modules/1.x 规范，但应该尽可能与 Modules/1.x 规范保持一致。这个观点下的典型代表是 BravoJS 和 FlyScript 的作者。BravoJS 作者对 CommonJS 的社区的贡献很大，这份 Modules/2.0-draft 规范花了很多心思。FlyScript 的作者提出了 Modules/Wrappings 规范，这规范是 CMD 规范的前身。可惜的是 BravoJS 太学院派，FlyScript 后来做了自我阉割，将整个网站（flyscript.org）下线了。这个观点在本文中的典型代表就是 SeaJS 和 CMD 了</li>
</ol>
<p>补一嘴：阿里 KISSY 的 KMD 其实跟 AMD 非常类似，只是用 <code>add</code>和<code>use</code> 两个源自于 YUI Modules 的函数名替换了 <code>define</code> 和 <code>require</code> ，但其原理更接近 RequireJS ，与 YUI Modules 的 <code>Y</code> 沙箱 Attach 机制并不相同</p>
<h2 id="RequireJS-amp-AMD"><a href="#RequireJS-amp-AMD" class="headerlink" title="RequireJS &amp; AMD"></a>RequireJS &amp; AMD</h2><p><a class="link"   href="http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition" >AMD (Async Module Definition)<i class="fas fa-external-link-alt"></i></a> 是 RequireJS 在推广过程中对模块定义的规范化产出。</p>
<blockquote>
<p>RequireJS is a JavaScript file and module loader. It is optimized for in-browser use, but it can be used in other JavaScript environments</p>
</blockquote>
<p>RequireJS 主要解决的还是 CommonJS 同步加载脚本不适合浏览器 这个问题：</p>
<script src="//gist.github.com/65481dbbf6d16e831a6cc89c3e37e6e5.js?file=display-emails-from-database.php"></script>


<blockquote>
<p>As the comment indicates above, if require() is async, this code will not work. However, loading scripts synchronously in the browser kills performance. So, what to do?</p>
</blockquote>
<p>所以我们需要 <strong>Function Wrapping</strong> 来获取依赖并且提前通过 script tag 提前加载进来</p>
<iframe scrolling="no" width="[width]" height="[height]" src="https://jsfiddle.net/shorttag/embedded/[tabs]/[skin]" frameborder="0" loading="lazy" allowfullscreen></iframe>


<p>当依赖模块非常多时，这种<strong>依赖前置</strong>的写法会显得有点奇怪，所以 AMD 给了一个语法糖， <strong>simplified CommonJS wrapping</strong>，借鉴了 CommonJS 的 require 就近风格，也更方便对 CommonJS 模块的兼容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">require</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dependency1 = <span class="built_in">require</span>(<span class="string">&#x27;dependency1&#x27;</span>),</span><br><span class="line">        dependency2 = <span class="built_in">require</span>(<span class="string">&#x27;dependency2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>The AMD loader will parse out the <code>require(&#39;&#39;)</code> calls by using <code>Function.prototype.toString()</code>, then internally convert the above define call into this:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define([<span class="string">&#x27;require&#x27;</span>, <span class="string">&#x27;dependency1&#x27;</span>, <span class="string">&#x27;dependency2&#x27;</span>], <span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">require</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dependency1 = <span class="built_in">require</span>(<span class="string">&#x27;dependency1&#x27;</span>),</span><br><span class="line">        dependency2 = <span class="built_in">require</span>(<span class="string">&#x27;dependency2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>出于<code>Function.prototype.toString()</code>兼容性和性能的考虑，最好的做法还是做一次 <strong>optimized build</strong></p>
<p>AMD 和 CommonJS 的核心争议如下：</p>
<h3 id="1-执行时机"><a href="#1-执行时机" class="headerlink" title="1. 执行时机"></a>1. <strong>执行时机</strong></h3><p>Modules/1.0:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">&quot;./a&quot;</span>) <span class="comment">// 执行到此时，a.js 才同步下载并执行</span></span><br></pre></td></tr></table></figure>

<p>AMD: （使用 require 的语法糖时）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">define</span>(<span class="params">[<span class="string">&quot;require&quot;</span>],<span class="keyword">function</span>(<span class="built_in">require</span>)</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 在这里，a.js 已经下载并且执行好了</span></span><br><span class="line">    <span class="comment">// 使用 require() 并不是 AMD 的推荐写法</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">&quot;./a&quot;</span>) <span class="comment">// 此处仅仅是取模块 a 的 exports</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>AMD 里提前下载 a.js 是出于对浏览器环境的考虑，只能采取异步下载，这个社区都认可（Sea.js 也是这么做的）</p>
<p>但是 AMD 的执行是 Early Executing，而 Modules/1.0 是第一次 require 时才执行。这个差异很多人不能接受，包括持 Modules/2.0 观点的人也不能接受。</p>
<h3 id="2-书写风格"><a href="#2-书写风格" class="headerlink" title="2. 书写风格"></a>2. <strong>书写风格</strong></h3><p>AMD 推荐的风格并不使用<code>require</code>，而是通过参数传入，破坏了<strong>依赖就近</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>],<span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 提前申明了并初始化了所有模块</span></span><br><span class="line"></span><br><span class="line">    <span class="literal">true</span> || b.foo(); <span class="comment">//即便根本没用到模块 b，但 b 还是提前执行了。</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>不过，在笔者看来，风格喜好因人而异，主要还是<strong>预执行</strong>和<strong>懒执行</strong>的差异。</p>
<p>另外，require 2.0 也开始思考异步处理<strong>软依赖</strong>（区别于一定需要的<strong>硬依赖</strong>）的问题，提出了这样的方案：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数体内：</span></span><br><span class="line"><span class="keyword">if</span>(status)&#123;</span><br><span class="line">    <span class="keyword">async</span>([<span class="string">&#x27;a&#x27;</span>],<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">        a.doSomething()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SeaJS-amp-CMD"><a href="#SeaJS-amp-CMD" class="headerlink" title="SeaJS &amp; CMD"></a>SeaJS &amp; CMD</h2><p>CMD (Common Module Definition) 是 <a class="link"   href="http://seajs.org/docs/" >SeaJS<i class="fas fa-external-link-alt"></i></a> 在推广过程中对模块定义的规范化产出，是 Modules/2.0 流派的支持者，因此 SeaJS 的模块写法尽可能与 Modules/1.x 规范保持一致。</p>
<p>不过目前国外的该流派都死得差不多了，RequireJS 目前成为浏览器端模块的事实标准，国内最有名气的就是玉伯的 Sea.js ，不过对国际的推广力度不够。</p>
<ul>
<li>CMD Specification<ul>
<li><a class="link"   href="https://github.com/cmdjs/specification/blob/master/draft/module.md" >English (CMDJS-repo)<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://github.com/seajs/seajs/issues/242" >Chinese (SeaJS-repo)<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
</ul>
<p>CMD 主要有 define, factory, require, export 这么几个东西</p>
<ul>
<li>define <code>define(id?, deps?, factory)</code></li>
<li>factory <code>factory(require, exports, module)</code></li>
<li>require <code>require(id)</code></li>
<li>exports <code>Object</code></li>
</ul>
<p>CMD 推荐的 Code Style 是使用 CommonJS 风格的 <code>require</code>：</p>
<ul>
<li>这个 require 实际上是一个全局函数，用于加载模块，这里实际就是传入而已</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取模块 a 的接口</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">&#x27;./a&#x27;</span>);</span><br><span class="line">    <span class="comment">// 调用模块 a 的方法</span></span><br><span class="line">    a.doSomething();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对外提供 foo 属性</span></span><br><span class="line">    <span class="built_in">exports</span>.foo = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line">    <span class="comment">// 对外提供 doSomething 方法</span></span><br><span class="line">    <span class="built_in">exports</span>.doSomething = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>但是你也可以使用 AMD 风格，或者使用 return 来进行模块暴露</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define(<span class="string">&#x27;hello&#x27;</span>, [<span class="string">&#x27;jquery&#x27;</span>], <span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="built_in">module</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模块代码...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直接通过 return 暴露接口</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">        <span class="attr">doSomething</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>Sea.js 借鉴了 RequireJS 的不少东西，比如将 FlyScript 中的 module.declare 改名为 define 等。Sea.js 更多地来自 Modules/2.0 的观点，但尽可能去掉了学院派的东西，加入了不少实战派的理念。</p>
<h2 id="AMD-vs-CMD"><a href="#AMD-vs-CMD" class="headerlink" title="AMD vs CMD"></a>AMD vs CMD</h2><p><strong>虽然两者目前都兼容各种风格，但其底层原理并不相同，从其分别推荐的写法就可以看出两者背后原理的不同：</strong></p>
<ol>
<li>对于依赖的模块，AMD 是<strong>提前执行</strong>，CMD 是<strong>懒执行</strong>。（都是先加载）</li>
</ol>
<ul>
<li> CMD 推崇<strong>依赖就近</strong>，AMD 推崇<strong>依赖前置</strong>。   </li>
</ul>
<p>看代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AMD 默认推荐</span></span><br><span class="line"></span><br><span class="line">define([<span class="string">&#x27;./a&#x27;</span>, <span class="string">&#x27;./b&#x27;</span>], <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;  <span class="comment">// 依赖前置，提前执行</span></span><br><span class="line"></span><br><span class="line">    a.doSomething()</span><br><span class="line">    b.doSomething()</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CMD</span></span><br><span class="line"></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="built_in">module</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">&#x27;./a&#x27;</span>)</span><br><span class="line">    a.doSomething()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">&#x27;./b&#x27;</span>) <span class="comment">// 依赖就近，延迟执行</span></span><br><span class="line">    b.doSomething()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>






<h2 id="WebPack"><a href="#WebPack" class="headerlink" title="WebPack"></a>WebPack</h2><blockquote>
<p>working…</p>
</blockquote>
]]></content>
      <categories>
        <category>Example</category>
      </categories>
      <tags>
        <tag>example</tag>
      </tags>
  </entry>
  <entry>
    <title>Example Post With Default Header Image</title>
    <url>/2018/12/31/example/example-header-image/</url>
    <content><![CDATA[<blockquote>
<p>This document is not completed and will be updated anytime.</p>
</blockquote>
<h2 id="Catagory"><a href="#Catagory" class="headerlink" title="Catagory"></a>Catagory</h2><ol>
<li><a href="#unix">Unix</a><ol>
<li><a href="#bell-labs">Bell Labs</a></li>
<li><a href="#xenix">Xenix</a></li>
<li><a href="#bsd">BSD</a></li>
<li><a href="#freebsd--apple">FreeBSD &amp; Apple</a></li>
<li><a href="#nextstep">NeXTStep</a></li>
<li><a href="#darwin">Darwin</a></li>
<li><a href="#posix">POSIX</a></li>
</ol>
</li>
<li><a href="#unix-like">Unix-like</a><ol>
<li><a href="#single-unix-specification">Single Unix Specification</a></li>
<li><a href="#apple-ios">Apple iOS</a></li>
<li><a href="#xnu-kernel">XNU Kernel</a></li>
</ol>
</li>
<li><a href="#linux">Linux</a><ol>
<li><a href="#linux-kernel">Linux Kernel</a></li>
<li><a href="#gnu-project">GNU Project</a></li>
<li><a href="#android">Android</a></li>
<li><a href="#android-kernel">Android Kernel</a></li>
<li><a href="#android-rom">Android ROM</a></li>
<li><a href="#chrome-os">Chrome OS</a></li>
<li><a href="#chromium-os">Chromium OS</a></li>
</ol>
</li>
</ol>
<hr>
<h2 id="Unix"><a href="#Unix" class="headerlink" title="Unix"></a>Unix</h2><blockquote>
<p>Unix is a <strong>family</strong> of multitasking, multiuser computer OS.</p>
</blockquote>
<p>Derive from the original <strong>AT&amp;T Unix</strong>, Developed in the 1970s at <strong>Bell Labs</strong> (贝尔实验室), initially intended for use inside the <strong>Bell System</strong>.</p>
<ul>
<li><h4 id="Bell-Labs"><a href="#Bell-Labs" class="headerlink" title="Bell Labs"></a>Bell Labs</h4>Bell 和 AT&amp;A 在那时已经是一家了，可以看到那时的通信公司真是一线 IT 公司呢。</li>
</ul>
<p><strong>C 语言也是 Bell Labs 的产物</strong>，从一开始就是为了用于 Unix 而设计出来的。所以 Unix （在 73 年用 C 重写）在高校流行后，C 语言也获得了广泛支持。</p>
<p>AT&amp;T licensed Unix to outside parties(第三方) from the late 1970s, leading to a variety of both <strong>academic</strong> (最有有名的 BSD ) and <strong>commercial</strong> (Microsoft Xenix, IBM AIX, SunOS Solaris)</p>
<ul>
<li><h4 id="Xenix"><a href="#Xenix" class="headerlink" title="Xenix"></a>Xenix</h4><p>微软 1979 年从 AT&amp;A 授权来的 Unix OS，配合着 x86 成为当时最受欢迎的 Unix 发行版。后来 M$ 和 IBM 合作开发 OS/2 操作系统后放弃，后来最终转向 <strong>Windows NT</strong>。</p>
</li>
<li><h4 id="BSD"><a href="#BSD" class="headerlink" title="BSD"></a>BSD</h4></li>
</ul>
<p><strong>Barkeley Software Distribution</strong>, also called Berkeley Unix. Today the term “BSD” is used to refer to any of the BSD descendants(后代) which together form a branch of the family of Unix-like OS.(共同组成了一个分支)<br>    - <strong>BSD 最大的贡献是在 BSD 中率先增加了虚拟存储器和 Internet 协议</strong>，其 TCP/IP(IPv4 only) 代码仍然在现代 OS 上使用（ Microsoft Windows and most of the foundation of Apple’s OS X and iOS ）<br>    - BSD 后来发展出了众多开源后代，包括 FreeBSD, OpenBSD, NetBSD 等等……很多闭源的 vendor Unix 也都从 BSD 衍生而来。</p>
<ul>
<li><h4 id="FreeBSD-amp-Apple"><a href="#FreeBSD-amp-Apple" class="headerlink" title="FreeBSD &amp; Apple"></a>FreeBSD &amp; Apple</h4><p>FreeBSD 不但是 Open Source BSD 中占有率最高的，还直接影响了 Apple Inc : NeXT Computer 的团队在 FreeBSD 上衍生出了 NeXTSTEP 操作系统，这货后来在 Apple 时期演化成了 <strong>Darwin</strong> ，这个“达尔文”居然还是个开源系统，而且是 the Core of <strong>Mac OS X</strong> and <strong>iOS</strong>.</p>
</li>
<li><h4 id="NeXTSTEP"><a href="#NeXTSTEP" class="headerlink" title="NeXTSTEP"></a>NeXTSTEP</h4><p>An <strong>object-oriented</strong>, multitasking OS. Low-level C but High-level OC language and runtime the first time, combined with an <strong>OO aplication layer</strong> and including several “kits”.<br>大家都知道 NeXT 是 Steve Jobs 被 forced out of Apple 后和 a few of his coworkers 创办的，所以 <strong>NeXTSTEP 绝对是证明 Jobs 实力的作品。</strong></p>
</li>
<li><h4 id="Darwin"><a href="#Darwin" class="headerlink" title="Darwin"></a>Darwin</h4><p><a class="link"   href="http://en.wikipedia.org/wiki/Darwin_(operating_system)" >Darwin<i class="fas fa-external-link-alt"></i></a>, the core set of components upon which Mac OS X and iOS based, mostly POSIX compatible, but has never, by itself, been certified as being compatible with any version of <strong>POSIX</strong>. (OS X, since Leopard, has been certified as compatible with the Single UNIX Specification version 3)  </p>
</li>
</ul>
<p><strong>所以说 Mac OS X 算是很正统 Unix 的了</strong></p>
<ul>
<li><h4 id="POSIX"><a href="#POSIX" class="headerlink" title="POSIX"></a>POSIX</h4>可移植操作系统接口, Portable Operating System Interface, is a family of standards specified by the IEEE from maintaining compatibility between OS, defines the API along with Command Line Shells and utility interfaces, for software comaptibility with variants of Unix and other OS.<ul>
<li>Fully POSIX compliant:<ul>
<li>OS X</li>
<li>QNX OS (BlackBerry)</li>
</ul>
</li>
<li>Mostly complicant:<ul>
<li>Linux</li>
<li>OpenBSD/FreeBSD</li>
<li>Darwin (Core of <strong>iOS</strong> &amp; OS X)</li>
<li><strong>Android</strong></li>
</ul>
</li>
<li>Complicant via compatibility feature （通过兼容功能实现兼容）<ul>
<li>Windows NT Kernel<ul>
<li>Windows Server 2000, 2003, 2008, 2008 R2, 2012</li>
</ul>
</li>
<li>Symbian OS (with PIPS)<ul>
<li>Symbian was a closed-source OS.</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="Unix-like"><a href="#Unix-like" class="headerlink" title="Unix-like"></a>Unix-like</h2><blockquote>
<p>A Unix-like (sometimes referred to as UN*X or *nix) operating system is one that behaves in a manner similar to a Unix system, while not necessarily conforming to or being certified to any version of the <strong>Single UNIX Specification</strong>.</p>
</blockquote>
<p>There is no standard for defining the term.<br>其实 Unix-like 是个相对模糊的概念：</p>
<ul>
<li>最狭义的 Unix 单指 Bell Labs’s Unix</li>
<li>稍广义的 Unix 指代所有 Licensed Unix, 即通过了 SUS 的 Unix-like ，比如 OS X</li>
<li>最广义的 Unix 即所有 Unix-like 系统，无论它是否通过过任何 SUS，包括 Linux，BSD Family 等</li>
</ul>
<h4 id="Single-UNIX-Specification"><a href="#Single-UNIX-Specification" class="headerlink" title="Single UNIX Specification"></a>Single UNIX Specification</h4><p>The Single UNIX Specification (SUS) is the collective name of a family of standards for computer OS, compliance with which is required to <strong>qualify for the name “Unix”</strong>, like <strong>POSIX</strong>.</p>
<h4 id="Apple-iOS"><a href="#Apple-iOS" class="headerlink" title="Apple iOS"></a>Apple iOS</h4><p>iOS is a <strong>Unix-like OS based on Darwin(BSD)</strong> and OS X, which share some frameworks including Core Foundation, Founadtion and the Darwin foundation with OS X, but, Unix-like shell access is not avaliable for users and restricted for apps, <strong>making iOS not fully Unix-compatible either.</strong></p>
<p>The iOS kernal is <strong>XNU</strong>, the kernal of Darwin.</p>
<h4 id="XNU-Kernel"><a href="#XNU-Kernel" class="headerlink" title="XNU Kernel"></a>XNU Kernel</h4><p>XNU, the acronym(首字母缩写) for <em><strong>X is Not Unix</strong></em>, which is the <strong>Computer OS Kernel</strong> developed at Apple Inc since Dec 1996 for use in the Mac OS X and released as free open source software as part of Darwin.</p>
<hr>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><blockquote>
<p>Linux is a Unix-like and mostly POSIX-compliant computer OS.</p>
</blockquote>
<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/c/cd/Unix_timeline.en.svg/800px-Unix_timeline.en.svg.png" alt="Unix_timeline"></p>
<h4 id="Linux-Kernel"><a href="#Linux-Kernel" class="headerlink" title="Linux Kernel"></a>Linux Kernel</h4><p>严格来讲，术语 Linux 只表示 <a class="link"   href="http://en.wikipedia.org/wiki/Linux_kernel" >Linux Kernel<i class="fas fa-external-link-alt"></i></a> 操作系统内核本身，比如说 Android is Based on Linux (Kernel). Linus 编写的也只是这一部分，一个免费的 Unix-like Kernel，并不属于 GNU Project 的一部分。</p>
<p>但通常把 Linux 作为 Linux Kernel 与大量配合使用的 GNU Project Software Kit (包括 Bash, Lib, Compiler, 以及后期的 GUI etc) 所组合成的 OS 的统称。（包括各类 Distribution 发行版）</p>
<p>这类操作系统也被称为 <strong>GNU/Linux</strong></p>
<h4 id="GNU-Project"><a href="#GNU-Project" class="headerlink" title="GNU Project"></a>GNU Project</h4><p>The GNU Project is a <strong>free software, mass collaboration</strong> project, which based on the following freedom rights:</p>
<ul>
<li>Users are free to run the software, share (copy, distribute), study and modify it.</li>
<li>GNU software guarantees these freedom-rights legally (via its license).</li>
<li>So it is not only FREE but, more important, FREEDOM.</li>
</ul>
<p>In order to ensure that the <em>entire</em> software of a computer grants its users all freedom rights (use, share, study, modify), even the most fundamental and important part, <strong>the operating system</strong>, needed to be written.</p>
<p>This OS is decided to called <strong>GNU (a recursive acronym meaning “GNU is not Unix”)</strong>. By 1992, the GNU Project had completed all of the major OS components except for their kernel, <em>GNU Hurd</em>.</p>
<p>With the release of the third-party <strong>Linux Kernel</strong>, started independently by <em>Linus Torvalds</em> in 1991 and released under the GPLv0.12 in 1992, for the first time it was possible to run an OS <strong>composed completely of free software</strong>.</p>
<p>Though the Linux kernel is not part of the GNU project, it was developed using GCC and other GNU programming tools and was released as free software under the GPL.</p>
<p>Anyway, there eventually comes to the <strong>GNU/Linux</strong></p>
<ul>
<li><strong>GPL</strong>: GNU General Public License</li>
<li><strong>GCC</strong>: GNU Compiler Collection</li>
</ul>
<p>其他与 GPL 相关的自由/开源软件公共许可证：</p>
<ul>
<li><a class="link"   href="http://en.wikipedia.org/wiki/Mozilla_Public_License" >Mozilla Public License<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://en.wikipedia.org/wiki/MIT_License" >MIT License<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://en.wikipedia.org/wiki/BSD_licenses" >BSD Public License<i class="fas fa-external-link-alt"></i></a><ul>
<li>GPL 强制后续版本必须是自由软件，而 BSD 的后续可以选择继续开源或者封闭</li>
</ul>
</li>
<li><a class="link"   href="http://en.wikipedia.org/wiki/Apache_License" >Apache License<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p><img src="http://dl2.iteye.com/upload/attachment/0047/4142/d770c85a-49b7-3c7f-8ae2-cbb6451e00d8.png" alt="Public License"></p>
<h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><p>Android is a mobile OS based on <strong>Linux Kernel</strong>, so it’s definitely <strong>Unix-like</strong>.  </p>
<p><strong>Linux is under GPL so Android has to be open source</strong>.<br>Android’s source code is released by Google under open source licenses, although most Android devices ultimately ship with a combination of open source and proprietary software, including proprietary software developed and licensed by Google <em>(GMS are all proprietary)</em>  </p>
<h4 id="Android-Kernel"><a href="#Android-Kernel" class="headerlink" title="Android Kernel"></a>Android Kernel</h4><p>Android’s kernel is based on one of the Linux kernel’s long-term support (LTS) branches.   </p>
<p><strong>Android’s variant of the Linux kernel</strong> has further architectural changes that are implemented by Google outside the typical Linux kernel development cycle, and, certain features that Google contributed back to the Linux kernel. Google maintains a public code repo that contains their experimental work to re-base Android off the latest stable Linux versions.</p>
<p>Android Kernel 大概是 Linux Kernel 最得意的分支了，Android 也是 Linux 最流行的发行版。不过，也有一些 Google 工程师认为 Android is not Linux in the traditional Unix-like Linux distribution sense. 总之这类东西就算有各种协议也还是很难说清楚，在我理解里 Android Kernel 大概就是 fork Linux Kernel 之后改动和定制比较深的例子。</p>
<h4 id="Android-ROM"><a href="#Android-ROM" class="headerlink" title="Android ROM"></a>Android ROM</h4><p>既然提到 Android 就不得不提提 Android ROM</p>
<p>ROM 的本义实际上是只读内存：  </p>
<p><strong>Read-only memory</strong> (ROM) is a class of storage medium used in computers and other electronic devices. Data stored in ROM can only be modified slowly, with difficulty, or not at all, so it is <strong>mainly used to distribute firmware (固件)</strong> (software that is very closely tied to specific hardware, and unlikely to need frequent updates).</p>
<p>ROM 在发展的过程中不断进化，从只读演变成了可编程可擦除，并最终演化成了 Flash  </p>
<ul>
<li>PROM (Programmable read-only memory)</li>
<li>EPROM (Erasable programmable read-only memory)</li>
<li>EEPROM (Electrically erasable programmable read-only memory)<ul>
<li>Flash memory (闪存)</li>
</ul>
</li>
</ul>
<p>Flash 的出现是历史性的，它不但可以作为 ROM 使用，又因其极高的读写速度和稳定性，先后发展成为U盘（USB flash drives）、移动设备主要内置存储，和虐机械硬盘几条街的固态硬盘（SSD），可以说这货基本统一了高端存储市场的技术规格。</p>
<p>所以我们平时习惯说的 ROM 其实还是来源于老单片机时代，那时的 ROM 真的是写了就很难（需要上电复位）、甚至无法修改，所以那时往 ROM 里烧下去的程序就被称作 firmware ，固件。久而久之，虽然技术发展了，固件仍然指代那些不常需要更新的软件，而 ROM 这个词也就这么沿用下来了。</p>
<p>所以在 wiki 里是没有 Android ROM 这个词条的，只有 <a class="link"   href="http://en.wikipedia.org/wiki/List_of_custom_Android_firmwares" >List of custom Android firmwares<i class="fas fa-external-link-alt"></i></a></p>
<blockquote>
<p>A custom firmware, also known as a custom ROM, ROM, or custom OS, is an aftermarket distribution of the Android operating system. They are based on the Android Open Source Project (AOSP), hence most are open-sourced releases, unlike proprietary modifications by device manufacturers.</p>
</blockquote>
<p>各类 Android ROM 在 Android 词类下也都是属于 <strong>Forks and distributions</strong> 一类的。</p>
<p>所以我说，其实各类 Android ROM 也好，fork Android 之流的 YunOS、FireOS 也好，改了多少东西，碰到多深的 codebase ……<strong>其实 ROM 和 Distribution OS 的界限是很模糊的</strong>，为什么 Android 就不可以是移动时代的 Linux ，为什么 Devlik/ART 就不能是移动时代的 GCC 呢？</p>
<h4 id="Chrome-OS"><a href="#Chrome-OS" class="headerlink" title="Chrome OS"></a>Chrome OS</h4><p>Chrome OS is an operating system based on the <strong>Linux kernel</strong> and designed by Google to work with web applications and installed applications.</p>
<p>虽然目前只是个 Web Thin Client OS ，但是 RoadMap 非常酷……</p>
<ul>
<li><strong>Chrome Packaged Application</strong> (Support working offline and installed)</li>
<li><strong>Android App Runtime</strong> (run Android applications natively…fxxking awesome)</li>
</ul>
<p>平复一下激动的心情，还是回到正题来：</p>
<h4 id="Chromium-OS"><a href="#Chromium-OS" class="headerlink" title="Chromium OS"></a>Chromium OS</h4><p>Chrome OS is based on Chromium OS, which is the open-source development version of Chrome OS, which is a <strong>Linux distribution</strong> designed by Google.</p>
<p>For Detail, Chromium OS based on <a class="link"   href="http://en.wikipedia.org/wiki/Gentoo_Linux" >Gentoo Linux<i class="fas fa-external-link-alt"></i></a>, emm…</p>
]]></content>
      <categories>
        <category>Example</category>
      </categories>
      <tags>
        <tag>example</tag>
      </tags>
  </entry>
  <entry>
    <title>【Vue】父子元件通訊</title>
    <url>/2019/06/17/Vue/vue-emit/</url>
    <content><![CDATA[<h2 id="父元件"><a href="#父元件" class="headerlink" title="父元件"></a>父元件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Pagination :pageinfo=&quot;pagination&quot; @updatepage=&quot;getproducts&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h2 id="子元件"><a href="#子元件" class="headerlink" title="子元件"></a>子元件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  props: [&quot;pageinfo&quot;],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    pagechild(page) &#123;</span><br><span class="line">      this.$emit(&#x27;updatepage&#x27;, page)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    pageinformation() &#123;</span><br><span class="line">      return this.pageinfo</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;a class=&quot;page-link&quot; href=&quot;#&quot; @click.prevent=&quot;pagechild(page)&quot;&gt;&#123;&#123; page &#125;&#125;&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>點下連結，觸發 pagechild，傳到父元件的 updatepage = getproducts，傳入的參數會自動帶入 getproducts，父元件要先在 data 內定義 pagination，當 pagination 改變 時，會傳入冒號後定義的變數 pageinfo，子元件也要用 prop 定義 pageinfo 來接收這個值</p>
<p><img src="0_giqn4-TbT-hyJEOu.png" alt="vue-emit"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>【Terminal】Terminal</title>
    <url>/2020/07/03/Terminal/terminal/</url>
    <content><![CDATA[<h2 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h2><ul>
<li><p><code>cd</code> 切換路徑</p>
</li>
<li><p><code>pwd</code> 取得目前所在位置</p>
</li>
<li><p><code>ls</code> 列出目前檔案列表</p>
<ul>
<li><code>ls -alf</code> 顯示詳細資訊</li>
</ul>
</li>
</ul>
<h2 id="控制檔案"><a href="#控制檔案" class="headerlink" title="控制檔案"></a>控制檔案</h2><ul>
<li><p><code>mkdir</code>  建立新的目錄</p>
</li>
<li><p><code>touch</code>  建立新的檔案</p>
</li>
<li><p><code>echo 狀態練習 &gt; a.txt</code>  新增一個檔案 <code>a.txt</code> 內容為 <code>狀態練習</code></p>
</li>
<li><p><code>cp</code> 複製檔案</p>
</li>
</ul>
<p>把檔案 index.html 複製一份成 about.html：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp index.html about.html</span><br></pre></td></tr></table></figure>

<ul>
<li><code>mv</code>  移動檔案 (做為更名使用)</li>
</ul>
<p>把檔案 index.html 更名成 info.html：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv index.html info.html</span><br></pre></td></tr></table></figure>

<ul>
<li><code>rm</code>  刪除檔案</li>
</ul>
<p>刪除檔案 index.html：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm index.html</span><br></pre></td></tr></table></figure>

<p>刪除在這個目錄裡所有的 html 檔：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm *.html</span><br></pre></td></tr></table></figure>

<p>刪除資料夾 test：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf test</span><br></pre></td></tr></table></figure>

<h2 id="清空訊息"><a href="#清空訊息" class="headerlink" title="清空訊息"></a>清空訊息</h2><p><code>ctrl + u</code>  清除所有正在輸入的內容，清除輸入匡<br><code>clear</code> 清空 terminal<br><code>history -c</code> 清除 terminal 歷史輸入訊息</p>
<h2 id="顯示訊息"><a href="#顯示訊息" class="headerlink" title="顯示訊息"></a>顯示訊息</h2><p><code>history</code>  顯示歷史輸入訊息<br><code>ps -ax</code> 顯示所有正在執行的工作序列<br><code>ps -ax | grep &lt;application_name&gt;</code> 顯示正在執行的特定應用程式。ex: <code>ps -ax | grep chrome</code><br><code>ls</code> 顯示路徑下所有檔案<br><code>ls -alf</code> 顯示路徑下所有檔案的詳細資訊</p>
<h2 id="加上-amp-表示背景執行"><a href="#加上-amp-表示背景執行" class="headerlink" title="加上  &amp;  表示背景執行"></a>加上  &amp;  表示背景執行</h2><p><code>npm run dev &amp;</code> 背景執行 node，無法用 <code>ctrl + c</code> 中斷</p>
<h3 id="中斷方法"><a href="#中斷方法" class="headerlink" title="中斷方法"></a>中斷方法</h3><p>找到 process ID (PID)，執行 <code>kill &lt;PID&gt;</code>，可以中斷該程序的執行<br><code>killall &lt;application_name&gt;</code>，中斷該特定應用程式的所有工作序列</p>
<p><img src="E056EBEB-C63A-4FE1-87A7-2B86A794E4F1.png" alt="terminal"></p>
<h3 id="查看佔用-port-號"><a href="#查看佔用-port-號" class="headerlink" title="查看佔用 port 號"></a>查看佔用 port 號</h3><p><code>netstat -an</code> 查看所有佔用 port 號<br><code>netstat -an | grep 8882</code> 特定 port 號查詢</p>
<blockquote>
<p>Mac 的 <code>netstat</code> 指令看不見 PID</p>
</blockquote>
<h3 id="查看-port-號的-PID"><a href="#查看-port-號的-PID" class="headerlink" title="查看 port 號的 PID"></a>查看 port 號的 PID</h3><p><code>lsof -i:8882</code>  8882 port 資訊如下<br><img src="191C67B4-92B7-45E8-9D72-1305F644F836.png" alt="terminal"></p>
]]></content>
      <categories>
        <category>Terminal</category>
      </categories>
      <tags>
        <tag>terminal</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【JS30】Video Speed Controller</title>
    <url>/2019/06/03/JS30/JS30-video-speed-controller/</url>
    <content><![CDATA[<h1 id="28-—-Video-Speed-Controller"><a href="#28-—-Video-Speed-Controller" class="headerlink" title="28 — Video Speed Controller"></a>28 — Video Speed Controller</h1><h2 id="主題"><a href="#主題" class="headerlink" title="主題"></a>主題</h2><p>製作一個可控制影片速率的拉把。<br>這個練習可以算是延續[「JS30紀錄＆心得」11 — Custom Video Player]<br>主要是把原本<code>input range</code>改成<code>div</code>的滑鼠事件監聽。</p>
<p><a href="https://des86532.github.io/javascript-30/28_Video-Speed-Controller/index.html">Video Speed Controller</a></p>
<p><a class="link"   href="https://github.com/des86532/javascript-30/tree/master/28_Video-Speed-Controller" >Github<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="Step1-取得頁面元素"><a href="#Step1-取得頁面元素" class="headerlink" title="Step1. 取得頁面元素"></a>Step1. 取得頁面元素</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const speed = document.querySelector(&#x27;.speed&#x27;);</span><br><span class="line">const bar = speed.querySelector(&#x27;.speed-bar&#x27;);</span><br><span class="line">const video = document.querySelector(&#x27;.flex&#x27;);</span><br></pre></td></tr></table></figure>
<h3 id="Step2-建立滑鼠移動監聽與事件"><a href="#Step2-建立滑鼠移動監聽與事件" class="headerlink" title="Step2. 建立滑鼠移動監聽與事件"></a>Step2. 建立滑鼠移動監聽與事件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/** 滑鼠移動事件 **/</span><br><span class="line">function handleMove (e) &#123;</span><br><span class="line">  // 取得觸發點位置（滑鼠位於整頁頂端的Y軸定位-speed框到整頁頂端的距離）</span><br><span class="line">  const y = e.pageY - this.offsetTop;</span><br><span class="line">  // 設定百分比(y / speed框的高度)</span><br><span class="line">  const percent = y / this.offsetHeight;</span><br><span class="line">  const min = 0.4;</span><br><span class="line">  const max = 4;</span><br><span class="line">  // 用Math.round來計算取得四捨五入的百分比值</span><br><span class="line">  const height = Math.round(percent * 100) + &#x27;%&#x27;;</span><br><span class="line">  // 取得播放速率(0.4一跳，最多4倍速)</span><br><span class="line">  const playbackRate = percent * (max - min) + min;</span><br><span class="line">  // 調整speed-bar的樣式高度</span><br><span class="line">  bar.style.height = height;</span><br><span class="line">  // 用toFixed(2)來設定最多取得小數點後兩位，顯示於speed-bar上</span><br><span class="line">  bar.textContent = playbackRate.toFixed(2) + &#x27;x&#x27;;</span><br><span class="line">  // 控制影片的速率</span><br><span class="line">  video.playbackRate = playbackRate;</span><br><span class="line">&#125;</span><br><span class="line">function barchange(e) &#123;</span><br><span class="line">  //畫面最上方到滑鼠位置的距離 - 畫面最上方到bar的最上方 = 藍色的部分</span><br><span class="line">  const height = e.y - speed.offsetTop</span><br><span class="line">  //(藍色的部分 / 整個bar的高度(410))*100 = 百分比</span><br><span class="line">  const barheight = (height / speed.offsetHeight) * 100</span><br><span class="line">  //4 * 比例 = bar上顯示的數字</span><br><span class="line">  const barnumber = 4 * (height / speed.offsetHeight)</span><br><span class="line">  bar.style.height = barheight + &#x27;%&#x27;</span><br><span class="line">  //取小數點後兩位</span><br><span class="line">  bar.innerText = Math.round(barnumber * 100) / 100 + &#x27;x&#x27;</span><br><span class="line">  video.playbackRate = Math.round(barnumber * 100) / 100</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JS30</category>
      </categories>
      <tags>
        <tag>JS30</tag>
      </tags>
  </entry>
</search>
